
visual_catch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d414  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  0800d528  0800d528  0001d528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7e8  0800d7e8  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d7e8  0800d7e8  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d7e8  0800d7e8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7e8  0800d7e8  0001d7e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7ec  0800d7ec  0001d7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800d7f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012cc  200001f8  0800d9e4  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200014c4  0800d9e4  000214c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015059  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003985  00000000  00000000  00035276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00038c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  00039f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b597  00000000  00000000  0003b0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a0c  00000000  00000000  0005666f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000901ea  00000000  00000000  0007007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100265  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055d4  00000000  00000000  001002b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d50c 	.word	0x0800d50c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800d50c 	.word	0x0800d50c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_GPIO_Init+0x70>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a19      	ldr	r2, [pc, #100]	; (8000b28 <MX_GPIO_Init+0x70>)
 8000ac4:	f043 0310 	orr.w	r3, r3, #16
 8000ac8:	6193      	str	r3, [r2, #24]
 8000aca:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <MX_GPIO_Init+0x70>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f003 0310 	and.w	r3, r3, #16
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_GPIO_Init+0x70>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <MX_GPIO_Init+0x70>)
 8000adc:	f043 0320 	orr.w	r3, r3, #32
 8000ae0:	6193      	str	r3, [r2, #24]
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_GPIO_Init+0x70>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	f003 0320 	and.w	r3, r3, #32
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_GPIO_Init+0x70>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <MX_GPIO_Init+0x70>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	6193      	str	r3, [r2, #24]
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_GPIO_Init+0x70>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_GPIO_Init+0x70>)
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <MX_GPIO_Init+0x70>)
 8000b0c:	f043 0308 	orr.w	r3, r3, #8
 8000b10:	6193      	str	r3, [r2, #24]
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <MX_GPIO_Init+0x70>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	f003 0308 	and.w	r3, r3, #8
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]

}
 8000b1e:	bf00      	nop
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	40021000 	.word	0x40021000

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b30:	f000 fb4c 	bl	80011cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b34:	f000 f80f 	bl	8000b56 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b38:	f7ff ffbe 	bl	8000ab8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b3c:	f000 f8e8 	bl	8000d10 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b40:	f000 f97c 	bl	8000e3c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000b44:	f008 fd12 	bl	800956c <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8000b48:	f000 fa9e 	bl	8001088 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

    catch_reset();
 8000b4c:	f009 fe0a 	bl	800a764 <catch_reset>
  /* USER CODE BEGIN WHILE */
    while (1)
    {
    	//control(X_TARGET, Z_TARGET, ANGLE_TARGET);
    	//HAL_Delay(20);
    	wait_for_catch();
 8000b50:	f009 ffa8 	bl	800aaa4 <wait_for_catch>
 8000b54:	e7fc      	b.n	8000b50 <main+0x24>

08000b56 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b094      	sub	sp, #80	; 0x50
 8000b5a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b60:	2228      	movs	r2, #40	; 0x28
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f00a f9ff 	bl	800af68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b86:	2301      	movs	r3, #1
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b94:	2301      	movs	r3, #1
 8000b96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ba2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bac:	4618      	mov	r0, r3
 8000bae:	f002 fb99 	bl	80032e4 <HAL_RCC_OscConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bb8:	f000 f827 	bl	8000c0a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bcc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	2102      	movs	r1, #2
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 fe05 	bl	80037e8 <HAL_RCC_ClockConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000be4:	f000 f811 	bl	8000c0a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000be8:	2310      	movs	r3, #16
 8000bea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f002 ff90 	bl	8003b18 <HAL_RCCEx_PeriphCLKConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000bfe:	f000 f804 	bl	8000c0a <Error_Handler>
  }
}
 8000c02:	bf00      	nop
 8000c04:	3750      	adds	r7, #80	; 0x50
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0e:	b672      	cpsid	i
}
 8000c10:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000c12:	e7fe      	b.n	8000c12 <Error_Handler+0x8>

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_MspInit+0x5c>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <HAL_MspInit+0x5c>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6193      	str	r3, [r2, #24]
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_MspInit+0x5c>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_MspInit+0x5c>)
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <HAL_MspInit+0x5c>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	61d3      	str	r3, [r2, #28]
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_MspInit+0x5c>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_MspInit+0x60>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <HAL_MspInit+0x60>)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c66:	bf00      	nop
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010000 	.word	0x40010000

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <NMI_Handler+0x4>

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr

08000ca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr

08000cba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbe:	f000 facb 	bl	8001258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000cce:	f000 ff76 	bl	8001bbe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000f98 	.word	0x20000f98

08000cdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <TIM2_IRQHandler+0x10>)
 8000ce2:	f003 f90f 	bl	8003f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000228 	.word	0x20000228

08000cf0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <USART2_IRQHandler+0x10>)
 8000cf6:	f003 ff4f 	bl	8004b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200002b8 	.word	0x200002b8

08000d04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08e      	sub	sp, #56	; 0x38
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	f107 0320 	add.w	r3, r7, #32
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
 8000d3c:	615a      	str	r2, [r3, #20]
 8000d3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d40:	4b3d      	ldr	r3, [pc, #244]	; (8000e38 <MX_TIM2_Init+0x128>)
 8000d42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000d48:	4b3b      	ldr	r3, [pc, #236]	; (8000e38 <MX_TIM2_Init+0x128>)
 8000d4a:	2247      	movs	r2, #71	; 0x47
 8000d4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4e:	4b3a      	ldr	r3, [pc, #232]	; (8000e38 <MX_TIM2_Init+0x128>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 8000d54:	4b38      	ldr	r3, [pc, #224]	; (8000e38 <MX_TIM2_Init+0x128>)
 8000d56:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000d5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5c:	4b36      	ldr	r3, [pc, #216]	; (8000e38 <MX_TIM2_Init+0x128>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d62:	4b35      	ldr	r3, [pc, #212]	; (8000e38 <MX_TIM2_Init+0x128>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d68:	4833      	ldr	r0, [pc, #204]	; (8000e38 <MX_TIM2_Init+0x128>)
 8000d6a:	f002 ff8b 	bl	8003c84 <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d74:	f7ff ff49 	bl	8000c0a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d82:	4619      	mov	r1, r3
 8000d84:	482c      	ldr	r0, [pc, #176]	; (8000e38 <MX_TIM2_Init+0x128>)
 8000d86:	f003 fa83 	bl	8004290 <HAL_TIM_ConfigClockSource>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d90:	f7ff ff3b 	bl	8000c0a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d94:	4828      	ldr	r0, [pc, #160]	; (8000e38 <MX_TIM2_Init+0x128>)
 8000d96:	f002 ffc4 	bl	8003d22 <HAL_TIM_PWM_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000da0:	f7ff ff33 	bl	8000c0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dac:	f107 0320 	add.w	r3, r7, #32
 8000db0:	4619      	mov	r1, r3
 8000db2:	4821      	ldr	r0, [pc, #132]	; (8000e38 <MX_TIM2_Init+0x128>)
 8000db4:	f003 fe02 	bl	80049bc <HAL_TIMEx_MasterConfigSynchronization>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000dbe:	f7ff ff24 	bl	8000c0a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc2:	2360      	movs	r3, #96	; 0x60
 8000dc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4817      	ldr	r0, [pc, #92]	; (8000e38 <MX_TIM2_Init+0x128>)
 8000dda:	f003 f99b 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000de4:	f7ff ff11 	bl	8000c0a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2204      	movs	r2, #4
 8000dec:	4619      	mov	r1, r3
 8000dee:	4812      	ldr	r0, [pc, #72]	; (8000e38 <MX_TIM2_Init+0x128>)
 8000df0:	f003 f990 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000dfa:	f7ff ff06 	bl	8000c0a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2208      	movs	r2, #8
 8000e02:	4619      	mov	r1, r3
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <MX_TIM2_Init+0x128>)
 8000e06:	f003 f985 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000e10:	f7ff fefb 	bl	8000c0a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	220c      	movs	r2, #12
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4807      	ldr	r0, [pc, #28]	; (8000e38 <MX_TIM2_Init+0x128>)
 8000e1c:	f003 f97a 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000e26:	f7ff fef0 	bl	8000c0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e2a:	4803      	ldr	r0, [pc, #12]	; (8000e38 <MX_TIM2_Init+0x128>)
 8000e2c:	f000 f8ac 	bl	8000f88 <HAL_TIM_MspPostInit>

}
 8000e30:	bf00      	nop
 8000e32:	3738      	adds	r7, #56	; 0x38
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000228 	.word	0x20000228

08000e3c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e42:	f107 0320 	add.w	r3, r7, #32
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]
 8000e5a:	615a      	str	r2, [r3, #20]
 8000e5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e5e:	4b27      	ldr	r3, [pc, #156]	; (8000efc <MX_TIM3_Init+0xc0>)
 8000e60:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <MX_TIM3_Init+0xc4>)
 8000e62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000e64:	4b25      	ldr	r3, [pc, #148]	; (8000efc <MX_TIM3_Init+0xc0>)
 8000e66:	2247      	movs	r2, #71	; 0x47
 8000e68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6a:	4b24      	ldr	r3, [pc, #144]	; (8000efc <MX_TIM3_Init+0xc0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2999;
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <MX_TIM3_Init+0xc0>)
 8000e72:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000e76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e78:	4b20      	ldr	r3, [pc, #128]	; (8000efc <MX_TIM3_Init+0xc0>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_TIM3_Init+0xc0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e84:	481d      	ldr	r0, [pc, #116]	; (8000efc <MX_TIM3_Init+0xc0>)
 8000e86:	f002 ff4c 	bl	8003d22 <HAL_TIM_PWM_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000e90:	f7ff febb 	bl	8000c0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e94:	2300      	movs	r3, #0
 8000e96:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e9c:	f107 0320 	add.w	r3, r7, #32
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4816      	ldr	r0, [pc, #88]	; (8000efc <MX_TIM3_Init+0xc0>)
 8000ea4:	f003 fd8a 	bl	80049bc <HAL_TIMEx_MasterConfigSynchronization>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000eae:	f7ff feac 	bl	8000c0a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb2:	2360      	movs	r3, #96	; 0x60
 8000eb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <MX_TIM3_Init+0xc0>)
 8000eca:	f003 f923 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000ed4:	f7ff fe99 	bl	8000c0a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2204      	movs	r2, #4
 8000edc:	4619      	mov	r1, r3
 8000ede:	4807      	ldr	r0, [pc, #28]	; (8000efc <MX_TIM3_Init+0xc0>)
 8000ee0:	f003 f918 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000eea:	f7ff fe8e 	bl	8000c0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000eee:	4803      	ldr	r0, [pc, #12]	; (8000efc <MX_TIM3_Init+0xc0>)
 8000ef0:	f000 f84a 	bl	8000f88 <HAL_TIM_MspPostInit>

}
 8000ef4:	bf00      	nop
 8000ef6:	3728      	adds	r7, #40	; 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000270 	.word	0x20000270
 8000f00:	40000400 	.word	0x40000400

08000f04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f14:	d113      	bne.n	8000f3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <HAL_TIM_Base_MspInit+0x44>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <HAL_TIM_Base_MspInit+0x44>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	61d3      	str	r3, [r2, #28]
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <HAL_TIM_Base_MspInit+0x44>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	201c      	movs	r0, #28
 8000f34:	f000 faa7 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f38:	201c      	movs	r0, #28
 8000f3a:	f000 fac0 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000

08000f4c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <HAL_TIM_PWM_MspInit+0x34>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d10b      	bne.n	8000f76 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <HAL_TIM_PWM_MspInit+0x38>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <HAL_TIM_PWM_MspInit+0x38>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	61d3      	str	r3, [r2, #28]
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_TIM_PWM_MspInit+0x38>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f76:	bf00      	nop
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	40000400 	.word	0x40000400
 8000f84:	40021000 	.word	0x40021000

08000f88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fa6:	d143      	bne.n	8001030 <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	4b32      	ldr	r3, [pc, #200]	; (8001074 <HAL_TIM_MspPostInit+0xec>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a31      	ldr	r2, [pc, #196]	; (8001074 <HAL_TIM_MspPostInit+0xec>)
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <HAL_TIM_MspPostInit+0xec>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <HAL_TIM_MspPostInit+0xec>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a2b      	ldr	r2, [pc, #172]	; (8001074 <HAL_TIM_MspPostInit+0xec>)
 8000fc6:	f043 0308 	orr.w	r3, r3, #8
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b29      	ldr	r3, [pc, #164]	; (8001074 <HAL_TIM_MspPostInit+0xec>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0308 	and.w	r3, r3, #8
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4823      	ldr	r0, [pc, #140]	; (8001078 <HAL_TIM_MspPostInit+0xf0>)
 8000fec:	f000 fb32 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ff0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	481d      	ldr	r0, [pc, #116]	; (800107c <HAL_TIM_MspPostInit+0xf4>)
 8001006:	f000 fb25 	bl	8001654 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <HAL_TIM_MspPostInit+0xf8>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
 8001020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
 8001028:	4a15      	ldr	r2, [pc, #84]	; (8001080 <HAL_TIM_MspPostInit+0xf8>)
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800102e:	e01c      	b.n	800106a <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM3)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a13      	ldr	r2, [pc, #76]	; (8001084 <HAL_TIM_MspPostInit+0xfc>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d117      	bne.n	800106a <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_TIM_MspPostInit+0xec>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <HAL_TIM_MspPostInit+0xec>)
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	6193      	str	r3, [r2, #24]
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_TIM_MspPostInit+0xec>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001052:	23c0      	movs	r3, #192	; 0xc0
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2302      	movs	r3, #2
 800105c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <HAL_TIM_MspPostInit+0xf0>)
 8001066:	f000 faf5 	bl	8001654 <HAL_GPIO_Init>
}
 800106a:	bf00      	nop
 800106c:	3728      	adds	r7, #40	; 0x28
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	40010800 	.word	0x40010800
 800107c:	40010c00 	.word	0x40010c00
 8001080:	40010000 	.word	0x40010000
 8001084:	40000400 	.word	0x40000400

08001088 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <MX_USART2_UART_Init+0x50>)
 8001090:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 8001094:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001098:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010c0:	f003 fcec 	bl	8004a9c <HAL_UART_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ca:	f7ff fd9e 	bl	8000c0a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200002b8 	.word	0x200002b8
 80010d8:	40004400 	.word	0x40004400

080010dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a1f      	ldr	r2, [pc, #124]	; (8001174 <HAL_UART_MspInit+0x98>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d137      	bne.n	800116c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <HAL_UART_MspInit+0x9c>)
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	4a1d      	ldr	r2, [pc, #116]	; (8001178 <HAL_UART_MspInit+0x9c>)
 8001102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001106:	61d3      	str	r3, [r2, #28]
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_UART_MspInit+0x9c>)
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_UART_MspInit+0x9c>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a17      	ldr	r2, [pc, #92]	; (8001178 <HAL_UART_MspInit+0x9c>)
 800111a:	f043 0304 	orr.w	r3, r3, #4
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_UART_MspInit+0x9c>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800112c:	2304      	movs	r3, #4
 800112e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	4619      	mov	r1, r3
 800113e:	480f      	ldr	r0, [pc, #60]	; (800117c <HAL_UART_MspInit+0xa0>)
 8001140:	f000 fa88 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001144:	2308      	movs	r3, #8
 8001146:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	4619      	mov	r1, r3
 8001156:	4809      	ldr	r0, [pc, #36]	; (800117c <HAL_UART_MspInit+0xa0>)
 8001158:	f000 fa7c 	bl	8001654 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2026      	movs	r0, #38	; 0x26
 8001162:	f000 f990 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001166:	2026      	movs	r0, #38	; 0x26
 8001168:	f000 f9a9 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40004400 	.word	0x40004400
 8001178:	40021000 	.word	0x40021000
 800117c:	40010800 	.word	0x40010800

08001180 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001182:	490d      	ldr	r1, [pc, #52]	; (80011b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001188:	e002      	b.n	8001190 <LoopCopyDataInit>

0800118a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800118c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118e:	3304      	adds	r3, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001194:	d3f9      	bcc.n	800118a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001198:	4c0a      	ldr	r4, [pc, #40]	; (80011c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800119c:	e001      	b.n	80011a2 <LoopFillZerobss>

0800119e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a0:	3204      	adds	r2, #4

080011a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a4:	d3fb      	bcc.n	800119e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011a6:	f7ff fdad 	bl	8000d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011aa:	f009 feb9 	bl	800af20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ae:	f7ff fcbd 	bl	8000b2c <main>
  bx lr
 80011b2:	4770      	bx	lr
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80011bc:	0800d7f0 	.word	0x0800d7f0
  ldr r2, =_sbss
 80011c0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80011c4:	200014c4 	.word	0x200014c4

080011c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC1_2_IRQHandler>
	...

080011cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_Init+0x28>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <HAL_Init+0x28>)
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011dc:	2003      	movs	r0, #3
 80011de:	f000 f947 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e2:	200f      	movs	r0, #15
 80011e4:	f000 f808 	bl	80011f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e8:	f7ff fd14 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40022000 	.word	0x40022000

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_InitTick+0x54>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_InitTick+0x58>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f95f 	bl	80014da <HAL_SYSTICK_Config>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e00e      	b.n	8001244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d80a      	bhi.n	8001242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122c:	2200      	movs	r2, #0
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f000 f927 	bl	8001486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001238:	4a06      	ldr	r2, [pc, #24]	; (8001254 <HAL_InitTick+0x5c>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	e000      	b.n	8001244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000008 	.word	0x20000008
 8001250:	20000010 	.word	0x20000010
 8001254:	2000000c 	.word	0x2000000c

08001258 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_IncTick+0x1c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_IncTick+0x20>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a03      	ldr	r2, [pc, #12]	; (8001278 <HAL_IncTick+0x20>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	20000010 	.word	0x20000010
 8001278:	200002fc 	.word	0x200002fc

0800127c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b02      	ldr	r3, [pc, #8]	; (800128c <HAL_GetTick+0x10>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	200002fc 	.word	0x200002fc

08001290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff fff0 	bl	800127c <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d005      	beq.n	80012b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_Delay+0x44>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b6:	bf00      	nop
 80012b8:	f7ff ffe0 	bl	800127c <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d8f7      	bhi.n	80012b8 <HAL_Delay+0x28>
  {
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000010 	.word	0x20000010

080012d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db0b      	blt.n	8001366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f003 021f 	and.w	r2, r3, #31
 8001354:	4906      	ldr	r1, [pc, #24]	; (8001370 <__NVIC_EnableIRQ+0x34>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	2001      	movs	r0, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	bf28      	it	cs
 80013e6:	2304      	movcs	r3, #4
 80013e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d902      	bls.n	80013f8 <NVIC_EncodePriority+0x30>
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	e000      	b.n	80013fa <NVIC_EncodePriority+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	401a      	ands	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43d9      	mvns	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	4313      	orrs	r3, r2
         );
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f7ff ff90 	bl	8001374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff2d 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001498:	f7ff ff42 	bl	8001320 <__NVIC_GetPriorityGrouping>
 800149c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f7ff ff90 	bl	80013c8 <NVIC_EncodePriority>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff5f 	bl	8001374 <__NVIC_SetPriority>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff35 	bl	800133c <__NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffa2 	bl	800142c <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b085      	sub	sp, #20
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001504:	2b02      	cmp	r3, #2
 8001506:	d008      	beq.n	800151a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2204      	movs	r2, #4
 800150c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e020      	b.n	800155c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 020e 	bic.w	r2, r2, #14
 8001528:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0201 	bic.w	r2, r2, #1
 8001538:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001542:	2101      	movs	r1, #1
 8001544:	fa01 f202 	lsl.w	r2, r1, r2
 8001548:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800155a:	7bfb      	ldrb	r3, [r7, #15]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
	...

08001568 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800157a:	2b02      	cmp	r3, #2
 800157c:	d005      	beq.n	800158a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2204      	movs	r2, #4
 8001582:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	73fb      	strb	r3, [r7, #15]
 8001588:	e051      	b.n	800162e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 020e 	bic.w	r2, r2, #14
 8001598:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0201 	bic.w	r2, r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a22      	ldr	r2, [pc, #136]	; (8001638 <HAL_DMA_Abort_IT+0xd0>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d029      	beq.n	8001608 <HAL_DMA_Abort_IT+0xa0>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a20      	ldr	r2, [pc, #128]	; (800163c <HAL_DMA_Abort_IT+0xd4>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d022      	beq.n	8001604 <HAL_DMA_Abort_IT+0x9c>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a1f      	ldr	r2, [pc, #124]	; (8001640 <HAL_DMA_Abort_IT+0xd8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d01a      	beq.n	80015fe <HAL_DMA_Abort_IT+0x96>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <HAL_DMA_Abort_IT+0xdc>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d012      	beq.n	80015f8 <HAL_DMA_Abort_IT+0x90>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a1c      	ldr	r2, [pc, #112]	; (8001648 <HAL_DMA_Abort_IT+0xe0>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d00a      	beq.n	80015f2 <HAL_DMA_Abort_IT+0x8a>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a1a      	ldr	r2, [pc, #104]	; (800164c <HAL_DMA_Abort_IT+0xe4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d102      	bne.n	80015ec <HAL_DMA_Abort_IT+0x84>
 80015e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015ea:	e00e      	b.n	800160a <HAL_DMA_Abort_IT+0xa2>
 80015ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015f0:	e00b      	b.n	800160a <HAL_DMA_Abort_IT+0xa2>
 80015f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015f6:	e008      	b.n	800160a <HAL_DMA_Abort_IT+0xa2>
 80015f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fc:	e005      	b.n	800160a <HAL_DMA_Abort_IT+0xa2>
 80015fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001602:	e002      	b.n	800160a <HAL_DMA_Abort_IT+0xa2>
 8001604:	2310      	movs	r3, #16
 8001606:	e000      	b.n	800160a <HAL_DMA_Abort_IT+0xa2>
 8001608:	2301      	movs	r3, #1
 800160a:	4a11      	ldr	r2, [pc, #68]	; (8001650 <HAL_DMA_Abort_IT+0xe8>)
 800160c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	4798      	blx	r3
    } 
  }
  return status;
 800162e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40020008 	.word	0x40020008
 800163c:	4002001c 	.word	0x4002001c
 8001640:	40020030 	.word	0x40020030
 8001644:	40020044 	.word	0x40020044
 8001648:	40020058 	.word	0x40020058
 800164c:	4002006c 	.word	0x4002006c
 8001650:	40020000 	.word	0x40020000

08001654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001654:	b480      	push	{r7}
 8001656:	b08b      	sub	sp, #44	; 0x2c
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001666:	e169      	b.n	800193c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001668:	2201      	movs	r2, #1
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	429a      	cmp	r2, r3
 8001682:	f040 8158 	bne.w	8001936 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4a9a      	ldr	r2, [pc, #616]	; (80018f4 <HAL_GPIO_Init+0x2a0>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d05e      	beq.n	800174e <HAL_GPIO_Init+0xfa>
 8001690:	4a98      	ldr	r2, [pc, #608]	; (80018f4 <HAL_GPIO_Init+0x2a0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d875      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 8001696:	4a98      	ldr	r2, [pc, #608]	; (80018f8 <HAL_GPIO_Init+0x2a4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d058      	beq.n	800174e <HAL_GPIO_Init+0xfa>
 800169c:	4a96      	ldr	r2, [pc, #600]	; (80018f8 <HAL_GPIO_Init+0x2a4>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d86f      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 80016a2:	4a96      	ldr	r2, [pc, #600]	; (80018fc <HAL_GPIO_Init+0x2a8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d052      	beq.n	800174e <HAL_GPIO_Init+0xfa>
 80016a8:	4a94      	ldr	r2, [pc, #592]	; (80018fc <HAL_GPIO_Init+0x2a8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d869      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 80016ae:	4a94      	ldr	r2, [pc, #592]	; (8001900 <HAL_GPIO_Init+0x2ac>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d04c      	beq.n	800174e <HAL_GPIO_Init+0xfa>
 80016b4:	4a92      	ldr	r2, [pc, #584]	; (8001900 <HAL_GPIO_Init+0x2ac>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d863      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 80016ba:	4a92      	ldr	r2, [pc, #584]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d046      	beq.n	800174e <HAL_GPIO_Init+0xfa>
 80016c0:	4a90      	ldr	r2, [pc, #576]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d85d      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 80016c6:	2b12      	cmp	r3, #18
 80016c8:	d82a      	bhi.n	8001720 <HAL_GPIO_Init+0xcc>
 80016ca:	2b12      	cmp	r3, #18
 80016cc:	d859      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 80016ce:	a201      	add	r2, pc, #4	; (adr r2, 80016d4 <HAL_GPIO_Init+0x80>)
 80016d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d4:	0800174f 	.word	0x0800174f
 80016d8:	08001729 	.word	0x08001729
 80016dc:	0800173b 	.word	0x0800173b
 80016e0:	0800177d 	.word	0x0800177d
 80016e4:	08001783 	.word	0x08001783
 80016e8:	08001783 	.word	0x08001783
 80016ec:	08001783 	.word	0x08001783
 80016f0:	08001783 	.word	0x08001783
 80016f4:	08001783 	.word	0x08001783
 80016f8:	08001783 	.word	0x08001783
 80016fc:	08001783 	.word	0x08001783
 8001700:	08001783 	.word	0x08001783
 8001704:	08001783 	.word	0x08001783
 8001708:	08001783 	.word	0x08001783
 800170c:	08001783 	.word	0x08001783
 8001710:	08001783 	.word	0x08001783
 8001714:	08001783 	.word	0x08001783
 8001718:	08001731 	.word	0x08001731
 800171c:	08001745 	.word	0x08001745
 8001720:	4a79      	ldr	r2, [pc, #484]	; (8001908 <HAL_GPIO_Init+0x2b4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d013      	beq.n	800174e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001726:	e02c      	b.n	8001782 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	623b      	str	r3, [r7, #32]
          break;
 800172e:	e029      	b.n	8001784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	3304      	adds	r3, #4
 8001736:	623b      	str	r3, [r7, #32]
          break;
 8001738:	e024      	b.n	8001784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	3308      	adds	r3, #8
 8001740:	623b      	str	r3, [r7, #32]
          break;
 8001742:	e01f      	b.n	8001784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	330c      	adds	r3, #12
 800174a:	623b      	str	r3, [r7, #32]
          break;
 800174c:	e01a      	b.n	8001784 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001756:	2304      	movs	r3, #4
 8001758:	623b      	str	r3, [r7, #32]
          break;
 800175a:	e013      	b.n	8001784 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d105      	bne.n	8001770 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001764:	2308      	movs	r3, #8
 8001766:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	611a      	str	r2, [r3, #16]
          break;
 800176e:	e009      	b.n	8001784 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001770:	2308      	movs	r3, #8
 8001772:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	615a      	str	r2, [r3, #20]
          break;
 800177a:	e003      	b.n	8001784 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
          break;
 8001780:	e000      	b.n	8001784 <HAL_GPIO_Init+0x130>
          break;
 8001782:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2bff      	cmp	r3, #255	; 0xff
 8001788:	d801      	bhi.n	800178e <HAL_GPIO_Init+0x13a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	e001      	b.n	8001792 <HAL_GPIO_Init+0x13e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3304      	adds	r3, #4
 8001792:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2bff      	cmp	r3, #255	; 0xff
 8001798:	d802      	bhi.n	80017a0 <HAL_GPIO_Init+0x14c>
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	e002      	b.n	80017a6 <HAL_GPIO_Init+0x152>
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	3b08      	subs	r3, #8
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	210f      	movs	r1, #15
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	401a      	ands	r2, r3
 80017b8:	6a39      	ldr	r1, [r7, #32]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	431a      	orrs	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 80b1 	beq.w	8001936 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017d4:	4b4d      	ldr	r3, [pc, #308]	; (800190c <HAL_GPIO_Init+0x2b8>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a4c      	ldr	r2, [pc, #304]	; (800190c <HAL_GPIO_Init+0x2b8>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b4a      	ldr	r3, [pc, #296]	; (800190c <HAL_GPIO_Init+0x2b8>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017ec:	4a48      	ldr	r2, [pc, #288]	; (8001910 <HAL_GPIO_Init+0x2bc>)
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	3302      	adds	r3, #2
 80017f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	220f      	movs	r2, #15
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a40      	ldr	r2, [pc, #256]	; (8001914 <HAL_GPIO_Init+0x2c0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d013      	beq.n	8001840 <HAL_GPIO_Init+0x1ec>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a3f      	ldr	r2, [pc, #252]	; (8001918 <HAL_GPIO_Init+0x2c4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d00d      	beq.n	800183c <HAL_GPIO_Init+0x1e8>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a3e      	ldr	r2, [pc, #248]	; (800191c <HAL_GPIO_Init+0x2c8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d007      	beq.n	8001838 <HAL_GPIO_Init+0x1e4>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a3d      	ldr	r2, [pc, #244]	; (8001920 <HAL_GPIO_Init+0x2cc>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d101      	bne.n	8001834 <HAL_GPIO_Init+0x1e0>
 8001830:	2303      	movs	r3, #3
 8001832:	e006      	b.n	8001842 <HAL_GPIO_Init+0x1ee>
 8001834:	2304      	movs	r3, #4
 8001836:	e004      	b.n	8001842 <HAL_GPIO_Init+0x1ee>
 8001838:	2302      	movs	r3, #2
 800183a:	e002      	b.n	8001842 <HAL_GPIO_Init+0x1ee>
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <HAL_GPIO_Init+0x1ee>
 8001840:	2300      	movs	r3, #0
 8001842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001844:	f002 0203 	and.w	r2, r2, #3
 8001848:	0092      	lsls	r2, r2, #2
 800184a:	4093      	lsls	r3, r2
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001852:	492f      	ldr	r1, [pc, #188]	; (8001910 <HAL_GPIO_Init+0x2bc>)
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	089b      	lsrs	r3, r3, #2
 8001858:	3302      	adds	r3, #2
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d006      	beq.n	800187a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800186c:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	492c      	ldr	r1, [pc, #176]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	600b      	str	r3, [r1, #0]
 8001878:	e006      	b.n	8001888 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800187a:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	43db      	mvns	r3, r3
 8001882:	4928      	ldr	r1, [pc, #160]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 8001884:	4013      	ands	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001894:	4b23      	ldr	r3, [pc, #140]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	4922      	ldr	r1, [pc, #136]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	491e      	ldr	r1, [pc, #120]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	4918      	ldr	r1, [pc, #96]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	608b      	str	r3, [r1, #8]
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	4914      	ldr	r1, [pc, #80]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d021      	beq.n	8001928 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	490e      	ldr	r1, [pc, #56]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60cb      	str	r3, [r1, #12]
 80018f0:	e021      	b.n	8001936 <HAL_GPIO_Init+0x2e2>
 80018f2:	bf00      	nop
 80018f4:	10320000 	.word	0x10320000
 80018f8:	10310000 	.word	0x10310000
 80018fc:	10220000 	.word	0x10220000
 8001900:	10210000 	.word	0x10210000
 8001904:	10120000 	.word	0x10120000
 8001908:	10110000 	.word	0x10110000
 800190c:	40021000 	.word	0x40021000
 8001910:	40010000 	.word	0x40010000
 8001914:	40010800 	.word	0x40010800
 8001918:	40010c00 	.word	0x40010c00
 800191c:	40011000 	.word	0x40011000
 8001920:	40011400 	.word	0x40011400
 8001924:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_GPIO_Init+0x304>)
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	43db      	mvns	r3, r3
 8001930:	4909      	ldr	r1, [pc, #36]	; (8001958 <HAL_GPIO_Init+0x304>)
 8001932:	4013      	ands	r3, r2
 8001934:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	3301      	adds	r3, #1
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	fa22 f303 	lsr.w	r3, r2, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	f47f ae8e 	bne.w	8001668 <HAL_GPIO_Init+0x14>
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	372c      	adds	r7, #44	; 0x2c
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	40010400 	.word	0x40010400

0800195c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800195c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195e:	b08b      	sub	sp, #44	; 0x2c
 8001960:	af06      	add	r7, sp, #24
 8001962:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e0fd      	b.n	8001b6a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d106      	bne.n	8001988 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f007 ffda 	bl	800993c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2203      	movs	r2, #3
 800198c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f003 fd03 	bl	80053a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	687e      	ldr	r6, [r7, #4]
 80019a2:	466d      	mov	r5, sp
 80019a4:	f106 0410 	add.w	r4, r6, #16
 80019a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	602b      	str	r3, [r5, #0]
 80019b0:	1d33      	adds	r3, r6, #4
 80019b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019b4:	6838      	ldr	r0, [r7, #0]
 80019b6:	f003 fccd 	bl	8005354 <USB_CoreInit>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2202      	movs	r2, #2
 80019c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0ce      	b.n	8001b6a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f003 fcfe 	bl	80053d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]
 80019dc:	e04c      	b.n	8001a78 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	440b      	add	r3, r1
 80019ee:	3301      	adds	r3, #1
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	440b      	add	r3, r1
 8001a04:	7bfa      	ldrb	r2, [r7, #15]
 8001a06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a08:	7bfa      	ldrb	r2, [r7, #15]
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	b298      	uxth	r0, r3
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	440b      	add	r3, r1
 8001a1a:	3336      	adds	r3, #54	; 0x36
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	440b      	add	r3, r1
 8001a30:	3303      	adds	r3, #3
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a36:	7bfa      	ldrb	r2, [r7, #15]
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	440b      	add	r3, r1
 8001a44:	3338      	adds	r3, #56	; 0x38
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	440b      	add	r3, r1
 8001a58:	333c      	adds	r3, #60	; 0x3c
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a5e:	7bfa      	ldrb	r2, [r7, #15]
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	440b      	add	r3, r1
 8001a6c:	3340      	adds	r3, #64	; 0x40
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	3301      	adds	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d3ad      	bcc.n	80019de <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
 8001a86:	e044      	b.n	8001b12 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a88:	7bfa      	ldrb	r2, [r7, #15]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	440b      	add	r3, r1
 8001a96:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a9e:	7bfa      	ldrb	r2, [r7, #15]
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	440b      	add	r3, r1
 8001aac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ab0:	7bfa      	ldrb	r2, [r7, #15]
 8001ab2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ab4:	7bfa      	ldrb	r2, [r7, #15]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	440b      	add	r3, r1
 8001ac2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001aca:	7bfa      	ldrb	r2, [r7, #15]
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	440b      	add	r3, r1
 8001aee:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	440b      	add	r3, r1
 8001b04:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	73fb      	strb	r3, [r7, #15]
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d3b5      	bcc.n	8001a88 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	603b      	str	r3, [r7, #0]
 8001b22:	687e      	ldr	r6, [r7, #4]
 8001b24:	466d      	mov	r5, sp
 8001b26:	f106 0410 	add.w	r4, r6, #16
 8001b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	602b      	str	r3, [r5, #0]
 8001b32:	1d33      	adds	r3, r6, #4
 8001b34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b36:	6838      	ldr	r0, [r7, #0]
 8001b38:	f003 fc58 	bl	80053ec <USB_DevInit>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d005      	beq.n	8001b4e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2202      	movs	r2, #2
 8001b46:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00d      	b.n	8001b6a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f006 f90a 	bl	8007d7c <USB_DevDisconnect>

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b72 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_PCD_Start+0x16>
 8001b84:	2302      	movs	r3, #2
 8001b86:	e016      	b.n	8001bb6 <HAL_PCD_Start+0x44>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f003 fbed 	bl	8005374 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f008 f940 	bl	8009e22 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f006 f8de 	bl	8007d68 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b088      	sub	sp, #32
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f006 f8e0 	bl	8007d90 <USB_ReadInterrupts>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bda:	d102      	bne.n	8001be2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 fb5f 	bl	80022a0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f006 f8d2 	bl	8007d90 <USB_ReadInterrupts>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf6:	d112      	bne.n	8001c1e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c0a:	b292      	uxth	r2, r2
 8001c0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f007 ff0e 	bl	8009a32 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c16:	2100      	movs	r1, #0
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f923 	bl	8001e64 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f006 f8b4 	bl	8007d90 <USB_ReadInterrupts>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c32:	d10b      	bne.n	8001c4c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c46:	b292      	uxth	r2, r2
 8001c48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f006 f89d 	bl	8007d90 <USB_ReadInterrupts>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c60:	d10b      	bne.n	8001c7a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c74:	b292      	uxth	r2, r2
 8001c76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f006 f886 	bl	8007d90 <USB_ReadInterrupts>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c8e:	d126      	bne.n	8001cde <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0204 	bic.w	r2, r2, #4
 8001ca2:	b292      	uxth	r2, r2
 8001ca4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0208 	bic.w	r2, r2, #8
 8001cba:	b292      	uxth	r2, r2
 8001cbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f007 feef 	bl	8009aa4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cd8:	b292      	uxth	r2, r2
 8001cda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f006 f854 	bl	8007d90 <USB_ReadInterrupts>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cf2:	f040 8082 	bne.w	8001dfa <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	77fb      	strb	r3, [r7, #31]
 8001cfa:	e010      	b.n	8001d1e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	7ffb      	ldrb	r3, [r7, #31]
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	441a      	add	r2, r3
 8001d08:	7ffb      	ldrb	r3, [r7, #31]
 8001d0a:	8812      	ldrh	r2, [r2, #0]
 8001d0c:	b292      	uxth	r2, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	3320      	adds	r3, #32
 8001d12:	443b      	add	r3, r7
 8001d14:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001d18:	7ffb      	ldrb	r3, [r7, #31]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	77fb      	strb	r3, [r7, #31]
 8001d1e:	7ffb      	ldrb	r3, [r7, #31]
 8001d20:	2b07      	cmp	r3, #7
 8001d22:	d9eb      	bls.n	8001cfc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	b292      	uxth	r2, r2
 8001d38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0201 	bic.w	r2, r2, #1
 8001d4e:	b292      	uxth	r2, r2
 8001d50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001d54:	bf00      	nop
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f6      	beq.n	8001d56 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7a:	b292      	uxth	r2, r2
 8001d7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	77fb      	strb	r3, [r7, #31]
 8001d84:	e00f      	b.n	8001da6 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d86:	7ffb      	ldrb	r3, [r7, #31]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	7ffa      	ldrb	r2, [r7, #31]
 8001d90:	0092      	lsls	r2, r2, #2
 8001d92:	440a      	add	r2, r1
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	3320      	adds	r3, #32
 8001d98:	443b      	add	r3, r7
 8001d9a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001d9e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001da0:	7ffb      	ldrb	r3, [r7, #31]
 8001da2:	3301      	adds	r3, #1
 8001da4:	77fb      	strb	r3, [r7, #31]
 8001da6:	7ffb      	ldrb	r3, [r7, #31]
 8001da8:	2b07      	cmp	r3, #7
 8001daa:	d9ec      	bls.n	8001d86 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0208 	orr.w	r2, r2, #8
 8001dbe:	b292      	uxth	r2, r2
 8001dc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dd6:	b292      	uxth	r2, r2
 8001dd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0204 	orr.w	r2, r2, #4
 8001dee:	b292      	uxth	r2, r2
 8001df0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f007 fe3b 	bl	8009a70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f005 ffc6 	bl	8007d90 <USB_ReadInterrupts>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e0e:	d10e      	bne.n	8001e2e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e22:	b292      	uxth	r2, r2
 8001e24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f007 fdf4 	bl	8009a16 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f005 ffac 	bl	8007d90 <USB_ReadInterrupts>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e42:	d10b      	bne.n	8001e5c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e56:	b292      	uxth	r2, r2
 8001e58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	3720      	adds	r7, #32
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_PCD_SetAddress+0x1a>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e013      	b.n	8001ea6 <HAL_PCD_SetAddress+0x42>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	78fa      	ldrb	r2, [r7, #3]
 8001e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	78fa      	ldrb	r2, [r7, #3]
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f005 ff53 	bl	8007d42 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	4608      	mov	r0, r1
 8001eb8:	4611      	mov	r1, r2
 8001eba:	461a      	mov	r2, r3
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	70fb      	strb	r3, [r7, #3]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	803b      	strh	r3, [r7, #0]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ecc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	da0e      	bge.n	8001ef2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2201      	movs	r2, #1
 8001eee:	705a      	strb	r2, [r3, #1]
 8001ef0:	e00e      	b.n	8001f10 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 0207 	and.w	r2, r3, #7
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	4413      	add	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f1c:	883a      	ldrh	r2, [r7, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	78ba      	ldrb	r2, [r7, #2]
 8001f26:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	785b      	ldrb	r3, [r3, #1]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d004      	beq.n	8001f3a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f3a:	78bb      	ldrb	r3, [r7, #2]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d102      	bne.n	8001f46 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <HAL_PCD_EP_Open+0xa6>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e00e      	b.n	8001f72 <HAL_PCD_EP_Open+0xc4>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68f9      	ldr	r1, [r7, #12]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 fa62 	bl	800542c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001f70:	7afb      	ldrb	r3, [r7, #11]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	460b      	mov	r3, r1
 8001f84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	da0e      	bge.n	8001fac <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	705a      	strb	r2, [r3, #1]
 8001faa:	e00e      	b.n	8001fca <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	f003 0207 	and.w	r2, r3, #7
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_PCD_EP_Close+0x6a>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e00e      	b.n	8002002 <HAL_PCD_EP_Close+0x88>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68f9      	ldr	r1, [r7, #12]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f003 fd84 	bl	8005b00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	460b      	mov	r3, r1
 8002018:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800201a:	7afb      	ldrb	r3, [r7, #11]
 800201c:	f003 0207 	and.w	r2, r3, #7
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4413      	add	r3, r2
 8002030:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2200      	movs	r2, #0
 8002042:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2200      	movs	r2, #0
 8002048:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800204a:	7afb      	ldrb	r3, [r7, #11]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	b2da      	uxtb	r2, r3
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002056:	7afb      	ldrb	r3, [r7, #11]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	2b00      	cmp	r3, #0
 800205e:	d106      	bne.n	800206e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6979      	ldr	r1, [r7, #20]
 8002066:	4618      	mov	r0, r3
 8002068:	f003 ff36 	bl	8005ed8 <USB_EPStartXfer>
 800206c:	e005      	b.n	800207a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6979      	ldr	r1, [r7, #20]
 8002074:	4618      	mov	r0, r3
 8002076:	f003 ff2f 	bl	8005ed8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	f003 0207 	and.w	r2, r3, #7
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	440b      	add	r3, r1
 80020a2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	603b      	str	r3, [r7, #0]
 80020be:	460b      	mov	r3, r1
 80020c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c2:	7afb      	ldrb	r3, [r7, #11]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4413      	add	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2200      	movs	r2, #0
 80020f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2201      	movs	r2, #1
 80020fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020fe:	7afb      	ldrb	r3, [r7, #11]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	b2da      	uxtb	r2, r3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800210a:	7afb      	ldrb	r3, [r7, #11]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	2b00      	cmp	r3, #0
 8002112:	d106      	bne.n	8002122 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6979      	ldr	r1, [r7, #20]
 800211a:	4618      	mov	r0, r3
 800211c:	f003 fedc 	bl	8005ed8 <USB_EPStartXfer>
 8002120:	e005      	b.n	800212e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6979      	ldr	r1, [r7, #20]
 8002128:	4618      	mov	r0, r3
 800212a:	f003 fed5 	bl	8005ed8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	f003 0207 	and.w	r2, r3, #7
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	429a      	cmp	r2, r3
 8002150:	d901      	bls.n	8002156 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e04c      	b.n	80021f0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002156:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800215a:	2b00      	cmp	r3, #0
 800215c:	da0e      	bge.n	800217c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2201      	movs	r2, #1
 8002178:	705a      	strb	r2, [r3, #1]
 800217a:	e00c      	b.n	8002196 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800217c:	78fa      	ldrb	r2, [r7, #3]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_PCD_EP_SetStall+0x7e>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e01c      	b.n	80021f0 <HAL_PCD_EP_SetStall+0xb8>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68f9      	ldr	r1, [r7, #12]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f005 fcbf 	bl	8007b48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d108      	bne.n	80021e6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80021de:	4619      	mov	r1, r3
 80021e0:	4610      	mov	r0, r2
 80021e2:	f005 fde4 	bl	8007dae <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	f003 020f 	and.w	r2, r3, #15
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	429a      	cmp	r2, r3
 8002210:	d901      	bls.n	8002216 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e040      	b.n	8002298 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002216:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800221a:	2b00      	cmp	r3, #0
 800221c:	da0e      	bge.n	800223c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	705a      	strb	r2, [r3, #1]
 800223a:	e00e      	b.n	800225a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	f003 0207 	and.w	r2, r3, #7
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	b2da      	uxtb	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_PCD_EP_ClrStall+0x82>
 8002276:	2302      	movs	r3, #2
 8002278:	e00e      	b.n	8002298 <HAL_PCD_EP_ClrStall+0xa0>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68f9      	ldr	r1, [r7, #12]
 8002288:	4618      	mov	r0, r3
 800228a:	f005 fcad 	bl	8007be8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08e      	sub	sp, #56	; 0x38
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022a8:	e2ec      	b.n	8002884 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022b2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80022b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80022c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f040 8161 	bne.w	800258c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80022ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d152      	bne.n	800237a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80022e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e4:	81fb      	strh	r3, [r7, #14]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	89fb      	ldrh	r3, [r7, #14]
 80022ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3328      	adds	r3, #40	; 0x28
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002306:	b29b      	uxth	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	3302      	adds	r3, #2
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	441a      	add	r2, r3
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002338:	2100      	movs	r1, #0
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f007 fb51 	bl	80099e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 829b 	beq.w	8002884 <PCD_EP_ISR_Handler+0x5e4>
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f040 8296 	bne.w	8002884 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002364:	b2da      	uxtb	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	b292      	uxth	r2, r2
 800236c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002378:	e284      	b.n	8002884 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800238a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800238c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002390:	2b00      	cmp	r3, #0
 8002392:	d034      	beq.n	80023fe <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800239c:	b29b      	uxth	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	3306      	adds	r3, #6
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	f005 fd3b 	bl	8007e4e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	b29a      	uxth	r2, r3
 80023e0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023e4:	4013      	ands	r3, r2
 80023e6:	823b      	strh	r3, [r7, #16]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	8a3a      	ldrh	r2, [r7, #16]
 80023ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023f2:	b292      	uxth	r2, r2
 80023f4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f007 fac6 	bl	8009988 <HAL_PCD_SetupStageCallback>
 80023fc:	e242      	b.n	8002884 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023fe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002402:	2b00      	cmp	r3, #0
 8002404:	f280 823e 	bge.w	8002884 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	b29a      	uxth	r2, r3
 8002410:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002414:	4013      	ands	r3, r2
 8002416:	83bb      	strh	r3, [r7, #28]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	8bba      	ldrh	r2, [r7, #28]
 800241e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002422:	b292      	uxth	r2, r2
 8002424:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800242e:	b29b      	uxth	r3, r3
 8002430:	461a      	mov	r2, r3
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	3306      	adds	r3, #6
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	4413      	add	r3, r2
 8002444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d019      	beq.n	800248e <PCD_EP_ISR_Handler+0x1ee>
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d015      	beq.n	800248e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	6959      	ldr	r1, [r3, #20]
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002472:	b29b      	uxth	r3, r3
 8002474:	f005 fceb 	bl	8007e4e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	441a      	add	r2, r3
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002486:	2100      	movs	r1, #0
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f007 fa8f 	bl	80099ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	b29b      	uxth	r3, r3
 8002496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800249a:	2b00      	cmp	r3, #0
 800249c:	f040 81f2 	bne.w	8002884 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	4413      	add	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d112      	bne.n	80024ee <PCD_EP_ISR_Handler+0x24e>
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	801a      	strh	r2, [r3, #0]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	801a      	strh	r2, [r3, #0]
 80024ec:	e02f      	b.n	800254e <PCD_EP_ISR_Handler+0x2ae>
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	2b3e      	cmp	r3, #62	; 0x3e
 80024f4:	d813      	bhi.n	800251e <PCD_EP_ISR_Handler+0x27e>
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	085b      	lsrs	r3, r3, #1
 80024fc:	633b      	str	r3, [r7, #48]	; 0x30
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <PCD_EP_ISR_Handler+0x270>
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	3301      	adds	r3, #1
 800250e:	633b      	str	r3, [r7, #48]	; 0x30
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	b29b      	uxth	r3, r3
 8002514:	029b      	lsls	r3, r3, #10
 8002516:	b29a      	uxth	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	801a      	strh	r2, [r3, #0]
 800251c:	e017      	b.n	800254e <PCD_EP_ISR_Handler+0x2ae>
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	095b      	lsrs	r3, r3, #5
 8002524:	633b      	str	r3, [r7, #48]	; 0x30
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	2b00      	cmp	r3, #0
 8002530:	d102      	bne.n	8002538 <PCD_EP_ISR_Handler+0x298>
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002534:	3b01      	subs	r3, #1
 8002536:	633b      	str	r3, [r7, #48]	; 0x30
 8002538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253a:	b29b      	uxth	r3, r3
 800253c:	029b      	lsls	r3, r3, #10
 800253e:	b29b      	uxth	r3, r3
 8002540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002548:	b29a      	uxth	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800255a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255e:	827b      	strh	r3, [r7, #18]
 8002560:	8a7b      	ldrh	r3, [r7, #18]
 8002562:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002566:	827b      	strh	r3, [r7, #18]
 8002568:	8a7b      	ldrh	r3, [r7, #18]
 800256a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800256e:	827b      	strh	r3, [r7, #18]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	8a7b      	ldrh	r3, [r7, #18]
 8002576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800257a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800257e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002586:	b29b      	uxth	r3, r3
 8002588:	8013      	strh	r3, [r2, #0]
 800258a:	e17b      	b.n	8002884 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800259e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f280 80ea 	bge.w	800277c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025be:	4013      	ands	r3, r2
 80025c0:	853b      	strh	r3, [r7, #40]	; 0x28
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80025d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025d6:	b292      	uxth	r2, r2
 80025d8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80025da:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	7b1b      	ldrb	r3, [r3, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d122      	bne.n	800263e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002600:	b29b      	uxth	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4413      	add	r3, r2
 800260c:	3306      	adds	r3, #6
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	4413      	add	r3, r2
 8002616:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002620:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002622:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8087 	beq.w	8002738 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	6959      	ldr	r1, [r3, #20]
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	88da      	ldrh	r2, [r3, #6]
 8002636:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002638:	f005 fc09 	bl	8007e4e <USB_ReadPMA>
 800263c:	e07c      	b.n	8002738 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	78db      	ldrb	r3, [r3, #3]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d108      	bne.n	8002658 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002646:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002648:	461a      	mov	r2, r3
 800264a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f927 	bl	80028a0 <HAL_PCD_EP_DB_Receive>
 8002652:	4603      	mov	r3, r0
 8002654:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002656:	e06f      	b.n	8002738 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	b29b      	uxth	r3, r3
 800266a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800266e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002672:	847b      	strh	r3, [r7, #34]	; 0x22
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	441a      	add	r2, r3
 8002682:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800268c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002690:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002694:	b29b      	uxth	r3, r3
 8002696:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d021      	beq.n	80026f6 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	3302      	adds	r3, #2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026da:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d02a      	beq.n	8002738 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	6959      	ldr	r1, [r3, #20]
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	891a      	ldrh	r2, [r3, #8]
 80026ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026f0:	f005 fbad 	bl	8007e4e <USB_ReadPMA>
 80026f4:	e020      	b.n	8002738 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026fe:	b29b      	uxth	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	3306      	adds	r3, #6
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	4413      	add	r3, r2
 8002714:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800271e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002720:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002722:	2b00      	cmp	r3, #0
 8002724:	d008      	beq.n	8002738 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	6959      	ldr	r1, [r3, #20]
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	895a      	ldrh	r2, [r3, #10]
 8002732:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002734:	f005 fb8b 	bl	8007e4e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	69da      	ldr	r2, [r3, #28]
 800273c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800273e:	441a      	add	r2, r3
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800274a:	441a      	add	r2, r3
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d004      	beq.n	8002762 <PCD_EP_ISR_Handler+0x4c2>
 8002758:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	429a      	cmp	r2, r3
 8002760:	d206      	bcs.n	8002770 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	4619      	mov	r1, r3
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f007 f91f 	bl	80099ac <HAL_PCD_DataOutStageCallback>
 800276e:	e005      	b.n	800277c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002776:	4618      	mov	r0, r3
 8002778:	f003 fbae 	bl	8005ed8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800277c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800277e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002782:	2b00      	cmp	r3, #0
 8002784:	d07e      	beq.n	8002884 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002786:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	4413      	add	r3, r2
 8002798:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80027b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b4:	843b      	strh	r3, [r7, #32]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	441a      	add	r2, r3
 80027c4:	8c3b      	ldrh	r3, [r7, #32]
 80027c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	78db      	ldrb	r3, [r3, #3]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d00c      	beq.n	80027f4 <PCD_EP_ISR_Handler+0x554>
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	78db      	ldrb	r3, [r3, #3]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d146      	bne.n	8002878 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80027ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d141      	bne.n	8002878 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	461a      	mov	r2, r3
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	3302      	adds	r3, #2
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	4413      	add	r3, r2
 8002812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800281c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	8bfb      	ldrh	r3, [r7, #30]
 8002824:	429a      	cmp	r2, r3
 8002826:	d906      	bls.n	8002836 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	699a      	ldr	r2, [r3, #24]
 800282c:	8bfb      	ldrh	r3, [r7, #30]
 800282e:	1ad2      	subs	r2, r2, r3
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	619a      	str	r2, [r3, #24]
 8002834:	e002      	b.n	800283c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	2200      	movs	r2, #0
 800283a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d106      	bne.n	8002852 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	4619      	mov	r1, r3
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f007 f8c9 	bl	80099e2 <HAL_PCD_DataInStageCallback>
 8002850:	e018      	b.n	8002884 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	8bfb      	ldrh	r3, [r7, #30]
 8002858:	441a      	add	r2, r3
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	69da      	ldr	r2, [r3, #28]
 8002862:	8bfb      	ldrh	r3, [r7, #30]
 8002864:	441a      	add	r2, r3
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002870:	4618      	mov	r0, r3
 8002872:	f003 fb31 	bl	8005ed8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002876:	e005      	b.n	8002884 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002878:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800287a:	461a      	mov	r2, r3
 800287c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f91b 	bl	8002aba <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800288c:	b29b      	uxth	r3, r3
 800288e:	b21b      	sxth	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	f6ff ad0a 	blt.w	80022aa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3738      	adds	r7, #56	; 0x38
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	4613      	mov	r3, r2
 80028ac:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d07e      	beq.n	80029b6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	461a      	mov	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4413      	add	r3, r2
 80028cc:	3302      	adds	r3, #2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028e0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	8b7b      	ldrh	r3, [r7, #26]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d306      	bcc.n	80028fa <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	699a      	ldr	r2, [r3, #24]
 80028f0:	8b7b      	ldrh	r3, [r7, #26]
 80028f2:	1ad2      	subs	r2, r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	619a      	str	r2, [r3, #24]
 80028f8:	e002      	b.n	8002900 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2200      	movs	r2, #0
 80028fe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d123      	bne.n	8002950 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800291e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002922:	833b      	strh	r3, [r7, #24]
 8002924:	8b3b      	ldrh	r3, [r7, #24]
 8002926:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800292a:	833b      	strh	r3, [r7, #24]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	441a      	add	r2, r3
 800293a:	8b3b      	ldrh	r3, [r7, #24]
 800293c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800294c:	b29b      	uxth	r3, r3
 800294e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d01f      	beq.n	800299a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	b29b      	uxth	r3, r3
 800296c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002974:	82fb      	strh	r3, [r7, #22]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	441a      	add	r2, r3
 8002984:	8afb      	ldrh	r3, [r7, #22]
 8002986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800298a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800298e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002992:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002996:	b29b      	uxth	r3, r3
 8002998:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800299a:	8b7b      	ldrh	r3, [r7, #26]
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8087 	beq.w	8002ab0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	6959      	ldr	r1, [r3, #20]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	891a      	ldrh	r2, [r3, #8]
 80029ae:	8b7b      	ldrh	r3, [r7, #26]
 80029b0:	f005 fa4d 	bl	8007e4e <USB_ReadPMA>
 80029b4:	e07c      	b.n	8002ab0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029be:	b29b      	uxth	r3, r3
 80029c0:	461a      	mov	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	3306      	adds	r3, #6
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029de:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	699a      	ldr	r2, [r3, #24]
 80029e4:	8b7b      	ldrh	r3, [r7, #26]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d306      	bcc.n	80029f8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	8b7b      	ldrh	r3, [r7, #26]
 80029f0:	1ad2      	subs	r2, r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	619a      	str	r2, [r3, #24]
 80029f6:	e002      	b.n	80029fe <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2200      	movs	r2, #0
 80029fc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d123      	bne.n	8002a4e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a20:	83fb      	strh	r3, [r7, #30]
 8002a22:	8bfb      	ldrh	r3, [r7, #30]
 8002a24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a28:	83fb      	strh	r3, [r7, #30]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	441a      	add	r2, r3
 8002a38:	8bfb      	ldrh	r3, [r7, #30]
 8002a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d11f      	bne.n	8002a98 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a72:	83bb      	strh	r3, [r7, #28]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	441a      	add	r2, r3
 8002a82:	8bbb      	ldrh	r3, [r7, #28]
 8002a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a98:	8b7b      	ldrh	r3, [r7, #26]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	6959      	ldr	r1, [r3, #20]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	895a      	ldrh	r2, [r3, #10]
 8002aaa:	8b7b      	ldrh	r3, [r7, #26]
 8002aac:	f005 f9cf 	bl	8007e4e <USB_ReadPMA>
    }
  }

  return count;
 8002ab0:	8b7b      	ldrh	r3, [r7, #26]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3720      	adds	r7, #32
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b0a2      	sub	sp, #136	; 0x88
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 81c7 	beq.w	8002e62 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3302      	adds	r3, #2
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002afc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	699a      	ldr	r2, [r3, #24]
 8002b04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d907      	bls.n	8002b1c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	699a      	ldr	r2, [r3, #24]
 8002b10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b14:	1ad2      	subs	r2, r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	619a      	str	r2, [r3, #24]
 8002b1a:	e002      	b.n	8002b22 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f040 80b9 	bne.w	8002c9e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	785b      	ldrb	r3, [r3, #1]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d126      	bne.n	8002b82 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	461a      	mov	r2, r3
 8002b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b48:	4413      	add	r3, r2
 8002b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	011a      	lsls	r2, r3, #4
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	4413      	add	r3, r2
 8002b56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	801a      	strh	r2, [r3, #0]
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	801a      	strh	r2, [r3, #0]
 8002b80:	e01a      	b.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	785b      	ldrb	r3, [r3, #1]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d116      	bne.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	4413      	add	r3, r2
 8002ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	011a      	lsls	r2, r3, #4
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	4413      	add	r3, r2
 8002bac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	623b      	str	r3, [r7, #32]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	785b      	ldrb	r3, [r3, #1]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d126      	bne.n	8002c14 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	61bb      	str	r3, [r7, #24]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	4413      	add	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	011a      	lsls	r2, r3, #4
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	4413      	add	r3, r2
 8002be8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	801a      	strh	r2, [r3, #0]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	801a      	strh	r2, [r3, #0]
 8002c12:	e017      	b.n	8002c44 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	785b      	ldrb	r3, [r3, #1]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d113      	bne.n	8002c44 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	623b      	str	r3, [r7, #32]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	011a      	lsls	r2, r3, #4
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	4413      	add	r3, r2
 8002c38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	2200      	movs	r2, #0
 8002c42:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f006 fec9 	bl	80099e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 82d4 	beq.w	8003204 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	461a      	mov	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c76:	827b      	strh	r3, [r7, #18]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	441a      	add	r2, r3
 8002c86:	8a7b      	ldrh	r3, [r7, #18]
 8002c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	8013      	strh	r3, [r2, #0]
 8002c9c:	e2b2      	b.n	8003204 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c9e:	88fb      	ldrh	r3, [r7, #6]
 8002ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d021      	beq.n	8002cec <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	441a      	add	r2, r3
 8002cd4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ce0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	f040 8286 	bne.w	8003204 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d00:	441a      	add	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	69da      	ldr	r2, [r3, #28]
 8002d0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d0e:	441a      	add	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	6a1a      	ldr	r2, [r3, #32]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d309      	bcc.n	8002d34 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	6a1a      	ldr	r2, [r3, #32]
 8002d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d2c:	1ad2      	subs	r2, r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	621a      	str	r2, [r3, #32]
 8002d32:	e015      	b.n	8002d60 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d107      	bne.n	8002d4c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002d3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d40:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d4a:	e009      	b.n	8002d60 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	785b      	ldrb	r3, [r3, #1]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d155      	bne.n	8002e14 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7c:	4413      	add	r3, r2
 8002d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	011a      	lsls	r2, r3, #4
 8002d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d88:	4413      	add	r3, r2
 8002d8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d112      	bne.n	8002dbc <HAL_PCD_EP_DB_Transmit+0x302>
 8002d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da4:	801a      	strh	r2, [r3, #0]
 8002da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db8:	801a      	strh	r2, [r3, #0]
 8002dba:	e047      	b.n	8002e4c <HAL_PCD_EP_DB_Transmit+0x392>
 8002dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dbe:	2b3e      	cmp	r3, #62	; 0x3e
 8002dc0:	d811      	bhi.n	8002de6 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	029b      	lsls	r3, r3, #10
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de2:	801a      	strh	r2, [r3, #0]
 8002de4:	e032      	b.n	8002e4c <HAL_PCD_EP_DB_Transmit+0x392>
 8002de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dee:	f003 031f 	and.w	r3, r3, #31
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d102      	bne.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x342>
 8002df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	029b      	lsls	r3, r3, #10
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e10:	801a      	strh	r2, [r3, #0]
 8002e12:	e01b      	b.n	8002e4c <HAL_PCD_EP_DB_Transmit+0x392>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	785b      	ldrb	r3, [r3, #1]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d117      	bne.n	8002e4c <HAL_PCD_EP_DB_Transmit+0x392>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	643b      	str	r3, [r7, #64]	; 0x40
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e30:	4413      	add	r3, r2
 8002e32:	643b      	str	r3, [r7, #64]	; 0x40
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	011a      	lsls	r2, r3, #4
 8002e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e4a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	6959      	ldr	r1, [r3, #20]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	891a      	ldrh	r2, [r3, #8]
 8002e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	f004 ffb2 	bl	8007dc4 <USB_WritePMA>
 8002e60:	e1d0      	b.n	8003204 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4413      	add	r3, r2
 8002e76:	3306      	adds	r3, #6
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d307      	bcc.n	8002eaa <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	699a      	ldr	r2, [r3, #24]
 8002e9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ea2:	1ad2      	subs	r2, r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	619a      	str	r2, [r3, #24]
 8002ea8:	e002      	b.n	8002eb0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2200      	movs	r2, #0
 8002eae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f040 80c4 	bne.w	8003042 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	785b      	ldrb	r3, [r3, #1]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d126      	bne.n	8002f10 <HAL_PCD_EP_DB_Transmit+0x456>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed6:	4413      	add	r3, r2
 8002ed8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	011a      	lsls	r2, r3, #4
 8002ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ee8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002eea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ef8:	801a      	strh	r2, [r3, #0]
 8002efa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f0c:	801a      	strh	r2, [r3, #0]
 8002f0e:	e01a      	b.n	8002f46 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	785b      	ldrb	r3, [r3, #1]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d116      	bne.n	8002f46 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	677b      	str	r3, [r7, #116]	; 0x74
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f2c:	4413      	add	r3, r2
 8002f2e:	677b      	str	r3, [r7, #116]	; 0x74
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	011a      	lsls	r2, r3, #4
 8002f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f38:	4413      	add	r3, r2
 8002f3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f3e:	673b      	str	r3, [r7, #112]	; 0x70
 8002f40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f42:	2200      	movs	r2, #0
 8002f44:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	785b      	ldrb	r3, [r3, #1]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d12f      	bne.n	8002fb4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	011a      	lsls	r2, r3, #4
 8002f78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f98:	801a      	strh	r2, [r3, #0]
 8002f9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fb0:	801a      	strh	r2, [r3, #0]
 8002fb2:	e017      	b.n	8002fe4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	785b      	ldrb	r3, [r3, #1]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d113      	bne.n	8002fe4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fca:	4413      	add	r3, r2
 8002fcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	011a      	lsls	r2, r3, #4
 8002fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fdc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	4619      	mov	r1, r3
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f006 fcf9 	bl	80099e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ff0:	88fb      	ldrh	r3, [r7, #6]
 8002ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 8104 	bne.w	8003204 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	b29b      	uxth	r3, r3
 800300e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003016:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	441a      	add	r2, r3
 8003028:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800302c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003034:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800303c:	b29b      	uxth	r3, r3
 800303e:	8013      	strh	r3, [r2, #0]
 8003040:	e0e0      	b.n	8003204 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d121      	bne.n	8003090 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	b29b      	uxth	r3, r3
 800305e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003066:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	441a      	add	r2, r3
 8003078:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800307c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003084:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800308c:	b29b      	uxth	r3, r3
 800308e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003096:	2b01      	cmp	r3, #1
 8003098:	f040 80b4 	bne.w	8003204 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030a4:	441a      	add	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030b2:	441a      	add	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	6a1a      	ldr	r2, [r3, #32]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d309      	bcc.n	80030d8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	6a1a      	ldr	r2, [r3, #32]
 80030ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030d0:	1ad2      	subs	r2, r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	621a      	str	r2, [r3, #32]
 80030d6:	e015      	b.n	8003104 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d107      	bne.n	80030f0 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80030e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030ee:	e009      	b.n	8003104 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2200      	movs	r2, #0
 80030fa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	667b      	str	r3, [r7, #100]	; 0x64
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	785b      	ldrb	r3, [r3, #1]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d155      	bne.n	80031be <HAL_PCD_EP_DB_Transmit+0x704>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003120:	b29b      	uxth	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003126:	4413      	add	r3, r2
 8003128:	65fb      	str	r3, [r7, #92]	; 0x5c
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	011a      	lsls	r2, r3, #4
 8003130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003132:	4413      	add	r3, r2
 8003134:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003138:	65bb      	str	r3, [r7, #88]	; 0x58
 800313a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800313c:	2b00      	cmp	r3, #0
 800313e:	d112      	bne.n	8003166 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	b29b      	uxth	r3, r3
 8003146:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800314a:	b29a      	uxth	r2, r3
 800314c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800314e:	801a      	strh	r2, [r3, #0]
 8003150:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	b29b      	uxth	r3, r3
 8003156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800315a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800315e:	b29a      	uxth	r2, r3
 8003160:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003162:	801a      	strh	r2, [r3, #0]
 8003164:	e044      	b.n	80031f0 <HAL_PCD_EP_DB_Transmit+0x736>
 8003166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003168:	2b3e      	cmp	r3, #62	; 0x3e
 800316a:	d811      	bhi.n	8003190 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800316c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800316e:	085b      	lsrs	r3, r3, #1
 8003170:	657b      	str	r3, [r7, #84]	; 0x54
 8003172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800317c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800317e:	3301      	adds	r3, #1
 8003180:	657b      	str	r3, [r7, #84]	; 0x54
 8003182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003184:	b29b      	uxth	r3, r3
 8003186:	029b      	lsls	r3, r3, #10
 8003188:	b29a      	uxth	r2, r3
 800318a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800318c:	801a      	strh	r2, [r3, #0]
 800318e:	e02f      	b.n	80031f0 <HAL_PCD_EP_DB_Transmit+0x736>
 8003190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	657b      	str	r3, [r7, #84]	; 0x54
 8003196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80031a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a2:	3b01      	subs	r3, #1
 80031a4:	657b      	str	r3, [r7, #84]	; 0x54
 80031a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	029b      	lsls	r3, r3, #10
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ba:	801a      	strh	r2, [r3, #0]
 80031bc:	e018      	b.n	80031f0 <HAL_PCD_EP_DB_Transmit+0x736>
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	785b      	ldrb	r3, [r3, #1]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d114      	bne.n	80031f0 <HAL_PCD_EP_DB_Transmit+0x736>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	461a      	mov	r2, r3
 80031d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031d4:	4413      	add	r3, r2
 80031d6:	667b      	str	r3, [r7, #100]	; 0x64
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	011a      	lsls	r2, r3, #4
 80031de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031e0:	4413      	add	r3, r2
 80031e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031e6:	663b      	str	r3, [r7, #96]	; 0x60
 80031e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031ee:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	6959      	ldr	r1, [r3, #20]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	895a      	ldrh	r2, [r3, #10]
 80031fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f004 fde0 	bl	8007dc4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	b29b      	uxth	r3, r3
 8003216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800321a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800321e:	823b      	strh	r3, [r7, #16]
 8003220:	8a3b      	ldrh	r3, [r7, #16]
 8003222:	f083 0310 	eor.w	r3, r3, #16
 8003226:	823b      	strh	r3, [r7, #16]
 8003228:	8a3b      	ldrh	r3, [r7, #16]
 800322a:	f083 0320 	eor.w	r3, r3, #32
 800322e:	823b      	strh	r3, [r7, #16]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	441a      	add	r2, r3
 800323e:	8a3b      	ldrh	r3, [r7, #16]
 8003240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800324c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003250:	b29b      	uxth	r3, r3
 8003252:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3788      	adds	r7, #136	; 0x88
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800325e:	b480      	push	{r7}
 8003260:	b087      	sub	sp, #28
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	607b      	str	r3, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	817b      	strh	r3, [r7, #10]
 800326c:	4613      	mov	r3, r2
 800326e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003270:	897b      	ldrh	r3, [r7, #10]
 8003272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003276:	b29b      	uxth	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00b      	beq.n	8003294 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800327c:	897b      	ldrh	r3, [r7, #10]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4413      	add	r3, r2
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	e009      	b.n	80032a8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003294:	897a      	ldrh	r2, [r7, #10]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4413      	add	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80032a8:	893b      	ldrh	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d107      	bne.n	80032be <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2200      	movs	r2, #0
 80032b2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	80da      	strh	r2, [r3, #6]
 80032bc:	e00b      	b.n	80032d6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2201      	movs	r2, #1
 80032c2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	0c1b      	lsrs	r3, r3, #16
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	371c      	adds	r7, #28
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e272      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 8087 	beq.w	8003412 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003304:	4b92      	ldr	r3, [pc, #584]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b04      	cmp	r3, #4
 800330e:	d00c      	beq.n	800332a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003310:	4b8f      	ldr	r3, [pc, #572]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 030c 	and.w	r3, r3, #12
 8003318:	2b08      	cmp	r3, #8
 800331a:	d112      	bne.n	8003342 <HAL_RCC_OscConfig+0x5e>
 800331c:	4b8c      	ldr	r3, [pc, #560]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003328:	d10b      	bne.n	8003342 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332a:	4b89      	ldr	r3, [pc, #548]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d06c      	beq.n	8003410 <HAL_RCC_OscConfig+0x12c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d168      	bne.n	8003410 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e24c      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334a:	d106      	bne.n	800335a <HAL_RCC_OscConfig+0x76>
 800334c:	4b80      	ldr	r3, [pc, #512]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a7f      	ldr	r2, [pc, #508]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	e02e      	b.n	80033b8 <HAL_RCC_OscConfig+0xd4>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0x98>
 8003362:	4b7b      	ldr	r3, [pc, #492]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a7a      	ldr	r2, [pc, #488]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b78      	ldr	r3, [pc, #480]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a77      	ldr	r2, [pc, #476]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e01d      	b.n	80033b8 <HAL_RCC_OscConfig+0xd4>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0xbc>
 8003386:	4b72      	ldr	r3, [pc, #456]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a71      	ldr	r2, [pc, #452]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800338c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b6f      	ldr	r3, [pc, #444]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a6e      	ldr	r2, [pc, #440]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0xd4>
 80033a0:	4b6b      	ldr	r3, [pc, #428]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a6a      	ldr	r2, [pc, #424]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b68      	ldr	r3, [pc, #416]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a67      	ldr	r2, [pc, #412]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d013      	beq.n	80033e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fd ff5c 	bl	800127c <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c8:	f7fd ff58 	bl	800127c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e200      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b5d      	ldr	r3, [pc, #372]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0xe4>
 80033e6:	e014      	b.n	8003412 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fd ff48 	bl	800127c <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f0:	f7fd ff44 	bl	800127c <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e1ec      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003402:	4b53      	ldr	r3, [pc, #332]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x10c>
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d063      	beq.n	80034e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800341e:	4b4c      	ldr	r3, [pc, #304]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800342a:	4b49      	ldr	r3, [pc, #292]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	2b08      	cmp	r3, #8
 8003434:	d11c      	bne.n	8003470 <HAL_RCC_OscConfig+0x18c>
 8003436:	4b46      	ldr	r3, [pc, #280]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d116      	bne.n	8003470 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003442:	4b43      	ldr	r3, [pc, #268]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_RCC_OscConfig+0x176>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e1c0      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345a:	4b3d      	ldr	r3, [pc, #244]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4939      	ldr	r1, [pc, #228]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346e:	e03a      	b.n	80034e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d020      	beq.n	80034ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003478:	4b36      	ldr	r3, [pc, #216]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347e:	f7fd fefd 	bl	800127c <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003486:	f7fd fef9 	bl	800127c <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e1a1      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003498:	4b2d      	ldr	r3, [pc, #180]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b2a      	ldr	r3, [pc, #168]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4927      	ldr	r1, [pc, #156]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	600b      	str	r3, [r1, #0]
 80034b8:	e015      	b.n	80034e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ba:	4b26      	ldr	r3, [pc, #152]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7fd fedc 	bl	800127c <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c8:	f7fd fed8 	bl	800127c <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e180      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d03a      	beq.n	8003568 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d019      	beq.n	800352e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fa:	4b17      	ldr	r3, [pc, #92]	; (8003558 <HAL_RCC_OscConfig+0x274>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003500:	f7fd febc 	bl	800127c <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003508:	f7fd feb8 	bl	800127c <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e160      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <HAL_RCC_OscConfig+0x26c>)
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003526:	2001      	movs	r0, #1
 8003528:	f000 fad8 	bl	8003adc <RCC_Delay>
 800352c:	e01c      	b.n	8003568 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <HAL_RCC_OscConfig+0x274>)
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003534:	f7fd fea2 	bl	800127c <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800353a:	e00f      	b.n	800355c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800353c:	f7fd fe9e 	bl	800127c <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d908      	bls.n	800355c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e146      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000
 8003554:	42420000 	.word	0x42420000
 8003558:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800355c:	4b92      	ldr	r3, [pc, #584]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e9      	bne.n	800353c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80a6 	beq.w	80036c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003576:	2300      	movs	r3, #0
 8003578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800357a:	4b8b      	ldr	r3, [pc, #556]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10d      	bne.n	80035a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003586:	4b88      	ldr	r3, [pc, #544]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	4a87      	ldr	r2, [pc, #540]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003590:	61d3      	str	r3, [r2, #28]
 8003592:	4b85      	ldr	r3, [pc, #532]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359e:	2301      	movs	r3, #1
 80035a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a2:	4b82      	ldr	r3, [pc, #520]	; (80037ac <HAL_RCC_OscConfig+0x4c8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d118      	bne.n	80035e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ae:	4b7f      	ldr	r3, [pc, #508]	; (80037ac <HAL_RCC_OscConfig+0x4c8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a7e      	ldr	r2, [pc, #504]	; (80037ac <HAL_RCC_OscConfig+0x4c8>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ba:	f7fd fe5f 	bl	800127c <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c2:	f7fd fe5b 	bl	800127c <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b64      	cmp	r3, #100	; 0x64
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e103      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	4b75      	ldr	r3, [pc, #468]	; (80037ac <HAL_RCC_OscConfig+0x4c8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x312>
 80035e8:	4b6f      	ldr	r3, [pc, #444]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	4a6e      	ldr	r2, [pc, #440]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	6213      	str	r3, [r2, #32]
 80035f4:	e02d      	b.n	8003652 <HAL_RCC_OscConfig+0x36e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x334>
 80035fe:	4b6a      	ldr	r3, [pc, #424]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	4a69      	ldr	r2, [pc, #420]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	6213      	str	r3, [r2, #32]
 800360a:	4b67      	ldr	r3, [pc, #412]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	4a66      	ldr	r2, [pc, #408]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003610:	f023 0304 	bic.w	r3, r3, #4
 8003614:	6213      	str	r3, [r2, #32]
 8003616:	e01c      	b.n	8003652 <HAL_RCC_OscConfig+0x36e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b05      	cmp	r3, #5
 800361e:	d10c      	bne.n	800363a <HAL_RCC_OscConfig+0x356>
 8003620:	4b61      	ldr	r3, [pc, #388]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4a60      	ldr	r2, [pc, #384]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003626:	f043 0304 	orr.w	r3, r3, #4
 800362a:	6213      	str	r3, [r2, #32]
 800362c:	4b5e      	ldr	r3, [pc, #376]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	4a5d      	ldr	r2, [pc, #372]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6213      	str	r3, [r2, #32]
 8003638:	e00b      	b.n	8003652 <HAL_RCC_OscConfig+0x36e>
 800363a:	4b5b      	ldr	r3, [pc, #364]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	4a5a      	ldr	r2, [pc, #360]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	6213      	str	r3, [r2, #32]
 8003646:	4b58      	ldr	r3, [pc, #352]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	4a57      	ldr	r2, [pc, #348]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	f023 0304 	bic.w	r3, r3, #4
 8003650:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d015      	beq.n	8003686 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365a:	f7fd fe0f 	bl	800127c <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003660:	e00a      	b.n	8003678 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003662:	f7fd fe0b 	bl	800127c <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003670:	4293      	cmp	r3, r2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e0b1      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003678:	4b4b      	ldr	r3, [pc, #300]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0ee      	beq.n	8003662 <HAL_RCC_OscConfig+0x37e>
 8003684:	e014      	b.n	80036b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003686:	f7fd fdf9 	bl	800127c <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800368c:	e00a      	b.n	80036a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368e:	f7fd fdf5 	bl	800127c <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f241 3288 	movw	r2, #5000	; 0x1388
 800369c:	4293      	cmp	r3, r2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e09b      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a4:	4b40      	ldr	r3, [pc, #256]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1ee      	bne.n	800368e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036b0:	7dfb      	ldrb	r3, [r7, #23]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d105      	bne.n	80036c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b6:	4b3c      	ldr	r3, [pc, #240]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	4a3b      	ldr	r2, [pc, #236]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8087 	beq.w	80037da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036cc:	4b36      	ldr	r3, [pc, #216]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 030c 	and.w	r3, r3, #12
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d061      	beq.n	800379c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d146      	bne.n	800376e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e0:	4b33      	ldr	r3, [pc, #204]	; (80037b0 <HAL_RCC_OscConfig+0x4cc>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e6:	f7fd fdc9 	bl	800127c <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ee:	f7fd fdc5 	bl	800127c <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e06d      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003700:	4b29      	ldr	r3, [pc, #164]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f0      	bne.n	80036ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003714:	d108      	bne.n	8003728 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003716:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	4921      	ldr	r1, [pc, #132]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003724:	4313      	orrs	r3, r2
 8003726:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003728:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a19      	ldr	r1, [r3, #32]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	430b      	orrs	r3, r1
 800373a:	491b      	ldr	r1, [pc, #108]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003740:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <HAL_RCC_OscConfig+0x4cc>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003746:	f7fd fd99 	bl	800127c <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374e:	f7fd fd95 	bl	800127c <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e03d      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003760:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x46a>
 800376c:	e035      	b.n	80037da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376e:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <HAL_RCC_OscConfig+0x4cc>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003774:	f7fd fd82 	bl	800127c <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377c:	f7fd fd7e 	bl	800127c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e026      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x498>
 800379a:	e01e      	b.n	80037da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d107      	bne.n	80037b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e019      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40007000 	.word	0x40007000
 80037b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_RCC_OscConfig+0x500>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d001      	beq.n	80037da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40021000 	.word	0x40021000

080037e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0d0      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037fc:	4b6a      	ldr	r3, [pc, #424]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d910      	bls.n	800382c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	4b67      	ldr	r3, [pc, #412]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 0207 	bic.w	r2, r3, #7
 8003812:	4965      	ldr	r1, [pc, #404]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	4313      	orrs	r3, r2
 8003818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b63      	ldr	r3, [pc, #396]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0b8      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d020      	beq.n	800387a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003844:	4b59      	ldr	r3, [pc, #356]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	4a58      	ldr	r2, [pc, #352]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800384e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800385c:	4b53      	ldr	r3, [pc, #332]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4a52      	ldr	r2, [pc, #328]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003866:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003868:	4b50      	ldr	r3, [pc, #320]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	494d      	ldr	r1, [pc, #308]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	4313      	orrs	r3, r2
 8003878:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d040      	beq.n	8003908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388e:	4b47      	ldr	r3, [pc, #284]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d115      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e07f      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a6:	4b41      	ldr	r3, [pc, #260]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e073      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b6:	4b3d      	ldr	r3, [pc, #244]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e06b      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038c6:	4b39      	ldr	r3, [pc, #228]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f023 0203 	bic.w	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4936      	ldr	r1, [pc, #216]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038d8:	f7fd fcd0 	bl	800127c <HAL_GetTick>
 80038dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e0:	f7fd fccc 	bl	800127c <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e053      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	4b2d      	ldr	r3, [pc, #180]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 020c 	and.w	r2, r3, #12
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	429a      	cmp	r2, r3
 8003906:	d1eb      	bne.n	80038e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003908:	4b27      	ldr	r3, [pc, #156]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d210      	bcs.n	8003938 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 0207 	bic.w	r2, r3, #7
 800391e:	4922      	ldr	r1, [pc, #136]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e032      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	4916      	ldr	r1, [pc, #88]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003952:	4313      	orrs	r3, r2
 8003954:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d009      	beq.n	8003976 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003962:	4b12      	ldr	r3, [pc, #72]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	490e      	ldr	r1, [pc, #56]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003972:	4313      	orrs	r3, r2
 8003974:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003976:	f000 f821 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 800397a:	4602      	mov	r2, r0
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	490a      	ldr	r1, [pc, #40]	; (80039b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003988:	5ccb      	ldrb	r3, [r1, r3]
 800398a:	fa22 f303 	lsr.w	r3, r2, r3
 800398e:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd fc2e 	bl	80011f8 <HAL_InitTick>

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40022000 	.word	0x40022000
 80039ac:	40021000 	.word	0x40021000
 80039b0:	0800d580 	.word	0x0800d580
 80039b4:	20000008 	.word	0x20000008
 80039b8:	2000000c 	.word	0x2000000c

080039bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039bc:	b490      	push	{r4, r7}
 80039be:	b08a      	sub	sp, #40	; 0x28
 80039c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039c2:	4b29      	ldr	r3, [pc, #164]	; (8003a68 <HAL_RCC_GetSysClockFreq+0xac>)
 80039c4:	1d3c      	adds	r4, r7, #4
 80039c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039cc:	f240 2301 	movw	r3, #513	; 0x201
 80039d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	2300      	movs	r3, #0
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039e6:	4b21      	ldr	r3, [pc, #132]	; (8003a6c <HAL_RCC_GetSysClockFreq+0xb0>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d002      	beq.n	80039fc <HAL_RCC_GetSysClockFreq+0x40>
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d003      	beq.n	8003a02 <HAL_RCC_GetSysClockFreq+0x46>
 80039fa:	e02b      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039fc:	4b1c      	ldr	r3, [pc, #112]	; (8003a70 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039fe:	623b      	str	r3, [r7, #32]
      break;
 8003a00:	e02b      	b.n	8003a5a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	0c9b      	lsrs	r3, r3, #18
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	3328      	adds	r3, #40	; 0x28
 8003a0c:	443b      	add	r3, r7
 8003a0e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a12:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d012      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a1e:	4b13      	ldr	r3, [pc, #76]	; (8003a6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	0c5b      	lsrs	r3, r3, #17
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	3328      	adds	r3, #40	; 0x28
 8003a2a:	443b      	add	r3, r7
 8003a2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	4a0e      	ldr	r2, [pc, #56]	; (8003a70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a36:	fb03 f202 	mul.w	r2, r3, r2
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
 8003a42:	e004      	b.n	8003a4e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	4a0b      	ldr	r2, [pc, #44]	; (8003a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a48:	fb02 f303 	mul.w	r3, r2, r3
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	623b      	str	r3, [r7, #32]
      break;
 8003a52:	e002      	b.n	8003a5a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a54:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a56:	623b      	str	r3, [r7, #32]
      break;
 8003a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3728      	adds	r7, #40	; 0x28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc90      	pop	{r4, r7}
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	0800d528 	.word	0x0800d528
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	007a1200 	.word	0x007a1200
 8003a74:	003d0900 	.word	0x003d0900

08003a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a7c:	4b02      	ldr	r3, [pc, #8]	; (8003a88 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	20000008 	.word	0x20000008

08003a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a90:	f7ff fff2 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8003a94:	4602      	mov	r2, r0
 8003a96:	4b05      	ldr	r3, [pc, #20]	; (8003aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	0a1b      	lsrs	r3, r3, #8
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	4903      	ldr	r1, [pc, #12]	; (8003ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aa2:	5ccb      	ldrb	r3, [r1, r3]
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	0800d590 	.word	0x0800d590

08003ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ab8:	f7ff ffde 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8003abc:	4602      	mov	r2, r0
 8003abe:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	0adb      	lsrs	r3, r3, #11
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	4903      	ldr	r1, [pc, #12]	; (8003ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aca:	5ccb      	ldrb	r3, [r1, r3]
 8003acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	0800d590 	.word	0x0800d590

08003adc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <RCC_Delay+0x34>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a0a      	ldr	r2, [pc, #40]	; (8003b14 <RCC_Delay+0x38>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	0a5b      	lsrs	r3, r3, #9
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	fb02 f303 	mul.w	r3, r2, r3
 8003af6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003af8:	bf00      	nop
  }
  while (Delay --);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1e5a      	subs	r2, r3, #1
 8003afe:	60fa      	str	r2, [r7, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f9      	bne.n	8003af8 <RCC_Delay+0x1c>
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr
 8003b10:	20000008 	.word	0x20000008
 8003b14:	10624dd3 	.word	0x10624dd3

08003b18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d07d      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b34:	2300      	movs	r3, #0
 8003b36:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b38:	4b4f      	ldr	r3, [pc, #316]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10d      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b44:	4b4c      	ldr	r3, [pc, #304]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	4a4b      	ldr	r2, [pc, #300]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	61d3      	str	r3, [r2, #28]
 8003b50:	4b49      	ldr	r3, [pc, #292]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b60:	4b46      	ldr	r3, [pc, #280]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d118      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b6c:	4b43      	ldr	r3, [pc, #268]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a42      	ldr	r2, [pc, #264]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b78:	f7fd fb80 	bl	800127c <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7e:	e008      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b80:	f7fd fb7c 	bl	800127c <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e06d      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b92:	4b3a      	ldr	r3, [pc, #232]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b9e:	4b36      	ldr	r3, [pc, #216]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d02e      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d027      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bbc:	4b2e      	ldr	r3, [pc, #184]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bc6:	4b2e      	ldr	r3, [pc, #184]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bcc:	4b2c      	ldr	r3, [pc, #176]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bd2:	4a29      	ldr	r2, [pc, #164]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d014      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be2:	f7fd fb4b 	bl	800127c <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be8:	e00a      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bea:	f7fd fb47 	bl	800127c <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e036      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c00:	4b1d      	ldr	r3, [pc, #116]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0ee      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c0c:	4b1a      	ldr	r3, [pc, #104]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4917      	ldr	r1, [pc, #92]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c1e:	7dfb      	ldrb	r3, [r7, #23]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d105      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c24:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c3c:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	490b      	ldr	r1, [pc, #44]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0310 	and.w	r3, r3, #16
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d008      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c5a:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	4904      	ldr	r1, [pc, #16]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	40007000 	.word	0x40007000
 8003c80:	42420440 	.word	0x42420440

08003c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e041      	b.n	8003d1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d106      	bne.n	8003cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7fd f92a 	bl	8000f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f000 fbd6 	bl	8004474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e041      	b.n	8003db8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d106      	bne.n	8003d4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7fd f8ff 	bl	8000f4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2202      	movs	r2, #2
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	4619      	mov	r1, r3
 8003d60:	4610      	mov	r0, r2
 8003d62:	f000 fb87 	bl	8004474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d109      	bne.n	8003de4 <HAL_TIM_PWM_Start+0x24>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	bf14      	ite	ne
 8003ddc:	2301      	movne	r3, #1
 8003dde:	2300      	moveq	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	e022      	b.n	8003e2a <HAL_TIM_PWM_Start+0x6a>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d109      	bne.n	8003dfe <HAL_TIM_PWM_Start+0x3e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	bf14      	ite	ne
 8003df6:	2301      	movne	r3, #1
 8003df8:	2300      	moveq	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	e015      	b.n	8003e2a <HAL_TIM_PWM_Start+0x6a>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d109      	bne.n	8003e18 <HAL_TIM_PWM_Start+0x58>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	bf14      	ite	ne
 8003e10:	2301      	movne	r3, #1
 8003e12:	2300      	moveq	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	e008      	b.n	8003e2a <HAL_TIM_PWM_Start+0x6a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	bf14      	ite	ne
 8003e24:	2301      	movne	r3, #1
 8003e26:	2300      	moveq	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e05e      	b.n	8003ef0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d104      	bne.n	8003e42 <HAL_TIM_PWM_Start+0x82>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e40:	e013      	b.n	8003e6a <HAL_TIM_PWM_Start+0xaa>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d104      	bne.n	8003e52 <HAL_TIM_PWM_Start+0x92>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e50:	e00b      	b.n	8003e6a <HAL_TIM_PWM_Start+0xaa>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d104      	bne.n	8003e62 <HAL_TIM_PWM_Start+0xa2>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e60:	e003      	b.n	8003e6a <HAL_TIM_PWM_Start+0xaa>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2202      	movs	r2, #2
 8003e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	6839      	ldr	r1, [r7, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fd7e 	bl	8004974 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a1e      	ldr	r2, [pc, #120]	; (8003ef8 <HAL_TIM_PWM_Start+0x138>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d107      	bne.n	8003e92 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <HAL_TIM_PWM_Start+0x138>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00e      	beq.n	8003eba <HAL_TIM_PWM_Start+0xfa>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea4:	d009      	beq.n	8003eba <HAL_TIM_PWM_Start+0xfa>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a14      	ldr	r2, [pc, #80]	; (8003efc <HAL_TIM_PWM_Start+0x13c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d004      	beq.n	8003eba <HAL_TIM_PWM_Start+0xfa>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a12      	ldr	r2, [pc, #72]	; (8003f00 <HAL_TIM_PWM_Start+0x140>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d111      	bne.n	8003ede <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b06      	cmp	r3, #6
 8003eca:	d010      	beq.n	8003eee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003edc:	e007      	b.n	8003eee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40012c00 	.word	0x40012c00
 8003efc:	40000400 	.word	0x40000400
 8003f00:	40000800 	.word	0x40000800

08003f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d122      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d11b      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0202 	mvn.w	r2, #2
 8003f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fa78 	bl	800443c <HAL_TIM_IC_CaptureCallback>
 8003f4c:	e005      	b.n	8003f5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fa6b 	bl	800442a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fa7a 	bl	800444e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d122      	bne.n	8003fb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d11b      	bne.n	8003fb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0204 	mvn.w	r2, #4
 8003f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fa4e 	bl	800443c <HAL_TIM_IC_CaptureCallback>
 8003fa0:	e005      	b.n	8003fae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fa41 	bl	800442a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 fa50 	bl	800444e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d122      	bne.n	8004008 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d11b      	bne.n	8004008 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f06f 0208 	mvn.w	r2, #8
 8003fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2204      	movs	r2, #4
 8003fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fa24 	bl	800443c <HAL_TIM_IC_CaptureCallback>
 8003ff4:	e005      	b.n	8004002 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fa17 	bl	800442a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fa26 	bl	800444e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b10      	cmp	r3, #16
 8004014:	d122      	bne.n	800405c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b10      	cmp	r3, #16
 8004022:	d11b      	bne.n	800405c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0210 	mvn.w	r2, #16
 800402c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2208      	movs	r2, #8
 8004032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f9fa 	bl	800443c <HAL_TIM_IC_CaptureCallback>
 8004048:	e005      	b.n	8004056 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f9ed 	bl	800442a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f9fc 	bl	800444e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b01      	cmp	r3, #1
 8004068:	d10e      	bne.n	8004088 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b01      	cmp	r3, #1
 8004076:	d107      	bne.n	8004088 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0201 	mvn.w	r2, #1
 8004080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f9c8 	bl	8004418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004092:	2b80      	cmp	r3, #128	; 0x80
 8004094:	d10e      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a0:	2b80      	cmp	r3, #128	; 0x80
 80040a2:	d107      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fceb 	bl	8004a8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040be:	2b40      	cmp	r3, #64	; 0x40
 80040c0:	d10e      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040cc:	2b40      	cmp	r3, #64	; 0x40
 80040ce:	d107      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f9c0 	bl	8004460 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 0320 	and.w	r3, r3, #32
 80040ea:	2b20      	cmp	r3, #32
 80040ec:	d10e      	bne.n	800410c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	d107      	bne.n	800410c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0220 	mvn.w	r2, #32
 8004104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fcb6 	bl	8004a78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800410c:	bf00      	nop
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800412a:	2302      	movs	r3, #2
 800412c:	e0ac      	b.n	8004288 <HAL_TIM_PWM_ConfigChannel+0x174>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b0c      	cmp	r3, #12
 800413a:	f200 809f 	bhi.w	800427c <HAL_TIM_PWM_ConfigChannel+0x168>
 800413e:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	08004179 	.word	0x08004179
 8004148:	0800427d 	.word	0x0800427d
 800414c:	0800427d 	.word	0x0800427d
 8004150:	0800427d 	.word	0x0800427d
 8004154:	080041b9 	.word	0x080041b9
 8004158:	0800427d 	.word	0x0800427d
 800415c:	0800427d 	.word	0x0800427d
 8004160:	0800427d 	.word	0x0800427d
 8004164:	080041fb 	.word	0x080041fb
 8004168:	0800427d 	.word	0x0800427d
 800416c:	0800427d 	.word	0x0800427d
 8004170:	0800427d 	.word	0x0800427d
 8004174:	0800423b 	.word	0x0800423b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f9da 	bl	8004538 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699a      	ldr	r2, [r3, #24]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0208 	orr.w	r2, r2, #8
 8004192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0204 	bic.w	r2, r2, #4
 80041a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6999      	ldr	r1, [r3, #24]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	619a      	str	r2, [r3, #24]
      break;
 80041b6:	e062      	b.n	800427e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fa20 	bl	8004604 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6999      	ldr	r1, [r3, #24]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	021a      	lsls	r2, r3, #8
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	619a      	str	r2, [r3, #24]
      break;
 80041f8:	e041      	b.n	800427e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fa69 	bl	80046d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0208 	orr.w	r2, r2, #8
 8004214:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0204 	bic.w	r2, r2, #4
 8004224:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69d9      	ldr	r1, [r3, #28]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	61da      	str	r2, [r3, #28]
      break;
 8004238:	e021      	b.n	800427e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68b9      	ldr	r1, [r7, #8]
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fab3 	bl	80047ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69d9      	ldr	r1, [r3, #28]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	021a      	lsls	r2, r3, #8
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	61da      	str	r2, [r3, #28]
      break;
 800427a:	e000      	b.n	800427e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800427c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_TIM_ConfigClockSource+0x18>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e0b3      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x180>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e0:	d03e      	beq.n	8004360 <HAL_TIM_ConfigClockSource+0xd0>
 80042e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e6:	f200 8087 	bhi.w	80043f8 <HAL_TIM_ConfigClockSource+0x168>
 80042ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ee:	f000 8085 	beq.w	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 80042f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f6:	d87f      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x168>
 80042f8:	2b70      	cmp	r3, #112	; 0x70
 80042fa:	d01a      	beq.n	8004332 <HAL_TIM_ConfigClockSource+0xa2>
 80042fc:	2b70      	cmp	r3, #112	; 0x70
 80042fe:	d87b      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x168>
 8004300:	2b60      	cmp	r3, #96	; 0x60
 8004302:	d050      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0x116>
 8004304:	2b60      	cmp	r3, #96	; 0x60
 8004306:	d877      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x168>
 8004308:	2b50      	cmp	r3, #80	; 0x50
 800430a:	d03c      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0xf6>
 800430c:	2b50      	cmp	r3, #80	; 0x50
 800430e:	d873      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x168>
 8004310:	2b40      	cmp	r3, #64	; 0x40
 8004312:	d058      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x136>
 8004314:	2b40      	cmp	r3, #64	; 0x40
 8004316:	d86f      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x168>
 8004318:	2b30      	cmp	r3, #48	; 0x30
 800431a:	d064      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x156>
 800431c:	2b30      	cmp	r3, #48	; 0x30
 800431e:	d86b      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x168>
 8004320:	2b20      	cmp	r3, #32
 8004322:	d060      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x156>
 8004324:	2b20      	cmp	r3, #32
 8004326:	d867      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x168>
 8004328:	2b00      	cmp	r3, #0
 800432a:	d05c      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x156>
 800432c:	2b10      	cmp	r3, #16
 800432e:	d05a      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004330:	e062      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6899      	ldr	r1, [r3, #8]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f000 faf8 	bl	8004936 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004354:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	609a      	str	r2, [r3, #8]
      break;
 800435e:	e04e      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6818      	ldr	r0, [r3, #0]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	6899      	ldr	r1, [r3, #8]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f000 fae1 	bl	8004936 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004382:	609a      	str	r2, [r3, #8]
      break;
 8004384:	e03b      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6859      	ldr	r1, [r3, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	461a      	mov	r2, r3
 8004394:	f000 fa58 	bl	8004848 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2150      	movs	r1, #80	; 0x50
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 faaf 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 80043a4:	e02b      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6859      	ldr	r1, [r3, #4]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	461a      	mov	r2, r3
 80043b4:	f000 fa76 	bl	80048a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2160      	movs	r1, #96	; 0x60
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fa9f 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 80043c4:	e01b      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6859      	ldr	r1, [r3, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	461a      	mov	r2, r3
 80043d4:	f000 fa38 	bl	8004848 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2140      	movs	r1, #64	; 0x40
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fa8f 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 80043e4:	e00b      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4619      	mov	r1, r3
 80043f0:	4610      	mov	r0, r2
 80043f2:	f000 fa86 	bl	8004902 <TIM_ITRx_SetConfig>
        break;
 80043f6:	e002      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043f8:	bf00      	nop
 80043fa:	e000      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	bc80      	pop	{r7}
 8004428:	4770      	bx	lr

0800442a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr

0800443c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr

0800444e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr
	...

08004474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a29      	ldr	r2, [pc, #164]	; (800452c <TIM_Base_SetConfig+0xb8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00b      	beq.n	80044a4 <TIM_Base_SetConfig+0x30>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004492:	d007      	beq.n	80044a4 <TIM_Base_SetConfig+0x30>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a26      	ldr	r2, [pc, #152]	; (8004530 <TIM_Base_SetConfig+0xbc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d003      	beq.n	80044a4 <TIM_Base_SetConfig+0x30>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a25      	ldr	r2, [pc, #148]	; (8004534 <TIM_Base_SetConfig+0xc0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d108      	bne.n	80044b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a1c      	ldr	r2, [pc, #112]	; (800452c <TIM_Base_SetConfig+0xb8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00b      	beq.n	80044d6 <TIM_Base_SetConfig+0x62>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c4:	d007      	beq.n	80044d6 <TIM_Base_SetConfig+0x62>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a19      	ldr	r2, [pc, #100]	; (8004530 <TIM_Base_SetConfig+0xbc>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d003      	beq.n	80044d6 <TIM_Base_SetConfig+0x62>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a18      	ldr	r2, [pc, #96]	; (8004534 <TIM_Base_SetConfig+0xc0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d108      	bne.n	80044e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a07      	ldr	r2, [pc, #28]	; (800452c <TIM_Base_SetConfig+0xb8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d103      	bne.n	800451c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	615a      	str	r2, [r3, #20]
}
 8004522:	bf00      	nop
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr
 800452c:	40012c00 	.word	0x40012c00
 8004530:	40000400 	.word	0x40000400
 8004534:	40000800 	.word	0x40000800

08004538 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	f023 0201 	bic.w	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0303 	bic.w	r3, r3, #3
 800456e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f023 0302 	bic.w	r3, r3, #2
 8004580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a1c      	ldr	r2, [pc, #112]	; (8004600 <TIM_OC1_SetConfig+0xc8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d10c      	bne.n	80045ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f023 0308 	bic.w	r3, r3, #8
 800459a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f023 0304 	bic.w	r3, r3, #4
 80045ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a13      	ldr	r2, [pc, #76]	; (8004600 <TIM_OC1_SetConfig+0xc8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d111      	bne.n	80045da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	621a      	str	r2, [r3, #32]
}
 80045f4:	bf00      	nop
 80045f6:	371c      	adds	r7, #28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40012c00 	.word	0x40012c00

08004604 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	f023 0210 	bic.w	r2, r3, #16
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800463a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f023 0320 	bic.w	r3, r3, #32
 800464e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a1d      	ldr	r2, [pc, #116]	; (80046d4 <TIM_OC2_SetConfig+0xd0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d10d      	bne.n	8004680 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800466a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800467e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a14      	ldr	r2, [pc, #80]	; (80046d4 <TIM_OC2_SetConfig+0xd0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d113      	bne.n	80046b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800468e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004696:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	621a      	str	r2, [r3, #32]
}
 80046ca:	bf00      	nop
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr
 80046d4:	40012c00 	.word	0x40012c00

080046d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0303 	bic.w	r3, r3, #3
 800470e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	021b      	lsls	r3, r3, #8
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a1d      	ldr	r2, [pc, #116]	; (80047a8 <TIM_OC3_SetConfig+0xd0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d10d      	bne.n	8004752 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800473c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a14      	ldr	r2, [pc, #80]	; (80047a8 <TIM_OC3_SetConfig+0xd0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d113      	bne.n	8004782 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	621a      	str	r2, [r3, #32]
}
 800479c:	bf00      	nop
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bc80      	pop	{r7}
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40012c00 	.word	0x40012c00

080047ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	031b      	lsls	r3, r3, #12
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a0f      	ldr	r2, [pc, #60]	; (8004844 <TIM_OC4_SetConfig+0x98>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d109      	bne.n	8004820 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004812:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	019b      	lsls	r3, r3, #6
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	621a      	str	r2, [r3, #32]
}
 800483a:	bf00      	nop
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr
 8004844:	40012c00 	.word	0x40012c00

08004848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	f023 0201 	bic.w	r2, r3, #1
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f023 030a 	bic.w	r3, r3, #10
 8004884:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4313      	orrs	r3, r2
 800488c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	621a      	str	r2, [r3, #32]
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f023 0210 	bic.w	r2, r3, #16
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	031b      	lsls	r3, r3, #12
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	621a      	str	r2, [r3, #32]
}
 80048f8:	bf00      	nop
 80048fa:	371c      	adds	r7, #28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bc80      	pop	{r7}
 8004900:	4770      	bx	lr

08004902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	f043 0307 	orr.w	r3, r3, #7
 8004924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	609a      	str	r2, [r3, #8]
}
 800492c:	bf00      	nop
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr

08004936 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004936:	b480      	push	{r7}
 8004938:	b087      	sub	sp, #28
 800493a:	af00      	add	r7, sp, #0
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	607a      	str	r2, [r7, #4]
 8004942:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004950:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	021a      	lsls	r2, r3, #8
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	431a      	orrs	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4313      	orrs	r3, r2
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	609a      	str	r2, [r3, #8]
}
 800496a:	bf00      	nop
 800496c:	371c      	adds	r7, #28
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	2201      	movs	r2, #1
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a1a      	ldr	r2, [r3, #32]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	43db      	mvns	r3, r3
 8004996:	401a      	ands	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a1a      	ldr	r2, [r3, #32]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 031f 	and.w	r3, r3, #31
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ac:	431a      	orrs	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	621a      	str	r2, [r3, #32]
}
 80049b2:	bf00      	nop
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr

080049bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e046      	b.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a16      	ldr	r2, [pc, #88]	; (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00e      	beq.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a20:	d009      	beq.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a12      	ldr	r2, [pc, #72]	; (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a10      	ldr	r2, [pc, #64]	; (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d10c      	bne.n	8004a50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr
 8004a6c:	40012c00 	.word	0x40012c00
 8004a70:	40000400 	.word	0x40000400
 8004a74:	40000800 	.word	0x40000800

08004a78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr

08004a8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e03f      	b.n	8004b2e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fc fb0a 	bl	80010dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2224      	movs	r2, #36	; 0x24
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ade:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 fba9 	bl	8005238 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695a      	ldr	r2, [r3, #20]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b084      	sub	sp, #16
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	4613      	mov	r3, r2
 8004b42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	d11d      	bne.n	8004b8c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_UART_Receive_IT+0x26>
 8004b56:	88fb      	ldrh	r3, [r7, #6]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e016      	b.n	8004b8e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d101      	bne.n	8004b6e <HAL_UART_Receive_IT+0x38>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e00f      	b.n	8004b8e <HAL_UART_Receive_IT+0x58>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004b7c:	88fb      	ldrh	r3, [r7, #6]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f9cf 	bl	8004f26 <UART_Start_Receive_IT>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	e000      	b.n	8004b8e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004b8c:	2302      	movs	r3, #2
  }
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08a      	sub	sp, #40	; 0x28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10d      	bne.n	8004bea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	f003 0320 	and.w	r3, r3, #32
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d008      	beq.n	8004bea <HAL_UART_IRQHandler+0x52>
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fa7f 	bl	80050e6 <UART_Receive_IT>
      return;
 8004be8:	e17b      	b.n	8004ee2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 80b1 	beq.w	8004d54 <HAL_UART_IRQHandler+0x1bc>
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d105      	bne.n	8004c08 <HAL_UART_IRQHandler+0x70>
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 80a6 	beq.w	8004d54 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <HAL_UART_IRQHandler+0x90>
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c20:	f043 0201 	orr.w	r2, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <HAL_UART_IRQHandler+0xb0>
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	f043 0202 	orr.w	r2, r3, #2
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <HAL_UART_IRQHandler+0xd0>
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	f043 0204 	orr.w	r2, r3, #4
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00f      	beq.n	8004c92 <HAL_UART_IRQHandler+0xfa>
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	f003 0320 	and.w	r3, r3, #32
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d104      	bne.n	8004c86 <HAL_UART_IRQHandler+0xee>
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d005      	beq.n	8004c92 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	f043 0208 	orr.w	r2, r3, #8
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 811e 	beq.w	8004ed8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d007      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x11e>
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	f003 0320 	and.w	r3, r3, #32
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 fa18 	bl	80050e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf14      	ite	ne
 8004cc4:	2301      	movne	r3, #1
 8004cc6:	2300      	moveq	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	f003 0308 	and.w	r3, r3, #8
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d102      	bne.n	8004cde <HAL_UART_IRQHandler+0x146>
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d031      	beq.n	8004d42 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f95a 	bl	8004f98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d023      	beq.n	8004d3a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695a      	ldr	r2, [r3, #20]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d00:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d013      	beq.n	8004d32 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	4a76      	ldr	r2, [pc, #472]	; (8004ee8 <HAL_UART_IRQHandler+0x350>)
 8004d10:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fc fc26 	bl	8001568 <HAL_DMA_Abort_IT>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d016      	beq.n	8004d50 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d30:	e00e      	b.n	8004d50 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f8e3 	bl	8004efe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d38:	e00a      	b.n	8004d50 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f8df 	bl	8004efe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d40:	e006      	b.n	8004d50 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f8db 	bl	8004efe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d4e:	e0c3      	b.n	8004ed8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d50:	bf00      	nop
    return;
 8004d52:	e0c1      	b.n	8004ed8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	f040 80a1 	bne.w	8004ea0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	f003 0310 	and.w	r3, r3, #16
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 809b 	beq.w	8004ea0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	f003 0310 	and.w	r3, r3, #16
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 8095 	beq.w	8004ea0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d04e      	beq.n	8004e38 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004da4:	8a3b      	ldrh	r3, [r7, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 8098 	beq.w	8004edc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004db0:	8a3a      	ldrh	r2, [r7, #16]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	f080 8092 	bcs.w	8004edc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8a3a      	ldrh	r2, [r7, #16]
 8004dbc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d02b      	beq.n	8004e20 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dd6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695a      	ldr	r2, [r3, #20]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0201 	bic.w	r2, r2, #1
 8004de6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695a      	ldr	r2, [r3, #20]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004df6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0210 	bic.w	r2, r2, #16
 8004e14:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fc fb69 	bl	80014f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f86d 	bl	8004f10 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e36:	e051      	b.n	8004edc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d047      	beq.n	8004ee0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004e50:	8a7b      	ldrh	r3, [r7, #18]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d044      	beq.n	8004ee0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e64:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695a      	ldr	r2, [r3, #20]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0201 	bic.w	r2, r2, #1
 8004e74:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0210 	bic.w	r2, r2, #16
 8004e92:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e94:	8a7b      	ldrh	r3, [r7, #18]
 8004e96:	4619      	mov	r1, r3
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f839 	bl	8004f10 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e9e:	e01f      	b.n	8004ee0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d008      	beq.n	8004ebc <HAL_UART_IRQHandler+0x324>
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f8af 	bl	8005018 <UART_Transmit_IT>
    return;
 8004eba:	e012      	b.n	8004ee2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00d      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x34a>
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f8f0 	bl	80050b6 <UART_EndTransmit_IT>
    return;
 8004ed6:	e004      	b.n	8004ee2 <HAL_UART_IRQHandler+0x34a>
    return;
 8004ed8:	bf00      	nop
 8004eda:	e002      	b.n	8004ee2 <HAL_UART_IRQHandler+0x34a>
      return;
 8004edc:	bf00      	nop
 8004ede:	e000      	b.n	8004ee2 <HAL_UART_IRQHandler+0x34a>
      return;
 8004ee0:	bf00      	nop
  }
}
 8004ee2:	3728      	adds	r7, #40	; 0x28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	08004ff1 	.word	0x08004ff1

08004eec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bc80      	pop	{r7}
 8004efc:	4770      	bx	lr

08004efe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bc80      	pop	{r7}
 8004f0e:	4770      	bx	lr

08004f10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr

08004f26 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b085      	sub	sp, #20
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	4613      	mov	r3, r2
 8004f32:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	88fa      	ldrh	r2, [r7, #6]
 8004f3e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	88fa      	ldrh	r2, [r7, #6]
 8004f44:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2222      	movs	r2, #34	; 0x22
 8004f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f6a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695a      	ldr	r2, [r3, #20]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0220 	orr.w	r2, r2, #32
 8004f8a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr

08004f98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695a      	ldr	r2, [r3, #20]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0201 	bic.w	r2, r2, #1
 8004fbe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d107      	bne.n	8004fd8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0210 	bic.w	r2, r2, #16
 8004fd6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc80      	pop	{r7}
 8004fee:	4770      	bx	lr

08004ff0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f7ff ff77 	bl	8004efe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005010:	bf00      	nop
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b21      	cmp	r3, #33	; 0x21
 800502a:	d13e      	bne.n	80050aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005034:	d114      	bne.n	8005060 <UART_Transmit_IT+0x48>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d110      	bne.n	8005060 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005052:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	1c9a      	adds	r2, r3, #2
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	621a      	str	r2, [r3, #32]
 800505e:	e008      	b.n	8005072 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	1c59      	adds	r1, r3, #1
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6211      	str	r1, [r2, #32]
 800506a:	781a      	ldrb	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b29b      	uxth	r3, r3
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	4619      	mov	r1, r3
 8005080:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10f      	bne.n	80050a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005094:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	e000      	b.n	80050ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050aa:	2302      	movs	r3, #2
  }
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr

080050b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff ff08 	bl	8004eec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b086      	sub	sp, #24
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b22      	cmp	r3, #34	; 0x22
 80050f8:	f040 8099 	bne.w	800522e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005104:	d117      	bne.n	8005136 <UART_Receive_IT+0x50>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d113      	bne.n	8005136 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800510e:	2300      	movs	r3, #0
 8005110:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005116:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005124:	b29a      	uxth	r2, r3
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512e:	1c9a      	adds	r2, r3, #2
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	629a      	str	r2, [r3, #40]	; 0x28
 8005134:	e026      	b.n	8005184 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005148:	d007      	beq.n	800515a <UART_Receive_IT+0x74>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10a      	bne.n	8005168 <UART_Receive_IT+0x82>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d106      	bne.n	8005168 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	b2da      	uxtb	r2, r3
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	701a      	strb	r2, [r3, #0]
 8005166:	e008      	b.n	800517a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005174:	b2da      	uxtb	r2, r3
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005188:	b29b      	uxth	r3, r3
 800518a:	3b01      	subs	r3, #1
 800518c:	b29b      	uxth	r3, r3
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	4619      	mov	r1, r3
 8005192:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005194:	2b00      	cmp	r3, #0
 8005196:	d148      	bne.n	800522a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0220 	bic.w	r2, r2, #32
 80051a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695a      	ldr	r2, [r3, #20]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0201 	bic.w	r2, r2, #1
 80051c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d123      	bne.n	8005220 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68da      	ldr	r2, [r3, #12]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0210 	bic.w	r2, r2, #16
 80051ec:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b10      	cmp	r3, #16
 80051fa:	d10a      	bne.n	8005212 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005216:	4619      	mov	r1, r3
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f7ff fe79 	bl	8004f10 <HAL_UARTEx_RxEventCallback>
 800521e:	e002      	b.n	8005226 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f005 fbfd 	bl	800aa20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	e002      	b.n	8005230 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	e000      	b.n	8005230 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800522e:	2302      	movs	r3, #2
  }
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689a      	ldr	r2, [r3, #8]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005272:	f023 030c 	bic.w	r3, r3, #12
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6812      	ldr	r2, [r2, #0]
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	430b      	orrs	r3, r1
 800527e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a2c      	ldr	r2, [pc, #176]	; (800534c <UART_SetConfig+0x114>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d103      	bne.n	80052a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052a0:	f7fe fc08 	bl	8003ab4 <HAL_RCC_GetPCLK2Freq>
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	e002      	b.n	80052ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052a8:	f7fe fbf0 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 80052ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	009a      	lsls	r2, r3, #2
 80052b8:	441a      	add	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c4:	4a22      	ldr	r2, [pc, #136]	; (8005350 <UART_SetConfig+0x118>)
 80052c6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	0119      	lsls	r1, r3, #4
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4613      	mov	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	009a      	lsls	r2, r3, #2
 80052d8:	441a      	add	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80052e4:	4b1a      	ldr	r3, [pc, #104]	; (8005350 <UART_SetConfig+0x118>)
 80052e6:	fba3 0302 	umull	r0, r3, r3, r2
 80052ea:	095b      	lsrs	r3, r3, #5
 80052ec:	2064      	movs	r0, #100	; 0x64
 80052ee:	fb00 f303 	mul.w	r3, r0, r3
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	3332      	adds	r3, #50	; 0x32
 80052f8:	4a15      	ldr	r2, [pc, #84]	; (8005350 <UART_SetConfig+0x118>)
 80052fa:	fba2 2303 	umull	r2, r3, r2, r3
 80052fe:	095b      	lsrs	r3, r3, #5
 8005300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005304:	4419      	add	r1, r3
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4613      	mov	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	009a      	lsls	r2, r3, #2
 8005310:	441a      	add	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	fbb2 f2f3 	udiv	r2, r2, r3
 800531c:	4b0c      	ldr	r3, [pc, #48]	; (8005350 <UART_SetConfig+0x118>)
 800531e:	fba3 0302 	umull	r0, r3, r3, r2
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	2064      	movs	r0, #100	; 0x64
 8005326:	fb00 f303 	mul.w	r3, r0, r3
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	3332      	adds	r3, #50	; 0x32
 8005330:	4a07      	ldr	r2, [pc, #28]	; (8005350 <UART_SetConfig+0x118>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	f003 020f 	and.w	r2, r3, #15
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	440a      	add	r2, r1
 8005342:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005344:	bf00      	nop
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40013800 	.word	0x40013800
 8005350:	51eb851f 	.word	0x51eb851f

08005354 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005354:	b084      	sub	sp, #16
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	f107 0014 	add.w	r0, r7, #20
 8005362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	b004      	add	sp, #16
 8005372:	4770      	bx	lr

08005374 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005384:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005388:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	b29a      	uxth	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053a8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80053ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	43db      	mvns	r3, r3
 80053bc:	b29b      	uxth	r3, r3
 80053be:	4013      	ands	r3, r2
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr

080053ec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80053ec:	b084      	sub	sp, #16
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	f107 0014 	add.w	r0, r7, #20
 80053fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	b004      	add	sp, #16
 800542a:	4770      	bx	lr

0800542c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800542c:	b480      	push	{r7}
 800542e:	b09b      	sub	sp, #108	; 0x6c
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	b29b      	uxth	r3, r3
 800544a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800544e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005452:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	78db      	ldrb	r3, [r3, #3]
 800545a:	2b03      	cmp	r3, #3
 800545c:	d81f      	bhi.n	800549e <USB_ActivateEndpoint+0x72>
 800545e:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <USB_ActivateEndpoint+0x38>)
 8005460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005464:	08005475 	.word	0x08005475
 8005468:	08005491 	.word	0x08005491
 800546c:	080054a7 	.word	0x080054a7
 8005470:	08005483 	.word	0x08005483
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005474:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005478:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800547c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005480:	e012      	b.n	80054a8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005482:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005486:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800548a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800548e:	e00b      	b.n	80054a8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005490:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005494:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005498:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800549c:	e004      	b.n	80054a8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80054a4:	e000      	b.n	80054a8 <USB_ActivateEndpoint+0x7c>
      break;
 80054a6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	441a      	add	r2, r3
 80054b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80054b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	441a      	add	r2, r3
 80054f8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80054fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550c:	b29b      	uxth	r3, r3
 800550e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	7b1b      	ldrb	r3, [r3, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	f040 8149 	bne.w	80057ac <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	785b      	ldrb	r3, [r3, #1]
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 8084 	beq.w	800562c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800552e:	b29b      	uxth	r3, r3
 8005530:	461a      	mov	r2, r3
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	4413      	add	r3, r2
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	011a      	lsls	r2, r3, #4
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	88db      	ldrh	r3, [r3, #6]
 800554c:	085b      	lsrs	r3, r3, #1
 800554e:	b29b      	uxth	r3, r3
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	81fb      	strh	r3, [r7, #14]
 8005566:	89fb      	ldrh	r3, [r7, #14]
 8005568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01b      	beq.n	80055a8 <USB_ActivateEndpoint+0x17c>
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29b      	uxth	r3, r3
 800557e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005586:	81bb      	strh	r3, [r7, #12]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	441a      	add	r2, r3
 8005592:	89bb      	ldrh	r3, [r7, #12]
 8005594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800559c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	78db      	ldrb	r3, [r3, #3]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d020      	beq.n	80055f2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c6:	813b      	strh	r3, [r7, #8]
 80055c8:	893b      	ldrh	r3, [r7, #8]
 80055ca:	f083 0320 	eor.w	r3, r3, #32
 80055ce:	813b      	strh	r3, [r7, #8]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	441a      	add	r2, r3
 80055da:	893b      	ldrh	r3, [r7, #8]
 80055dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	8013      	strh	r3, [r2, #0]
 80055f0:	e27f      	b.n	8005af2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005608:	817b      	strh	r3, [r7, #10]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	441a      	add	r2, r3
 8005614:	897b      	ldrh	r3, [r7, #10]
 8005616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800561a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800561e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005626:	b29b      	uxth	r3, r3
 8005628:	8013      	strh	r3, [r2, #0]
 800562a:	e262      	b.n	8005af2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005636:	b29b      	uxth	r3, r3
 8005638:	461a      	mov	r2, r3
 800563a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563c:	4413      	add	r3, r2
 800563e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	011a      	lsls	r2, r3, #4
 8005646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005648:	4413      	add	r3, r2
 800564a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800564e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	88db      	ldrh	r3, [r3, #6]
 8005654:	085b      	lsrs	r3, r3, #1
 8005656:	b29b      	uxth	r3, r3
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	b29a      	uxth	r2, r3
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800566a:	b29b      	uxth	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	4413      	add	r3, r2
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	011a      	lsls	r2, r3, #4
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	4413      	add	r3, r2
 800567e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005682:	623b      	str	r3, [r7, #32]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d112      	bne.n	80056b2 <USB_ActivateEndpoint+0x286>
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005696:	b29a      	uxth	r2, r3
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	801a      	strh	r2, [r3, #0]
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	801a      	strh	r2, [r3, #0]
 80056b0:	e02f      	b.n	8005712 <USB_ActivateEndpoint+0x2e6>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	2b3e      	cmp	r3, #62	; 0x3e
 80056b8:	d813      	bhi.n	80056e2 <USB_ActivateEndpoint+0x2b6>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	085b      	lsrs	r3, r3, #1
 80056c0:	663b      	str	r3, [r7, #96]	; 0x60
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <USB_ActivateEndpoint+0x2a8>
 80056ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056d0:	3301      	adds	r3, #1
 80056d2:	663b      	str	r3, [r7, #96]	; 0x60
 80056d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	029b      	lsls	r3, r3, #10
 80056da:	b29a      	uxth	r2, r3
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	801a      	strh	r2, [r3, #0]
 80056e0:	e017      	b.n	8005712 <USB_ActivateEndpoint+0x2e6>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	095b      	lsrs	r3, r3, #5
 80056e8:	663b      	str	r3, [r7, #96]	; 0x60
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f003 031f 	and.w	r3, r3, #31
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d102      	bne.n	80056fc <USB_ActivateEndpoint+0x2d0>
 80056f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056f8:	3b01      	subs	r3, #1
 80056fa:	663b      	str	r3, [r7, #96]	; 0x60
 80056fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056fe:	b29b      	uxth	r3, r3
 8005700:	029b      	lsls	r3, r3, #10
 8005702:	b29b      	uxth	r3, r3
 8005704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800570c:	b29a      	uxth	r2, r3
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	83fb      	strh	r3, [r7, #30]
 8005720:	8bfb      	ldrh	r3, [r7, #30]
 8005722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d01b      	beq.n	8005762 <USB_ActivateEndpoint+0x336>
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	b29b      	uxth	r3, r3
 8005738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800573c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005740:	83bb      	strh	r3, [r7, #28]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	441a      	add	r2, r3
 800574c:	8bbb      	ldrh	r3, [r7, #28]
 800574e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005756:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800575a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800575e:	b29b      	uxth	r3, r3
 8005760:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	b29b      	uxth	r3, r3
 8005770:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005778:	837b      	strh	r3, [r7, #26]
 800577a:	8b7b      	ldrh	r3, [r7, #26]
 800577c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005780:	837b      	strh	r3, [r7, #26]
 8005782:	8b7b      	ldrh	r3, [r7, #26]
 8005784:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005788:	837b      	strh	r3, [r7, #26]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	441a      	add	r2, r3
 8005794:	8b7b      	ldrh	r3, [r7, #26]
 8005796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800579a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800579e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	8013      	strh	r3, [r2, #0]
 80057aa:	e1a2      	b.n	8005af2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	441a      	add	r2, r3
 80057d0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80057d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057dc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	461a      	mov	r2, r3
 80057f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057f8:	4413      	add	r3, r2
 80057fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	011a      	lsls	r2, r3, #4
 8005802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005804:	4413      	add	r3, r2
 8005806:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800580a:	657b      	str	r3, [r7, #84]	; 0x54
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	891b      	ldrh	r3, [r3, #8]
 8005810:	085b      	lsrs	r3, r3, #1
 8005812:	b29b      	uxth	r3, r3
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800581a:	801a      	strh	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	653b      	str	r3, [r7, #80]	; 0x50
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005826:	b29b      	uxth	r3, r3
 8005828:	461a      	mov	r2, r3
 800582a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800582c:	4413      	add	r3, r2
 800582e:	653b      	str	r3, [r7, #80]	; 0x50
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	011a      	lsls	r2, r3, #4
 8005836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005838:	4413      	add	r3, r2
 800583a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800583e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	895b      	ldrh	r3, [r3, #10]
 8005844:	085b      	lsrs	r3, r3, #1
 8005846:	b29b      	uxth	r3, r3
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800584e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	785b      	ldrb	r3, [r3, #1]
 8005854:	2b00      	cmp	r3, #0
 8005856:	f040 8091 	bne.w	800597c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005868:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800586a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d01b      	beq.n	80058aa <USB_ActivateEndpoint+0x47e>
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	b29b      	uxth	r3, r3
 8005880:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005888:	877b      	strh	r3, [r7, #58]	; 0x3a
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	441a      	add	r2, r3
 8005894:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800589a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800589e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	873b      	strh	r3, [r7, #56]	; 0x38
 80058b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d01b      	beq.n	80058fa <USB_ActivateEndpoint+0x4ce>
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	441a      	add	r2, r3
 80058e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	b29b      	uxth	r3, r3
 8005908:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800590c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005910:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005912:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005914:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005918:	86bb      	strh	r3, [r7, #52]	; 0x34
 800591a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800591c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005920:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	441a      	add	r2, r3
 800592c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800592e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800593a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593e:	b29b      	uxth	r3, r3
 8005940:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	b29b      	uxth	r3, r3
 8005950:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005958:	867b      	strh	r3, [r7, #50]	; 0x32
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	441a      	add	r2, r3
 8005964:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005976:	b29b      	uxth	r3, r3
 8005978:	8013      	strh	r3, [r2, #0]
 800597a:	e0ba      	b.n	8005af2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800598c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01d      	beq.n	80059d4 <USB_ActivateEndpoint+0x5a8>
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	441a      	add	r2, r3
 80059bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80059c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80059e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80059e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d01d      	beq.n	8005a2c <USB_ActivateEndpoint+0x600>
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a06:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	441a      	add	r2, r3
 8005a14:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	78db      	ldrb	r3, [r3, #3]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d024      	beq.n	8005a7e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a4a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005a4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a52:	f083 0320 	eor.w	r3, r3, #32
 8005a56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	441a      	add	r2, r3
 8005a64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	8013      	strh	r3, [r2, #0]
 8005a7c:	e01d      	b.n	8005aba <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	441a      	add	r2, r3
 8005aa2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	441a      	add	r2, r3
 8005adc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005af2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	376c      	adds	r7, #108	; 0x6c
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bc80      	pop	{r7}
 8005afe:	4770      	bx	lr

08005b00 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b08d      	sub	sp, #52	; 0x34
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	7b1b      	ldrb	r3, [r3, #12]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f040 808e 	bne.w	8005c30 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	785b      	ldrb	r3, [r3, #1]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d044      	beq.n	8005ba6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	81bb      	strh	r3, [r7, #12]
 8005b2a:	89bb      	ldrh	r3, [r7, #12]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01b      	beq.n	8005b6c <USB_DeactivateEndpoint+0x6c>
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4a:	817b      	strh	r3, [r7, #10]
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	441a      	add	r2, r3
 8005b56:	897b      	ldrh	r3, [r7, #10]
 8005b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b82:	813b      	strh	r3, [r7, #8]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	441a      	add	r2, r3
 8005b8e:	893b      	ldrh	r3, [r7, #8]
 8005b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	8013      	strh	r3, [r2, #0]
 8005ba4:	e192      	b.n	8005ecc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	827b      	strh	r3, [r7, #18]
 8005bb4:	8a7b      	ldrh	r3, [r7, #18]
 8005bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d01b      	beq.n	8005bf6 <USB_DeactivateEndpoint+0xf6>
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd4:	823b      	strh	r3, [r7, #16]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	441a      	add	r2, r3
 8005be0:	8a3b      	ldrh	r3, [r7, #16]
 8005be2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0c:	81fb      	strh	r3, [r7, #14]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	441a      	add	r2, r3
 8005c18:	89fb      	ldrh	r3, [r7, #14]
 8005c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	8013      	strh	r3, [r2, #0]
 8005c2e:	e14d      	b.n	8005ecc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	785b      	ldrb	r3, [r3, #1]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f040 80a5 	bne.w	8005d84 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	843b      	strh	r3, [r7, #32]
 8005c48:	8c3b      	ldrh	r3, [r7, #32]
 8005c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d01b      	beq.n	8005c8a <USB_DeactivateEndpoint+0x18a>
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c68:	83fb      	strh	r3, [r7, #30]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	441a      	add	r2, r3
 8005c74:	8bfb      	ldrh	r3, [r7, #30]
 8005c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	83bb      	strh	r3, [r7, #28]
 8005c98:	8bbb      	ldrh	r3, [r7, #28]
 8005c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d01b      	beq.n	8005cda <USB_DeactivateEndpoint+0x1da>
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb8:	837b      	strh	r3, [r7, #26]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	441a      	add	r2, r3
 8005cc4:	8b7b      	ldrh	r3, [r7, #26]
 8005cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf0:	833b      	strh	r3, [r7, #24]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	441a      	add	r2, r3
 8005cfc:	8b3b      	ldrh	r3, [r7, #24]
 8005cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d28:	82fb      	strh	r3, [r7, #22]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	441a      	add	r2, r3
 8005d34:	8afb      	ldrh	r3, [r7, #22]
 8005d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d60:	82bb      	strh	r3, [r7, #20]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	441a      	add	r2, r3
 8005d6c:	8abb      	ldrh	r3, [r7, #20]
 8005d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	8013      	strh	r3, [r2, #0]
 8005d82:	e0a3      	b.n	8005ecc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005d92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d01b      	beq.n	8005dd4 <USB_DeactivateEndpoint+0x2d4>
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	441a      	add	r2, r3
 8005dbe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005de2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d01b      	beq.n	8005e24 <USB_DeactivateEndpoint+0x324>
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e02:	853b      	strh	r3, [r7, #40]	; 0x28
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	441a      	add	r2, r3
 8005e0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	441a      	add	r2, r3
 8005e46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e72:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	441a      	add	r2, r3
 8005e7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eaa:	847b      	strh	r3, [r7, #34]	; 0x22
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	441a      	add	r2, r3
 8005eb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3734      	adds	r7, #52	; 0x34
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr

08005ed8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b0cc      	sub	sp, #304	; 0x130
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ee6:	6018      	str	r0, [r3, #0]
 8005ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ef0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	785b      	ldrb	r3, [r3, #1]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	f041 817d 	bne.w	80071fe <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	699a      	ldr	r2, [r3, #24]
 8005f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d908      	bls.n	8005f32 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005f30:	e007      	b.n	8005f42 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	7b1b      	ldrb	r3, [r3, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d152      	bne.n	8005ff8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6959      	ldr	r1, [r3, #20]
 8005f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	88da      	ldrh	r2, [r3, #6]
 8005f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f74:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f78:	6800      	ldr	r0, [r0, #0]
 8005f7a:	f001 ff23 	bl	8007dc4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f82:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005f86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f8a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005fac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005fb0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005fb4:	6812      	ldr	r2, [r2, #0]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	011a      	lsls	r2, r3, #4
 8005fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fcc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fdc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	801a      	strh	r2, [r3, #0]
 8005ff4:	f001 b8b5 	b.w	8007162 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ffc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	78db      	ldrb	r3, [r3, #3]
 8006004:	2b02      	cmp	r3, #2
 8006006:	f040 84c6 	bne.w	8006996 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800600a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6a1a      	ldr	r2, [r3, #32]
 8006016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800601a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	429a      	cmp	r2, r3
 8006024:	f240 8443 	bls.w	80068ae <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800602c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006036:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	b29b      	uxth	r3, r3
 8006046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800604a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006056:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006060:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	441a      	add	r2, r3
 800606c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006078:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800607c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006080:	b29b      	uxth	r3, r3
 8006082:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006088:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6a1a      	ldr	r2, [r3, #32]
 8006090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006094:	1ad2      	subs	r2, r2, r3
 8006096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800609a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80060a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 823e 	beq.w	8006546 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ce:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80060d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060d6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80060da:	6812      	ldr	r2, [r2, #0]
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	785b      	ldrb	r3, [r3, #1]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f040 809a 	bne.w	8006224 <USB_EPStartXfer+0x34c>
 80060f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060fc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006108:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006112:	b29b      	uxth	r3, r3
 8006114:	4619      	mov	r1, r3
 8006116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800611a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800611e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006122:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006126:	6812      	ldr	r2, [r2, #0]
 8006128:	440a      	add	r2, r1
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006130:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	011a      	lsls	r2, r3, #4
 800613a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4413      	add	r3, r2
 8006146:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800614a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d122      	bne.n	80061a2 <USB_EPStartXfer+0x2ca>
 800615c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006160:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	b29b      	uxth	r3, r3
 800616a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800616e:	b29a      	uxth	r2, r3
 8006170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006174:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	801a      	strh	r2, [r3, #0]
 800617c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006180:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b29b      	uxth	r3, r3
 800618a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006192:	b29a      	uxth	r2, r3
 8006194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006198:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	801a      	strh	r2, [r3, #0]
 80061a0:	e079      	b.n	8006296 <USB_EPStartXfer+0x3be>
 80061a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061a6:	2b3e      	cmp	r3, #62	; 0x3e
 80061a8:	d81b      	bhi.n	80061e2 <USB_EPStartXfer+0x30a>
 80061aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ae:	085b      	lsrs	r3, r3, #1
 80061b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80061b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d004      	beq.n	80061ca <USB_EPStartXfer+0x2f2>
 80061c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061c4:	3301      	adds	r3, #1
 80061c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80061ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	029b      	lsls	r3, r3, #10
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	801a      	strh	r2, [r3, #0]
 80061e0:	e059      	b.n	8006296 <USB_EPStartXfer+0x3be>
 80061e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80061ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f0:	f003 031f 	and.w	r3, r3, #31
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d104      	bne.n	8006202 <USB_EPStartXfer+0x32a>
 80061f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061fc:	3b01      	subs	r3, #1
 80061fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006202:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006206:	b29b      	uxth	r3, r3
 8006208:	029b      	lsls	r3, r3, #10
 800620a:	b29b      	uxth	r3, r3
 800620c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006214:	b29a      	uxth	r2, r3
 8006216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	801a      	strh	r2, [r3, #0]
 8006222:	e038      	b.n	8006296 <USB_EPStartXfer+0x3be>
 8006224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006228:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	785b      	ldrb	r3, [r3, #1]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d130      	bne.n	8006296 <USB_EPStartXfer+0x3be>
 8006234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006238:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006242:	b29b      	uxth	r3, r3
 8006244:	4619      	mov	r1, r3
 8006246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800624e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006252:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006256:	6812      	ldr	r2, [r2, #0]
 8006258:	440a      	add	r2, r1
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006260:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	011a      	lsls	r2, r3, #4
 800626a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800626e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4413      	add	r3, r2
 8006276:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800627a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800627e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006288:	b29a      	uxth	r2, r3
 800628a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800628e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800629a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	895b      	ldrh	r3, [r3, #10]
 80062a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6959      	ldr	r1, [r3, #20]
 80062b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80062bc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80062c0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80062c4:	6800      	ldr	r0, [r0, #0]
 80062c6:	f001 fd7d 	bl	8007dc4 <USB_WritePMA>
            ep->xfer_buff += len;
 80062ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695a      	ldr	r2, [r3, #20]
 80062d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062da:	441a      	add	r2, r3
 80062dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80062e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6a1a      	ldr	r2, [r3, #32]
 80062f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	429a      	cmp	r2, r3
 8006302:	d90f      	bls.n	8006324 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006308:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6a1a      	ldr	r2, [r3, #32]
 8006310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006314:	1ad2      	subs	r2, r2, r3
 8006316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800631a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	621a      	str	r2, [r3, #32]
 8006322:	e00e      	b.n	8006342 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006328:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2200      	movs	r2, #0
 8006340:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	785b      	ldrb	r3, [r3, #1]
 800634e:	2b00      	cmp	r3, #0
 8006350:	f040 809a 	bne.w	8006488 <USB_EPStartXfer+0x5b0>
 8006354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006358:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800635c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006360:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006364:	6812      	ldr	r2, [r2, #0]
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006376:	b29b      	uxth	r3, r3
 8006378:	4619      	mov	r1, r3
 800637a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006382:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006386:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800638a:	6812      	ldr	r2, [r2, #0]
 800638c:	440a      	add	r2, r1
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	011a      	lsls	r2, r3, #4
 800639e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4413      	add	r3, r2
 80063aa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80063ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d122      	bne.n	8006406 <USB_EPStartXfer+0x52e>
 80063c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	801a      	strh	r2, [r3, #0]
 80063e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	881b      	ldrh	r3, [r3, #0]
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	801a      	strh	r2, [r3, #0]
 8006404:	e083      	b.n	800650e <USB_EPStartXfer+0x636>
 8006406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640a:	2b3e      	cmp	r3, #62	; 0x3e
 800640c:	d81b      	bhi.n	8006446 <USB_EPStartXfer+0x56e>
 800640e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006412:	085b      	lsrs	r3, r3, #1
 8006414:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	d004      	beq.n	800642e <USB_EPStartXfer+0x556>
 8006424:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006428:	3301      	adds	r3, #1
 800642a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800642e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006432:	b29b      	uxth	r3, r3
 8006434:	029b      	lsls	r3, r3, #10
 8006436:	b29a      	uxth	r2, r3
 8006438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	801a      	strh	r2, [r3, #0]
 8006444:	e063      	b.n	800650e <USB_EPStartXfer+0x636>
 8006446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800644a:	095b      	lsrs	r3, r3, #5
 800644c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006454:	f003 031f 	and.w	r3, r3, #31
 8006458:	2b00      	cmp	r3, #0
 800645a:	d104      	bne.n	8006466 <USB_EPStartXfer+0x58e>
 800645c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006460:	3b01      	subs	r3, #1
 8006462:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006466:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800646a:	b29b      	uxth	r3, r3
 800646c:	029b      	lsls	r3, r3, #10
 800646e:	b29b      	uxth	r3, r3
 8006470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006478:	b29a      	uxth	r2, r3
 800647a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	801a      	strh	r2, [r3, #0]
 8006486:	e042      	b.n	800650e <USB_EPStartXfer+0x636>
 8006488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	785b      	ldrb	r3, [r3, #1]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d13a      	bne.n	800650e <USB_EPStartXfer+0x636>
 8006498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80064a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064a4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80064a8:	6812      	ldr	r2, [r2, #0]
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	4619      	mov	r1, r3
 80064be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80064c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064ca:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80064ce:	6812      	ldr	r2, [r2, #0]
 80064d0:	440a      	add	r2, r1
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	011a      	lsls	r2, r3, #4
 80064e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4413      	add	r3, r2
 80064ee:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80064f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006500:	b29a      	uxth	r2, r3
 8006502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006506:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800650e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006512:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	891b      	ldrh	r3, [r3, #8]
 800651a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800651e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006522:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6959      	ldr	r1, [r3, #20]
 800652a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800652e:	b29b      	uxth	r3, r3
 8006530:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006534:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006538:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800653c:	6800      	ldr	r0, [r0, #0]
 800653e:	f001 fc41 	bl	8007dc4 <USB_WritePMA>
 8006542:	f000 be0e 	b.w	8007162 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800654a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	785b      	ldrb	r3, [r3, #1]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d16d      	bne.n	8006632 <USB_EPStartXfer+0x75a>
 8006556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800655a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	64bb      	str	r3, [r7, #72]	; 0x48
 8006562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006566:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006570:	b29b      	uxth	r3, r3
 8006572:	461a      	mov	r2, r3
 8006574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006576:	4413      	add	r3, r2
 8006578:	64bb      	str	r3, [r7, #72]	; 0x48
 800657a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	011a      	lsls	r2, r3, #4
 8006588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800658a:	4413      	add	r3, r2
 800658c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006590:	647b      	str	r3, [r7, #68]	; 0x44
 8006592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006596:	2b00      	cmp	r3, #0
 8006598:	d112      	bne.n	80065c0 <USB_EPStartXfer+0x6e8>
 800659a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a8:	801a      	strh	r2, [r3, #0]
 80065aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065bc:	801a      	strh	r2, [r3, #0]
 80065be:	e063      	b.n	8006688 <USB_EPStartXfer+0x7b0>
 80065c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065c4:	2b3e      	cmp	r3, #62	; 0x3e
 80065c6:	d817      	bhi.n	80065f8 <USB_EPStartXfer+0x720>
 80065c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065cc:	085b      	lsrs	r3, r3, #1
 80065ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80065d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d004      	beq.n	80065e8 <USB_EPStartXfer+0x710>
 80065de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80065e2:	3301      	adds	r3, #1
 80065e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80065e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	029b      	lsls	r3, r3, #10
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065f4:	801a      	strh	r2, [r3, #0]
 80065f6:	e047      	b.n	8006688 <USB_EPStartXfer+0x7b0>
 80065f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065fc:	095b      	lsrs	r3, r3, #5
 80065fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006606:	f003 031f 	and.w	r3, r3, #31
 800660a:	2b00      	cmp	r3, #0
 800660c:	d104      	bne.n	8006618 <USB_EPStartXfer+0x740>
 800660e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006612:	3b01      	subs	r3, #1
 8006614:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006618:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800661c:	b29b      	uxth	r3, r3
 800661e:	029b      	lsls	r3, r3, #10
 8006620:	b29b      	uxth	r3, r3
 8006622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800662a:	b29a      	uxth	r2, r3
 800662c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	e02a      	b.n	8006688 <USB_EPStartXfer+0x7b0>
 8006632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	785b      	ldrb	r3, [r3, #1]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d122      	bne.n	8006688 <USB_EPStartXfer+0x7b0>
 8006642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006646:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	653b      	str	r3, [r7, #80]	; 0x50
 800664e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006652:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800665c:	b29b      	uxth	r3, r3
 800665e:	461a      	mov	r2, r3
 8006660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006662:	4413      	add	r3, r2
 8006664:	653b      	str	r3, [r7, #80]	; 0x50
 8006666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	011a      	lsls	r2, r3, #4
 8006674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006676:	4413      	add	r3, r2
 8006678:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800667c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800667e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006682:	b29a      	uxth	r2, r3
 8006684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006686:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	891b      	ldrh	r3, [r3, #8]
 8006694:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6959      	ldr	r1, [r3, #20]
 80066a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80066ae:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80066b2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80066b6:	6800      	ldr	r0, [r0, #0]
 80066b8:	f001 fb84 	bl	8007dc4 <USB_WritePMA>
            ep->xfer_buff += len;
 80066bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	695a      	ldr	r2, [r3, #20]
 80066c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066cc:	441a      	add	r2, r3
 80066ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6a1a      	ldr	r2, [r3, #32]
 80066e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d90f      	bls.n	8006716 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80066f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6a1a      	ldr	r2, [r3, #32]
 8006702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006706:	1ad2      	subs	r2, r2, r3
 8006708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	621a      	str	r2, [r3, #32]
 8006714:	e00e      	b.n	8006734 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800671a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800672a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2200      	movs	r2, #0
 8006732:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006738:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	643b      	str	r3, [r7, #64]	; 0x40
 8006740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006744:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	785b      	ldrb	r3, [r3, #1]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d16d      	bne.n	800682c <USB_EPStartXfer+0x954>
 8006750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006754:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	63bb      	str	r3, [r7, #56]	; 0x38
 800675c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006760:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800676a:	b29b      	uxth	r3, r3
 800676c:	461a      	mov	r2, r3
 800676e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006770:	4413      	add	r3, r2
 8006772:	63bb      	str	r3, [r7, #56]	; 0x38
 8006774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	011a      	lsls	r2, r3, #4
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006784:	4413      	add	r3, r2
 8006786:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800678a:	637b      	str	r3, [r7, #52]	; 0x34
 800678c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006790:	2b00      	cmp	r3, #0
 8006792:	d112      	bne.n	80067ba <USB_EPStartXfer+0x8e2>
 8006794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	b29b      	uxth	r3, r3
 800679a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800679e:	b29a      	uxth	r2, r3
 80067a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a2:	801a      	strh	r2, [r3, #0]
 80067a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b6:	801a      	strh	r2, [r3, #0]
 80067b8:	e05d      	b.n	8006876 <USB_EPStartXfer+0x99e>
 80067ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067be:	2b3e      	cmp	r3, #62	; 0x3e
 80067c0:	d817      	bhi.n	80067f2 <USB_EPStartXfer+0x91a>
 80067c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c6:	085b      	lsrs	r3, r3, #1
 80067c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80067cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d004      	beq.n	80067e2 <USB_EPStartXfer+0x90a>
 80067d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067dc:	3301      	adds	r3, #1
 80067de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80067e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	029b      	lsls	r3, r3, #10
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ee:	801a      	strh	r2, [r3, #0]
 80067f0:	e041      	b.n	8006876 <USB_EPStartXfer+0x99e>
 80067f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f6:	095b      	lsrs	r3, r3, #5
 80067f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80067fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006800:	f003 031f 	and.w	r3, r3, #31
 8006804:	2b00      	cmp	r3, #0
 8006806:	d104      	bne.n	8006812 <USB_EPStartXfer+0x93a>
 8006808:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800680c:	3b01      	subs	r3, #1
 800680e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006812:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006816:	b29b      	uxth	r3, r3
 8006818:	029b      	lsls	r3, r3, #10
 800681a:	b29b      	uxth	r3, r3
 800681c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006824:	b29a      	uxth	r2, r3
 8006826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006828:	801a      	strh	r2, [r3, #0]
 800682a:	e024      	b.n	8006876 <USB_EPStartXfer+0x99e>
 800682c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006830:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	785b      	ldrb	r3, [r3, #1]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d11c      	bne.n	8006876 <USB_EPStartXfer+0x99e>
 800683c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006840:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800684a:	b29b      	uxth	r3, r3
 800684c:	461a      	mov	r2, r3
 800684e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006850:	4413      	add	r3, r2
 8006852:	643b      	str	r3, [r7, #64]	; 0x40
 8006854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006858:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	011a      	lsls	r2, r3, #4
 8006862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006864:	4413      	add	r3, r2
 8006866:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800686a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800686c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006870:	b29a      	uxth	r2, r3
 8006872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006874:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800687a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	895b      	ldrh	r3, [r3, #10]
 8006882:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6959      	ldr	r1, [r3, #20]
 8006892:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006896:	b29b      	uxth	r3, r3
 8006898:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800689c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80068a0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80068a4:	6800      	ldr	r0, [r0, #0]
 80068a6:	f001 fa8d 	bl	8007dc4 <USB_WritePMA>
 80068aa:	f000 bc5a 	b.w	8007162 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80068ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80068be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	b29b      	uxth	r3, r3
 80068dc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80068e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80068e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	441a      	add	r2, r3
 8006902:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800690a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800690e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006916:	b29b      	uxth	r3, r3
 8006918:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800691a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800692a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006934:	b29b      	uxth	r3, r3
 8006936:	461a      	mov	r2, r3
 8006938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800693a:	4413      	add	r3, r2
 800693c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800693e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	011a      	lsls	r2, r3, #4
 800694c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800694e:	4413      	add	r3, r2
 8006950:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006954:	65bb      	str	r3, [r7, #88]	; 0x58
 8006956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800695a:	b29a      	uxth	r2, r3
 800695c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800695e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006964:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	891b      	ldrh	r3, [r3, #8]
 800696c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006974:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6959      	ldr	r1, [r3, #20]
 800697c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006980:	b29b      	uxth	r3, r3
 8006982:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006986:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800698a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800698e:	6800      	ldr	r0, [r0, #0]
 8006990:	f001 fa18 	bl	8007dc4 <USB_WritePMA>
 8006994:	e3e5      	b.n	8007162 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069bc:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80069c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	441a      	add	r2, r3
 80069da:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80069de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069e6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80069ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80069f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6a1a      	ldr	r2, [r3, #32]
 80069fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a02:	1ad2      	subs	r2, r2, r3
 8006a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 81bc 	beq.w	8006db0 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	785b      	ldrb	r3, [r3, #1]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d16d      	bne.n	8006b32 <USB_EPStartXfer+0xc5a>
 8006a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	461a      	mov	r2, r3
 8006a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a76:	4413      	add	r3, r2
 8006a78:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	011a      	lsls	r2, r3, #4
 8006a88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a90:	677b      	str	r3, [r7, #116]	; 0x74
 8006a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d112      	bne.n	8006ac0 <USB_EPStartXfer+0xbe8>
 8006a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a9c:	881b      	ldrh	r3, [r3, #0]
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aa8:	801a      	strh	r2, [r3, #0]
 8006aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006abc:	801a      	strh	r2, [r3, #0]
 8006abe:	e060      	b.n	8006b82 <USB_EPStartXfer+0xcaa>
 8006ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ac4:	2b3e      	cmp	r3, #62	; 0x3e
 8006ac6:	d817      	bhi.n	8006af8 <USB_EPStartXfer+0xc20>
 8006ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006acc:	085b      	lsrs	r3, r3, #1
 8006ace:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d004      	beq.n	8006ae8 <USB_EPStartXfer+0xc10>
 8006ade:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006ae8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	029b      	lsls	r3, r3, #10
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006af4:	801a      	strh	r2, [r3, #0]
 8006af6:	e044      	b.n	8006b82 <USB_EPStartXfer+0xcaa>
 8006af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006afc:	095b      	lsrs	r3, r3, #5
 8006afe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b06:	f003 031f 	and.w	r3, r3, #31
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d104      	bne.n	8006b18 <USB_EPStartXfer+0xc40>
 8006b0e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b12:	3b01      	subs	r3, #1
 8006b14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b18:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	029b      	lsls	r3, r3, #10
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b2e:	801a      	strh	r2, [r3, #0]
 8006b30:	e027      	b.n	8006b82 <USB_EPStartXfer+0xcaa>
 8006b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	785b      	ldrb	r3, [r3, #1]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d11f      	bne.n	8006b82 <USB_EPStartXfer+0xcaa>
 8006b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	461a      	mov	r2, r3
 8006b54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b58:	4413      	add	r3, r2
 8006b5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	011a      	lsls	r2, r3, #4
 8006b6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b70:	4413      	add	r3, r2
 8006b72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b80:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	895b      	ldrh	r3, [r3, #10]
 8006b8e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6959      	ldr	r1, [r3, #20]
 8006b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ba8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006bac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006bb0:	6800      	ldr	r0, [r0, #0]
 8006bb2:	f001 f907 	bl	8007dc4 <USB_WritePMA>
          ep->xfer_buff += len;
 8006bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	695a      	ldr	r2, [r3, #20]
 8006bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bc6:	441a      	add	r2, r3
 8006bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6a1a      	ldr	r2, [r3, #32]
 8006be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d90f      	bls.n	8006c10 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6a1a      	ldr	r2, [r3, #32]
 8006bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c00:	1ad2      	subs	r2, r2, r3
 8006c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	621a      	str	r2, [r3, #32]
 8006c0e:	e00e      	b.n	8006c2e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 8295 	beq.w	8007162 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	785b      	ldrb	r3, [r3, #1]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d16d      	bne.n	8006d24 <USB_EPStartXfer+0xe4c>
 8006c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	461a      	mov	r2, r3
 8006c66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c68:	4413      	add	r3, r2
 8006c6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	011a      	lsls	r2, r3, #4
 8006c7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c82:	667b      	str	r3, [r7, #100]	; 0x64
 8006c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d112      	bne.n	8006cb2 <USB_EPStartXfer+0xdda>
 8006c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c9a:	801a      	strh	r2, [r3, #0]
 8006c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cae:	801a      	strh	r2, [r3, #0]
 8006cb0:	e063      	b.n	8006d7a <USB_EPStartXfer+0xea2>
 8006cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb6:	2b3e      	cmp	r3, #62	; 0x3e
 8006cb8:	d817      	bhi.n	8006cea <USB_EPStartXfer+0xe12>
 8006cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cbe:	085b      	lsrs	r3, r3, #1
 8006cc0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d004      	beq.n	8006cda <USB_EPStartXfer+0xe02>
 8006cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	029b      	lsls	r3, r3, #10
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ce6:	801a      	strh	r2, [r3, #0]
 8006ce8:	e047      	b.n	8006d7a <USB_EPStartXfer+0xea2>
 8006cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cee:	095b      	lsrs	r3, r3, #5
 8006cf0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cf8:	f003 031f 	and.w	r3, r3, #31
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d104      	bne.n	8006d0a <USB_EPStartXfer+0xe32>
 8006d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d04:	3b01      	subs	r3, #1
 8006d06:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	029b      	lsls	r3, r3, #10
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d20:	801a      	strh	r2, [r3, #0]
 8006d22:	e02a      	b.n	8006d7a <USB_EPStartXfer+0xea2>
 8006d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	785b      	ldrb	r3, [r3, #1]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d122      	bne.n	8006d7a <USB_EPStartXfer+0xea2>
 8006d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	673b      	str	r3, [r7, #112]	; 0x70
 8006d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	461a      	mov	r2, r3
 8006d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d54:	4413      	add	r3, r2
 8006d56:	673b      	str	r3, [r7, #112]	; 0x70
 8006d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	011a      	lsls	r2, r3, #4
 8006d66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d68:	4413      	add	r3, r2
 8006d6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	891b      	ldrh	r3, [r3, #8]
 8006d86:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6959      	ldr	r1, [r3, #20]
 8006d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006da0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006da4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006da8:	6800      	ldr	r0, [r0, #0]
 8006daa:	f001 f80b 	bl	8007dc4 <USB_WritePMA>
 8006dae:	e1d8      	b.n	8007162 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	785b      	ldrb	r3, [r3, #1]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d178      	bne.n	8006eb2 <USB_EPStartXfer+0xfda>
 8006dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	461a      	mov	r2, r3
 8006de0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006de4:	4413      	add	r3, r2
 8006de6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	011a      	lsls	r2, r3, #4
 8006df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d116      	bne.n	8006e3c <USB_EPStartXfer+0xf64>
 8006e0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e20:	801a      	strh	r2, [r3, #0]
 8006e22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e38:	801a      	strh	r2, [r3, #0]
 8006e3a:	e06b      	b.n	8006f14 <USB_EPStartXfer+0x103c>
 8006e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e40:	2b3e      	cmp	r3, #62	; 0x3e
 8006e42:	d818      	bhi.n	8006e76 <USB_EPStartXfer+0xf9e>
 8006e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e48:	085b      	lsrs	r3, r3, #1
 8006e4a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d004      	beq.n	8006e64 <USB_EPStartXfer+0xf8c>
 8006e5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e5e:	3301      	adds	r3, #1
 8006e60:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e64:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	029b      	lsls	r3, r3, #10
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e72:	801a      	strh	r2, [r3, #0]
 8006e74:	e04e      	b.n	8006f14 <USB_EPStartXfer+0x103c>
 8006e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e7a:	095b      	lsrs	r3, r3, #5
 8006e7c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e84:	f003 031f 	and.w	r3, r3, #31
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d104      	bne.n	8006e96 <USB_EPStartXfer+0xfbe>
 8006e8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e90:	3b01      	subs	r3, #1
 8006e92:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e96:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	029b      	lsls	r3, r3, #10
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006eae:	801a      	strh	r2, [r3, #0]
 8006eb0:	e030      	b.n	8006f14 <USB_EPStartXfer+0x103c>
 8006eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	785b      	ldrb	r3, [r3, #1]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d128      	bne.n	8006f14 <USB_EPStartXfer+0x103c>
 8006ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	011a      	lsls	r2, r3, #4
 8006efa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006efe:	4413      	add	r3, r2
 8006f00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f12:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	891b      	ldrh	r3, [r3, #8]
 8006f20:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6959      	ldr	r1, [r3, #20]
 8006f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f3a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f3e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f42:	6800      	ldr	r0, [r0, #0]
 8006f44:	f000 ff3e 	bl	8007dc4 <USB_WritePMA>
          ep->xfer_buff += len;
 8006f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	695a      	ldr	r2, [r3, #20]
 8006f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f58:	441a      	add	r2, r3
 8006f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6a1a      	ldr	r2, [r3, #32]
 8006f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d90f      	bls.n	8006fa2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6a1a      	ldr	r2, [r3, #32]
 8006f8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f92:	1ad2      	subs	r2, r2, r3
 8006f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	621a      	str	r2, [r3, #32]
 8006fa0:	e00e      	b.n	8006fc0 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006fc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 80cc 	beq.w	8007162 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	785b      	ldrb	r3, [r3, #1]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d178      	bne.n	80070da <USB_EPStartXfer+0x1202>
 8006fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ffa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007004:	b29b      	uxth	r3, r3
 8007006:	461a      	mov	r2, r3
 8007008:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800700c:	4413      	add	r3, r2
 800700e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	011a      	lsls	r2, r3, #4
 8007020:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007024:	4413      	add	r3, r2
 8007026:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800702a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800702e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007032:	2b00      	cmp	r3, #0
 8007034:	d116      	bne.n	8007064 <USB_EPStartXfer+0x118c>
 8007036:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	b29b      	uxth	r3, r3
 800703e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007042:	b29a      	uxth	r2, r3
 8007044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007048:	801a      	strh	r2, [r3, #0]
 800704a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	b29b      	uxth	r3, r3
 8007052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800705a:	b29a      	uxth	r2, r3
 800705c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007060:	801a      	strh	r2, [r3, #0]
 8007062:	e064      	b.n	800712e <USB_EPStartXfer+0x1256>
 8007064:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007068:	2b3e      	cmp	r3, #62	; 0x3e
 800706a:	d818      	bhi.n	800709e <USB_EPStartXfer+0x11c6>
 800706c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007070:	085b      	lsrs	r3, r3, #1
 8007072:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007076:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d004      	beq.n	800708c <USB_EPStartXfer+0x11b4>
 8007082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007086:	3301      	adds	r3, #1
 8007088:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800708c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007090:	b29b      	uxth	r3, r3
 8007092:	029b      	lsls	r3, r3, #10
 8007094:	b29a      	uxth	r2, r3
 8007096:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800709a:	801a      	strh	r2, [r3, #0]
 800709c:	e047      	b.n	800712e <USB_EPStartXfer+0x1256>
 800709e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a2:	095b      	lsrs	r3, r3, #5
 80070a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80070a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ac:	f003 031f 	and.w	r3, r3, #31
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d104      	bne.n	80070be <USB_EPStartXfer+0x11e6>
 80070b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070b8:	3b01      	subs	r3, #1
 80070ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80070be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	029b      	lsls	r3, r3, #10
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070d6:	801a      	strh	r2, [r3, #0]
 80070d8:	e029      	b.n	800712e <USB_EPStartXfer+0x1256>
 80070da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	785b      	ldrb	r3, [r3, #1]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d121      	bne.n	800712e <USB_EPStartXfer+0x1256>
 80070ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	461a      	mov	r2, r3
 80070fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007100:	4413      	add	r3, r2
 8007102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	011a      	lsls	r2, r3, #4
 8007114:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007118:	4413      	add	r3, r2
 800711a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800711e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007122:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007126:	b29a      	uxth	r2, r3
 8007128:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800712c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800712e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007132:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	895b      	ldrh	r3, [r3, #10]
 800713a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800713e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6959      	ldr	r1, [r3, #20]
 800714a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800714e:	b29b      	uxth	r3, r3
 8007150:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007154:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007158:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800715c:	6800      	ldr	r0, [r0, #0]
 800715e:	f000 fe31 	bl	8007dc4 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007166:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007170:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	b29b      	uxth	r3, r3
 8007180:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007184:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800718c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007190:	8013      	strh	r3, [r2, #0]
 8007192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007196:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800719a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800719e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80071a2:	8812      	ldrh	r2, [r2, #0]
 80071a4:	f082 0210 	eor.w	r2, r2, #16
 80071a8:	801a      	strh	r2, [r3, #0]
 80071aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ae:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80071b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071b6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80071ba:	8812      	ldrh	r2, [r2, #0]
 80071bc:	f082 0220 	eor.w	r2, r2, #32
 80071c0:	801a      	strh	r2, [r3, #0]
 80071c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	441a      	add	r2, r3
 80071dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	8013      	strh	r3, [r2, #0]
 80071fa:	f000 bc9f 	b.w	8007b3c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80071fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	7b1b      	ldrb	r3, [r3, #12]
 800720a:	2b00      	cmp	r3, #0
 800720c:	f040 80ae 	bne.w	800736c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	699a      	ldr	r2, [r3, #24]
 800721c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007220:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	429a      	cmp	r2, r3
 800722a:	d917      	bls.n	800725c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800722c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800723c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007240:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	699a      	ldr	r2, [r3, #24]
 8007248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800724c:	1ad2      	subs	r2, r2, r3
 800724e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007252:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	619a      	str	r2, [r3, #24]
 800725a:	e00e      	b.n	800727a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800725c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007260:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800726c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007270:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2200      	movs	r2, #0
 8007278:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800727a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800728c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007296:	b29b      	uxth	r3, r3
 8007298:	461a      	mov	r2, r3
 800729a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800729e:	4413      	add	r3, r2
 80072a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	011a      	lsls	r2, r3, #4
 80072b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072b6:	4413      	add	r3, r2
 80072b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d116      	bne.n	80072f6 <USB_EPStartXfer+0x141e>
 80072c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072da:	801a      	strh	r2, [r3, #0]
 80072dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072f2:	801a      	strh	r2, [r3, #0]
 80072f4:	e3e8      	b.n	8007ac8 <USB_EPStartXfer+0x1bf0>
 80072f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072fa:	2b3e      	cmp	r3, #62	; 0x3e
 80072fc:	d818      	bhi.n	8007330 <USB_EPStartXfer+0x1458>
 80072fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007302:	085b      	lsrs	r3, r3, #1
 8007304:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	d004      	beq.n	800731e <USB_EPStartXfer+0x1446>
 8007314:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007318:	3301      	adds	r3, #1
 800731a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800731e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007322:	b29b      	uxth	r3, r3
 8007324:	029b      	lsls	r3, r3, #10
 8007326:	b29a      	uxth	r2, r3
 8007328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800732c:	801a      	strh	r2, [r3, #0]
 800732e:	e3cb      	b.n	8007ac8 <USB_EPStartXfer+0x1bf0>
 8007330:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007334:	095b      	lsrs	r3, r3, #5
 8007336:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800733a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800733e:	f003 031f 	and.w	r3, r3, #31
 8007342:	2b00      	cmp	r3, #0
 8007344:	d104      	bne.n	8007350 <USB_EPStartXfer+0x1478>
 8007346:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800734a:	3b01      	subs	r3, #1
 800734c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007350:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007354:	b29b      	uxth	r3, r3
 8007356:	029b      	lsls	r3, r3, #10
 8007358:	b29b      	uxth	r3, r3
 800735a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800735e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007362:	b29a      	uxth	r2, r3
 8007364:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007368:	801a      	strh	r2, [r3, #0]
 800736a:	e3ad      	b.n	8007ac8 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800736c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007370:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	78db      	ldrb	r3, [r3, #3]
 8007378:	2b02      	cmp	r3, #2
 800737a:	f040 8200 	bne.w	800777e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800737e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007382:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	785b      	ldrb	r3, [r3, #1]
 800738a:	2b00      	cmp	r3, #0
 800738c:	f040 8091 	bne.w	80074b2 <USB_EPStartXfer+0x15da>
 8007390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007394:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800739e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	461a      	mov	r2, r3
 80073b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073b4:	4413      	add	r3, r2
 80073b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	011a      	lsls	r2, r3, #4
 80073c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073cc:	4413      	add	r3, r2
 80073ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d116      	bne.n	8007414 <USB_EPStartXfer+0x153c>
 80073e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073f8:	801a      	strh	r2, [r3, #0]
 80073fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	b29b      	uxth	r3, r3
 8007402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800740a:	b29a      	uxth	r2, r3
 800740c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007410:	801a      	strh	r2, [r3, #0]
 8007412:	e083      	b.n	800751c <USB_EPStartXfer+0x1644>
 8007414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007418:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	2b3e      	cmp	r3, #62	; 0x3e
 8007422:	d820      	bhi.n	8007466 <USB_EPStartXfer+0x158e>
 8007424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007428:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	085b      	lsrs	r3, r3, #1
 8007432:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800743a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d004      	beq.n	8007454 <USB_EPStartXfer+0x157c>
 800744a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800744e:	3301      	adds	r3, #1
 8007450:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007458:	b29b      	uxth	r3, r3
 800745a:	029b      	lsls	r3, r3, #10
 800745c:	b29a      	uxth	r2, r3
 800745e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007462:	801a      	strh	r2, [r3, #0]
 8007464:	e05a      	b.n	800751c <USB_EPStartXfer+0x1644>
 8007466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	095b      	lsrs	r3, r3, #5
 8007474:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	f003 031f 	and.w	r3, r3, #31
 8007488:	2b00      	cmp	r3, #0
 800748a:	d104      	bne.n	8007496 <USB_EPStartXfer+0x15be>
 800748c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007490:	3b01      	subs	r3, #1
 8007492:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800749a:	b29b      	uxth	r3, r3
 800749c:	029b      	lsls	r3, r3, #10
 800749e:	b29b      	uxth	r3, r3
 80074a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074ae:	801a      	strh	r2, [r3, #0]
 80074b0:	e034      	b.n	800751c <USB_EPStartXfer+0x1644>
 80074b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	785b      	ldrb	r3, [r3, #1]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d12c      	bne.n	800751c <USB_EPStartXfer+0x1644>
 80074c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80074d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074de:	b29b      	uxth	r3, r3
 80074e0:	461a      	mov	r2, r3
 80074e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074e6:	4413      	add	r3, r2
 80074e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80074ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	011a      	lsls	r2, r3, #4
 80074fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074fe:	4413      	add	r3, r2
 8007500:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007504:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	b29a      	uxth	r2, r3
 8007516:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800751a:	801a      	strh	r2, [r3, #0]
 800751c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007520:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800752a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800752e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	785b      	ldrb	r3, [r3, #1]
 8007536:	2b00      	cmp	r3, #0
 8007538:	f040 8091 	bne.w	800765e <USB_EPStartXfer+0x1786>
 800753c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007540:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800754a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007558:	b29b      	uxth	r3, r3
 800755a:	461a      	mov	r2, r3
 800755c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007560:	4413      	add	r3, r2
 8007562:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	011a      	lsls	r2, r3, #4
 8007574:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007578:	4413      	add	r3, r2
 800757a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800757e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007586:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d116      	bne.n	80075c0 <USB_EPStartXfer+0x16e8>
 8007592:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	b29b      	uxth	r3, r3
 800759a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800759e:	b29a      	uxth	r2, r3
 80075a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075a4:	801a      	strh	r2, [r3, #0]
 80075a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075bc:	801a      	strh	r2, [r3, #0]
 80075be:	e07c      	b.n	80076ba <USB_EPStartXfer+0x17e2>
 80075c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	2b3e      	cmp	r3, #62	; 0x3e
 80075ce:	d820      	bhi.n	8007612 <USB_EPStartXfer+0x173a>
 80075d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	085b      	lsrs	r3, r3, #1
 80075de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80075e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d004      	beq.n	8007600 <USB_EPStartXfer+0x1728>
 80075f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80075fa:	3301      	adds	r3, #1
 80075fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007600:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007604:	b29b      	uxth	r3, r3
 8007606:	029b      	lsls	r3, r3, #10
 8007608:	b29a      	uxth	r2, r3
 800760a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800760e:	801a      	strh	r2, [r3, #0]
 8007610:	e053      	b.n	80076ba <USB_EPStartXfer+0x17e2>
 8007612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007616:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	095b      	lsrs	r3, r3, #5
 8007620:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007628:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	f003 031f 	and.w	r3, r3, #31
 8007634:	2b00      	cmp	r3, #0
 8007636:	d104      	bne.n	8007642 <USB_EPStartXfer+0x176a>
 8007638:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800763c:	3b01      	subs	r3, #1
 800763e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007642:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007646:	b29b      	uxth	r3, r3
 8007648:	029b      	lsls	r3, r3, #10
 800764a:	b29b      	uxth	r3, r3
 800764c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007654:	b29a      	uxth	r2, r3
 8007656:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800765a:	801a      	strh	r2, [r3, #0]
 800765c:	e02d      	b.n	80076ba <USB_EPStartXfer+0x17e2>
 800765e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	785b      	ldrb	r3, [r3, #1]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d125      	bne.n	80076ba <USB_EPStartXfer+0x17e2>
 800766e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007672:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800767c:	b29b      	uxth	r3, r3
 800767e:	461a      	mov	r2, r3
 8007680:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007684:	4413      	add	r3, r2
 8007686:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800768a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800768e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	011a      	lsls	r2, r3, #4
 8007698:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800769c:	4413      	add	r3, r2
 800769e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076b8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80076ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f000 81fe 	beq.w	8007ac8 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80076cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4413      	add	r3, r2
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80076ec:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80076f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d005      	beq.n	8007704 <USB_EPStartXfer+0x182c>
 80076f8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80076fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10d      	bne.n	8007720 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007704:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800770c:	2b00      	cmp	r3, #0
 800770e:	f040 81db 	bne.w	8007ac8 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007712:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800771a:	2b00      	cmp	r3, #0
 800771c:	f040 81d4 	bne.w	8007ac8 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007724:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800772e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4413      	add	r3, r2
 800773a:	881b      	ldrh	r3, [r3, #0]
 800773c:	b29b      	uxth	r3, r3
 800773e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007746:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800774a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800774e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	441a      	add	r2, r3
 8007764:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800776c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007774:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007778:	b29b      	uxth	r3, r3
 800777a:	8013      	strh	r3, [r2, #0]
 800777c:	e1a4      	b.n	8007ac8 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800777e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	78db      	ldrb	r3, [r3, #3]
 800778a:	2b01      	cmp	r3, #1
 800778c:	f040 819a 	bne.w	8007ac4 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007794:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	699a      	ldr	r2, [r3, #24]
 800779c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d917      	bls.n	80077dc <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80077ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80077bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	699a      	ldr	r2, [r3, #24]
 80077c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077cc:	1ad2      	subs	r2, r2, r3
 80077ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	619a      	str	r2, [r3, #24]
 80077da:	e00e      	b.n	80077fa <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80077dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80077ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2200      	movs	r2, #0
 80077f8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80077fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	785b      	ldrb	r3, [r3, #1]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d178      	bne.n	80078fc <USB_EPStartXfer+0x1a24>
 800780a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800780e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007826:	b29b      	uxth	r3, r3
 8007828:	461a      	mov	r2, r3
 800782a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800782e:	4413      	add	r3, r2
 8007830:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007838:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	011a      	lsls	r2, r3, #4
 8007842:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007846:	4413      	add	r3, r2
 8007848:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800784c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007854:	2b00      	cmp	r3, #0
 8007856:	d116      	bne.n	8007886 <USB_EPStartXfer+0x19ae>
 8007858:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	b29b      	uxth	r3, r3
 8007860:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007864:	b29a      	uxth	r2, r3
 8007866:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800786a:	801a      	strh	r2, [r3, #0]
 800786c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	b29b      	uxth	r3, r3
 8007874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800787c:	b29a      	uxth	r2, r3
 800787e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007882:	801a      	strh	r2, [r3, #0]
 8007884:	e06b      	b.n	800795e <USB_EPStartXfer+0x1a86>
 8007886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800788a:	2b3e      	cmp	r3, #62	; 0x3e
 800788c:	d818      	bhi.n	80078c0 <USB_EPStartXfer+0x19e8>
 800788e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007892:	085b      	lsrs	r3, r3, #1
 8007894:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d004      	beq.n	80078ae <USB_EPStartXfer+0x19d6>
 80078a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078a8:	3301      	adds	r3, #1
 80078aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80078ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	029b      	lsls	r3, r3, #10
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078bc:	801a      	strh	r2, [r3, #0]
 80078be:	e04e      	b.n	800795e <USB_EPStartXfer+0x1a86>
 80078c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078c4:	095b      	lsrs	r3, r3, #5
 80078c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80078ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ce:	f003 031f 	and.w	r3, r3, #31
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d104      	bne.n	80078e0 <USB_EPStartXfer+0x1a08>
 80078d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078da:	3b01      	subs	r3, #1
 80078dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80078e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	029b      	lsls	r3, r3, #10
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078f8:	801a      	strh	r2, [r3, #0]
 80078fa:	e030      	b.n	800795e <USB_EPStartXfer+0x1a86>
 80078fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007900:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	785b      	ldrb	r3, [r3, #1]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d128      	bne.n	800795e <USB_EPStartXfer+0x1a86>
 800790c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007910:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800791a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800791e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007928:	b29b      	uxth	r3, r3
 800792a:	461a      	mov	r2, r3
 800792c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007930:	4413      	add	r3, r2
 8007932:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800793a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	011a      	lsls	r2, r3, #4
 8007944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007948:	4413      	add	r3, r2
 800794a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800794e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007952:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007956:	b29a      	uxth	r2, r3
 8007958:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800795c:	801a      	strh	r2, [r3, #0]
 800795e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007962:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800796c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007970:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	785b      	ldrb	r3, [r3, #1]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d178      	bne.n	8007a6e <USB_EPStartXfer+0x1b96>
 800797c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007980:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800798a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800798e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007998:	b29b      	uxth	r3, r3
 800799a:	461a      	mov	r2, r3
 800799c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079a0:	4413      	add	r3, r2
 80079a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80079a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	011a      	lsls	r2, r3, #4
 80079b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079b8:	4413      	add	r3, r2
 80079ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d116      	bne.n	80079f8 <USB_EPStartXfer+0x1b20>
 80079ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079dc:	801a      	strh	r2, [r3, #0]
 80079de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079e2:	881b      	ldrh	r3, [r3, #0]
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079f4:	801a      	strh	r2, [r3, #0]
 80079f6:	e067      	b.n	8007ac8 <USB_EPStartXfer+0x1bf0>
 80079f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079fc:	2b3e      	cmp	r3, #62	; 0x3e
 80079fe:	d818      	bhi.n	8007a32 <USB_EPStartXfer+0x1b5a>
 8007a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a04:	085b      	lsrs	r3, r3, #1
 8007a06:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d004      	beq.n	8007a20 <USB_EPStartXfer+0x1b48>
 8007a16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	029b      	lsls	r3, r3, #10
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a2e:	801a      	strh	r2, [r3, #0]
 8007a30:	e04a      	b.n	8007ac8 <USB_EPStartXfer+0x1bf0>
 8007a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a36:	095b      	lsrs	r3, r3, #5
 8007a38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a40:	f003 031f 	and.w	r3, r3, #31
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d104      	bne.n	8007a52 <USB_EPStartXfer+0x1b7a>
 8007a48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	029b      	lsls	r3, r3, #10
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a6a:	801a      	strh	r2, [r3, #0]
 8007a6c:	e02c      	b.n	8007ac8 <USB_EPStartXfer+0x1bf0>
 8007a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	785b      	ldrb	r3, [r3, #1]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d124      	bne.n	8007ac8 <USB_EPStartXfer+0x1bf0>
 8007a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a94:	4413      	add	r3, r2
 8007a96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	011a      	lsls	r2, r3, #4
 8007aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aac:	4413      	add	r3, r2
 8007aae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ab2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ac0:	801a      	strh	r2, [r3, #0]
 8007ac2:	e001      	b.n	8007ac8 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e03a      	b.n	8007b3e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007acc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aee:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007af2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007af6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007afa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007afe:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007b02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b06:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	441a      	add	r2, r3
 8007b24:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	785b      	ldrb	r3, [r3, #1]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d020      	beq.n	8007b9c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b70:	81bb      	strh	r3, [r7, #12]
 8007b72:	89bb      	ldrh	r3, [r7, #12]
 8007b74:	f083 0310 	eor.w	r3, r3, #16
 8007b78:	81bb      	strh	r3, [r7, #12]
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	441a      	add	r2, r3
 8007b84:	89bb      	ldrh	r3, [r7, #12]
 8007b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	8013      	strh	r3, [r2, #0]
 8007b9a:	e01f      	b.n	8007bdc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	881b      	ldrh	r3, [r3, #0]
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb2:	81fb      	strh	r3, [r7, #14]
 8007bb4:	89fb      	ldrh	r3, [r7, #14]
 8007bb6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007bba:	81fb      	strh	r3, [r7, #14]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	441a      	add	r2, r3
 8007bc6:	89fb      	ldrh	r3, [r7, #14]
 8007bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bc80      	pop	{r7}
 8007be6:	4770      	bx	lr

08007be8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b087      	sub	sp, #28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	7b1b      	ldrb	r3, [r3, #12]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f040 809d 	bne.w	8007d36 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	785b      	ldrb	r3, [r3, #1]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d04c      	beq.n	8007c9e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	881b      	ldrh	r3, [r3, #0]
 8007c10:	823b      	strh	r3, [r7, #16]
 8007c12:	8a3b      	ldrh	r3, [r7, #16]
 8007c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d01b      	beq.n	8007c54 <USB_EPClearStall+0x6c>
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c32:	81fb      	strh	r3, [r7, #14]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	441a      	add	r2, r3
 8007c3e:	89fb      	ldrh	r3, [r7, #14]
 8007c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	78db      	ldrb	r3, [r3, #3]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d06c      	beq.n	8007d36 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	881b      	ldrh	r3, [r3, #0]
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c72:	81bb      	strh	r3, [r7, #12]
 8007c74:	89bb      	ldrh	r3, [r7, #12]
 8007c76:	f083 0320 	eor.w	r3, r3, #32
 8007c7a:	81bb      	strh	r3, [r7, #12]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	441a      	add	r2, r3
 8007c86:	89bb      	ldrh	r3, [r7, #12]
 8007c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	8013      	strh	r3, [r2, #0]
 8007c9c:	e04b      	b.n	8007d36 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	82fb      	strh	r3, [r7, #22]
 8007cac:	8afb      	ldrh	r3, [r7, #22]
 8007cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d01b      	beq.n	8007cee <USB_EPClearStall+0x106>
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	881b      	ldrh	r3, [r3, #0]
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ccc:	82bb      	strh	r3, [r7, #20]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	441a      	add	r2, r3
 8007cd8:	8abb      	ldrh	r3, [r7, #20]
 8007cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ce2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	881b      	ldrh	r3, [r3, #0]
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d04:	827b      	strh	r3, [r7, #18]
 8007d06:	8a7b      	ldrh	r3, [r7, #18]
 8007d08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d0c:	827b      	strh	r3, [r7, #18]
 8007d0e:	8a7b      	ldrh	r3, [r7, #18]
 8007d10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d14:	827b      	strh	r3, [r7, #18]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	441a      	add	r2, r3
 8007d20:	8a7b      	ldrh	r3, [r7, #18]
 8007d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	371c      	adds	r7, #28
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bc80      	pop	{r7}
 8007d40:	4770      	bx	lr

08007d42 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007d42:	b480      	push	{r7}
 8007d44:	b083      	sub	sp, #12
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007d4e:	78fb      	ldrb	r3, [r7, #3]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d103      	bne.n	8007d5c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2280      	movs	r2, #128	; 0x80
 8007d58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bc80      	pop	{r7}
 8007d66:	4770      	bx	lr

08007d68 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bc80      	pop	{r7}
 8007d7a:	4770      	bx	lr

08007d7c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bc80      	pop	{r7}
 8007d8e:	4770      	bx	lr

08007d90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007da2:	68fb      	ldr	r3, [r7, #12]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bc80      	pop	{r7}
 8007dac:	4770      	bx	lr

08007dae <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b083      	sub	sp, #12
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bc80      	pop	{r7}
 8007dc2:	4770      	bx	lr

08007dc4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b08d      	sub	sp, #52	; 0x34
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	4611      	mov	r1, r2
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	80fb      	strh	r3, [r7, #6]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007dda:	88bb      	ldrh	r3, [r7, #4]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	085b      	lsrs	r3, r3, #1
 8007de0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007dea:	88fb      	ldrh	r3, [r7, #6]
 8007dec:	005a      	lsls	r2, r3, #1
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007df6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dfc:	e01e      	b.n	8007e3c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	3301      	adds	r3, #1
 8007e08:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	021b      	lsls	r3, r3, #8
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	461a      	mov	r2, r3
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e22:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e26:	3302      	adds	r3, #2
 8007e28:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2c:	3302      	adds	r3, #2
 8007e2e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	3301      	adds	r3, #1
 8007e34:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1dd      	bne.n	8007dfe <USB_WritePMA+0x3a>
  }
}
 8007e42:	bf00      	nop
 8007e44:	bf00      	nop
 8007e46:	3734      	adds	r7, #52	; 0x34
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bc80      	pop	{r7}
 8007e4c:	4770      	bx	lr

08007e4e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b08b      	sub	sp, #44	; 0x2c
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	60f8      	str	r0, [r7, #12]
 8007e56:	60b9      	str	r1, [r7, #8]
 8007e58:	4611      	mov	r1, r2
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	80fb      	strh	r3, [r7, #6]
 8007e60:	4613      	mov	r3, r2
 8007e62:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007e64:	88bb      	ldrh	r3, [r7, #4]
 8007e66:	085b      	lsrs	r3, r3, #1
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e74:	88fb      	ldrh	r3, [r7, #6]
 8007e76:	005a      	lsls	r2, r3, #1
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e80:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	627b      	str	r3, [r7, #36]	; 0x24
 8007e86:	e01b      	b.n	8007ec0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	3302      	adds	r3, #2
 8007e94:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	0a1b      	lsrs	r3, r3, #8
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	3302      	adds	r3, #2
 8007eb8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1e0      	bne.n	8007e88 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007ec6:	88bb      	ldrh	r3, [r7, #4]
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d007      	beq.n	8007ee2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	701a      	strb	r2, [r3, #0]
  }
}
 8007ee2:	bf00      	nop
 8007ee4:	372c      	adds	r7, #44	; 0x2c
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bc80      	pop	{r7}
 8007eea:	4770      	bx	lr

08007eec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	7c1b      	ldrb	r3, [r3, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d115      	bne.n	8007f30 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f08:	2202      	movs	r2, #2
 8007f0a:	2181      	movs	r1, #129	; 0x81
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f001 fe4c 	bl	8009baa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f1c:	2202      	movs	r2, #2
 8007f1e:	2101      	movs	r1, #1
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f001 fe42 	bl	8009baa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007f2e:	e012      	b.n	8007f56 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f30:	2340      	movs	r3, #64	; 0x40
 8007f32:	2202      	movs	r2, #2
 8007f34:	2181      	movs	r1, #129	; 0x81
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f001 fe37 	bl	8009baa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f42:	2340      	movs	r3, #64	; 0x40
 8007f44:	2202      	movs	r2, #2
 8007f46:	2101      	movs	r1, #1
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f001 fe2e 	bl	8009baa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f56:	2308      	movs	r3, #8
 8007f58:	2203      	movs	r2, #3
 8007f5a:	2182      	movs	r1, #130	; 0x82
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f001 fe24 	bl	8009baa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007f6c:	f001 ff44 	bl	8009df8 <USBD_static_malloc>
 8007f70:	4602      	mov	r2, r0
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d102      	bne.n	8007f88 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007f82:	2301      	movs	r3, #1
 8007f84:	73fb      	strb	r3, [r7, #15]
 8007f86:	e026      	b.n	8007fd6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f8e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	7c1b      	ldrb	r3, [r3, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d109      	bne.n	8007fc6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f001 fee4 	bl	8009d8c <USBD_LL_PrepareReceive>
 8007fc4:	e007      	b.n	8007fd6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fcc:	2340      	movs	r3, #64	; 0x40
 8007fce:	2101      	movs	r1, #1
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 fedb 	bl	8009d8c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007fec:	2300      	movs	r3, #0
 8007fee:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007ff0:	2181      	movs	r1, #129	; 0x81
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f001 fdff 	bl	8009bf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007ffe:	2101      	movs	r1, #1
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f001 fdf8 	bl	8009bf6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800800e:	2182      	movs	r1, #130	; 0x82
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f001 fdf0 	bl	8009bf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00e      	beq.n	8008044 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008036:	4618      	mov	r0, r3
 8008038:	f001 feea 	bl	8009e10 <USBD_static_free>
    pdev->pClassData = NULL;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008044:	7bfb      	ldrb	r3, [r7, #15]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b086      	sub	sp, #24
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800805e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008064:	2300      	movs	r3, #0
 8008066:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008074:	2b00      	cmp	r3, #0
 8008076:	d039      	beq.n	80080ec <USBD_CDC_Setup+0x9e>
 8008078:	2b20      	cmp	r3, #32
 800807a:	d17f      	bne.n	800817c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	88db      	ldrh	r3, [r3, #6]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d029      	beq.n	80080d8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	b25b      	sxtb	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	da11      	bge.n	80080b2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	683a      	ldr	r2, [r7, #0]
 8008098:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800809a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	88d2      	ldrh	r2, [r2, #6]
 80080a0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80080a2:	6939      	ldr	r1, [r7, #16]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	88db      	ldrh	r3, [r3, #6]
 80080a8:	461a      	mov	r2, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f001 f9d9 	bl	8009462 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80080b0:	e06b      	b.n	800818a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	785a      	ldrb	r2, [r3, #1]
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	88db      	ldrh	r3, [r3, #6]
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80080c8:	6939      	ldr	r1, [r7, #16]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	88db      	ldrh	r3, [r3, #6]
 80080ce:	461a      	mov	r2, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f001 f9f4 	bl	80094be <USBD_CtlPrepareRx>
      break;
 80080d6:	e058      	b.n	800818a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	683a      	ldr	r2, [r7, #0]
 80080e2:	7850      	ldrb	r0, [r2, #1]
 80080e4:	2200      	movs	r2, #0
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	4798      	blx	r3
      break;
 80080ea:	e04e      	b.n	800818a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	785b      	ldrb	r3, [r3, #1]
 80080f0:	2b0b      	cmp	r3, #11
 80080f2:	d02e      	beq.n	8008152 <USBD_CDC_Setup+0x104>
 80080f4:	2b0b      	cmp	r3, #11
 80080f6:	dc38      	bgt.n	800816a <USBD_CDC_Setup+0x11c>
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <USBD_CDC_Setup+0xb4>
 80080fc:	2b0a      	cmp	r3, #10
 80080fe:	d014      	beq.n	800812a <USBD_CDC_Setup+0xdc>
 8008100:	e033      	b.n	800816a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008108:	2b03      	cmp	r3, #3
 800810a:	d107      	bne.n	800811c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800810c:	f107 030c 	add.w	r3, r7, #12
 8008110:	2202      	movs	r2, #2
 8008112:	4619      	mov	r1, r3
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f001 f9a4 	bl	8009462 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800811a:	e02e      	b.n	800817a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f001 f935 	bl	800938e <USBD_CtlError>
            ret = USBD_FAIL;
 8008124:	2302      	movs	r3, #2
 8008126:	75fb      	strb	r3, [r7, #23]
          break;
 8008128:	e027      	b.n	800817a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008130:	2b03      	cmp	r3, #3
 8008132:	d107      	bne.n	8008144 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008134:	f107 030f 	add.w	r3, r7, #15
 8008138:	2201      	movs	r2, #1
 800813a:	4619      	mov	r1, r3
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f001 f990 	bl	8009462 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008142:	e01a      	b.n	800817a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008144:	6839      	ldr	r1, [r7, #0]
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f001 f921 	bl	800938e <USBD_CtlError>
            ret = USBD_FAIL;
 800814c:	2302      	movs	r3, #2
 800814e:	75fb      	strb	r3, [r7, #23]
          break;
 8008150:	e013      	b.n	800817a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008158:	2b03      	cmp	r3, #3
 800815a:	d00d      	beq.n	8008178 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f001 f915 	bl	800938e <USBD_CtlError>
            ret = USBD_FAIL;
 8008164:	2302      	movs	r3, #2
 8008166:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008168:	e006      	b.n	8008178 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f001 f90e 	bl	800938e <USBD_CtlError>
          ret = USBD_FAIL;
 8008172:	2302      	movs	r3, #2
 8008174:	75fb      	strb	r3, [r7, #23]
          break;
 8008176:	e000      	b.n	800817a <USBD_CDC_Setup+0x12c>
          break;
 8008178:	bf00      	nop
      }
      break;
 800817a:	e006      	b.n	800818a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f001 f905 	bl	800938e <USBD_CtlError>
      ret = USBD_FAIL;
 8008184:	2302      	movs	r3, #2
 8008186:	75fb      	strb	r3, [r7, #23]
      break;
 8008188:	bf00      	nop
  }

  return ret;
 800818a:	7dfb      	ldrb	r3, [r7, #23]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3718      	adds	r7, #24
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	460b      	mov	r3, r1
 800819e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081ae:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d03a      	beq.n	8008230 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80081ba:	78fa      	ldrb	r2, [r7, #3]
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	4613      	mov	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	440b      	add	r3, r1
 80081c8:	331c      	adds	r3, #28
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d029      	beq.n	8008224 <USBD_CDC_DataIn+0x90>
 80081d0:	78fa      	ldrb	r2, [r7, #3]
 80081d2:	6879      	ldr	r1, [r7, #4]
 80081d4:	4613      	mov	r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4413      	add	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	440b      	add	r3, r1
 80081de:	331c      	adds	r3, #28
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	78f9      	ldrb	r1, [r7, #3]
 80081e4:	68b8      	ldr	r0, [r7, #8]
 80081e6:	460b      	mov	r3, r1
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	440b      	add	r3, r1
 80081ec:	00db      	lsls	r3, r3, #3
 80081ee:	4403      	add	r3, r0
 80081f0:	3338      	adds	r3, #56	; 0x38
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80081f8:	fb01 f303 	mul.w	r3, r1, r3
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d110      	bne.n	8008224 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008202:	78fa      	ldrb	r2, [r7, #3]
 8008204:	6879      	ldr	r1, [r7, #4]
 8008206:	4613      	mov	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	440b      	add	r3, r1
 8008210:	331c      	adds	r3, #28
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008216:	78f9      	ldrb	r1, [r7, #3]
 8008218:	2300      	movs	r3, #0
 800821a:	2200      	movs	r2, #0
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f001 fd92 	bl	8009d46 <USBD_LL_Transmit>
 8008222:	e003      	b.n	800822c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800822c:	2300      	movs	r3, #0
 800822e:	e000      	b.n	8008232 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008230:	2302      	movs	r3, #2
  }
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b084      	sub	sp, #16
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	460b      	mov	r3, r1
 8008244:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800824e:	78fb      	ldrb	r3, [r7, #3]
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f001 fdbd 	bl	8009dd2 <USBD_LL_GetRxDataSize>
 8008258:	4602      	mov	r2, r0
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00d      	beq.n	8008286 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800827e:	4611      	mov	r1, r2
 8008280:	4798      	blx	r3

    return USBD_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	e000      	b.n	8008288 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008286:	2302      	movs	r3, #2
  }
}
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800829e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d015      	beq.n	80082d6 <USBD_CDC_EP0_RxReady+0x46>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80082b0:	2bff      	cmp	r3, #255	; 0xff
 80082b2:	d010      	beq.n	80082d6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80082c2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80082ca:	b292      	uxth	r2, r2
 80082cc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	22ff      	movs	r2, #255	; 0xff
 80082d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2243      	movs	r2, #67	; 0x43
 80082ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80082ee:	4b03      	ldr	r3, [pc, #12]	; (80082fc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bc80      	pop	{r7}
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	2000009c 	.word	0x2000009c

08008300 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2243      	movs	r2, #67	; 0x43
 800830c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800830e:	4b03      	ldr	r3, [pc, #12]	; (800831c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008310:	4618      	mov	r0, r3
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	bc80      	pop	{r7}
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	20000058 	.word	0x20000058

08008320 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2243      	movs	r2, #67	; 0x43
 800832c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800832e:	4b03      	ldr	r3, [pc, #12]	; (800833c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008330:	4618      	mov	r0, r3
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	bc80      	pop	{r7}
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	200000e0 	.word	0x200000e0

08008340 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	220a      	movs	r2, #10
 800834c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800834e:	4b03      	ldr	r3, [pc, #12]	; (800835c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008350:	4618      	mov	r0, r3
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	bc80      	pop	{r7}
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	20000014 	.word	0x20000014

08008360 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800836a:	2302      	movs	r3, #2
 800836c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d005      	beq.n	8008380 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800837c:	2300      	movs	r3, #0
 800837e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008380:	7bfb      	ldrb	r3, [r7, #15]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	bc80      	pop	{r7}
 800838a:	4770      	bx	lr

0800838c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800838c:	b480      	push	{r7}
 800838e:	b087      	sub	sp, #28
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	4613      	mov	r3, r2
 8008398:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80083aa:	88fa      	ldrh	r2, [r7, #6]
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	371c      	adds	r7, #28
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr

080083be <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80083be:	b480      	push	{r7}
 80083c0:	b085      	sub	sp, #20
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ce:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	bc80      	pop	{r7}
 80083e2:	4770      	bx	lr

080083e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d017      	beq.n	800842e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	7c1b      	ldrb	r3, [r3, #16]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d109      	bne.n	800841a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800840c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008410:	2101      	movs	r1, #1
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f001 fcba 	bl	8009d8c <USBD_LL_PrepareReceive>
 8008418:	e007      	b.n	800842a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008420:	2340      	movs	r3, #64	; 0x40
 8008422:	2101      	movs	r1, #1
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f001 fcb1 	bl	8009d8c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	e000      	b.n	8008430 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800842e:	2302      	movs	r3, #2
  }
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	4613      	mov	r3, r2
 8008444:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d101      	bne.n	8008450 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800844c:	2302      	movs	r3, #2
 800844e:	e01a      	b.n	8008486 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d003      	beq.n	8008470 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	68ba      	ldr	r2, [r7, #8]
 800846c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	79fa      	ldrb	r2, [r7, #7]
 800847c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f001 fb1e 	bl	8009ac0 <USBD_LL_Init>

  return USBD_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800848e:	b480      	push	{r7}
 8008490:	b085      	sub	sp, #20
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d006      	beq.n	80084b0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	683a      	ldr	r2, [r7, #0]
 80084a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80084aa:	2300      	movs	r3, #0
 80084ac:	73fb      	strb	r3, [r7, #15]
 80084ae:	e001      	b.n	80084b4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80084b0:	2302      	movs	r3, #2
 80084b2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80084b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bc80      	pop	{r7}
 80084be:	4770      	bx	lr

080084c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f001 fb53 	bl	8009b74 <USBD_LL_Start>

  return USBD_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bc80      	pop	{r7}
 80084ea:	4770      	bx	lr

080084ec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80084f8:	2302      	movs	r3, #2
 80084fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00c      	beq.n	8008520 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	78fa      	ldrb	r2, [r7, #3]
 8008510:	4611      	mov	r1, r2
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	4798      	blx	r3
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008520:	7bfb      	ldrb	r3, [r7, #15]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b082      	sub	sp, #8
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	460b      	mov	r3, r1
 8008534:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	78fa      	ldrb	r2, [r7, #3]
 8008540:	4611      	mov	r1, r2
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	4798      	blx	r3

  return USBD_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008560:	6839      	ldr	r1, [r7, #0]
 8008562:	4618      	mov	r0, r3
 8008564:	f000 fed7 	bl	8009316 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008576:	461a      	mov	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008584:	f003 031f 	and.w	r3, r3, #31
 8008588:	2b02      	cmp	r3, #2
 800858a:	d016      	beq.n	80085ba <USBD_LL_SetupStage+0x6a>
 800858c:	2b02      	cmp	r3, #2
 800858e:	d81c      	bhi.n	80085ca <USBD_LL_SetupStage+0x7a>
 8008590:	2b00      	cmp	r3, #0
 8008592:	d002      	beq.n	800859a <USBD_LL_SetupStage+0x4a>
 8008594:	2b01      	cmp	r3, #1
 8008596:	d008      	beq.n	80085aa <USBD_LL_SetupStage+0x5a>
 8008598:	e017      	b.n	80085ca <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f9ca 	bl	800893c <USBD_StdDevReq>
      break;
 80085a8:	e01a      	b.n	80085e0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fa2c 	bl	8008a10 <USBD_StdItfReq>
      break;
 80085b8:	e012      	b.n	80085e0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fa6c 	bl	8008aa0 <USBD_StdEPReq>
      break;
 80085c8:	e00a      	b.n	80085e0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80085d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	4619      	mov	r1, r3
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f001 fb2b 	bl	8009c34 <USBD_LL_StallEP>
      break;
 80085de:	bf00      	nop
  }

  return USBD_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b086      	sub	sp, #24
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	460b      	mov	r3, r1
 80085f4:	607a      	str	r2, [r7, #4]
 80085f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80085f8:	7afb      	ldrb	r3, [r7, #11]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d14b      	bne.n	8008696 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008604:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800860c:	2b03      	cmp	r3, #3
 800860e:	d134      	bne.n	800867a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	68da      	ldr	r2, [r3, #12]
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	429a      	cmp	r2, r3
 800861a:	d919      	bls.n	8008650 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	68da      	ldr	r2, [r3, #12]
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	1ad2      	subs	r2, r2, r3
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	68da      	ldr	r2, [r3, #12]
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008632:	429a      	cmp	r2, r3
 8008634:	d203      	bcs.n	800863e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800863a:	b29b      	uxth	r3, r3
 800863c:	e002      	b.n	8008644 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008642:	b29b      	uxth	r3, r3
 8008644:	461a      	mov	r2, r3
 8008646:	6879      	ldr	r1, [r7, #4]
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 ff56 	bl	80094fa <USBD_CtlContinueRx>
 800864e:	e038      	b.n	80086c2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00a      	beq.n	8008672 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008662:	2b03      	cmp	r3, #3
 8008664:	d105      	bne.n	8008672 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 ff53 	bl	800951e <USBD_CtlSendStatus>
 8008678:	e023      	b.n	80086c2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008680:	2b05      	cmp	r3, #5
 8008682:	d11e      	bne.n	80086c2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2200      	movs	r2, #0
 8008688:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800868c:	2100      	movs	r1, #0
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f001 fad0 	bl	8009c34 <USBD_LL_StallEP>
 8008694:	e015      	b.n	80086c2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00d      	beq.n	80086be <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80086a8:	2b03      	cmp	r3, #3
 80086aa:	d108      	bne.n	80086be <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	7afa      	ldrb	r2, [r7, #11]
 80086b6:	4611      	mov	r1, r2
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	4798      	blx	r3
 80086bc:	e001      	b.n	80086c2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80086be:	2302      	movs	r3, #2
 80086c0:	e000      	b.n	80086c4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3718      	adds	r7, #24
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	460b      	mov	r3, r1
 80086d6:	607a      	str	r2, [r7, #4]
 80086d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80086da:	7afb      	ldrb	r3, [r7, #11]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d17f      	bne.n	80087e0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3314      	adds	r3, #20
 80086e4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d15c      	bne.n	80087aa <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	68da      	ldr	r2, [r3, #12]
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d915      	bls.n	8008728 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	68da      	ldr	r2, [r3, #12]
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	1ad2      	subs	r2, r2, r3
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	b29b      	uxth	r3, r3
 8008710:	461a      	mov	r2, r3
 8008712:	6879      	ldr	r1, [r7, #4]
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f000 fec0 	bl	800949a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800871a:	2300      	movs	r3, #0
 800871c:	2200      	movs	r2, #0
 800871e:	2100      	movs	r1, #0
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f001 fb33 	bl	8009d8c <USBD_LL_PrepareReceive>
 8008726:	e04e      	b.n	80087c6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	6912      	ldr	r2, [r2, #16]
 8008730:	fbb3 f1f2 	udiv	r1, r3, r2
 8008734:	fb01 f202 	mul.w	r2, r1, r2
 8008738:	1a9b      	subs	r3, r3, r2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d11c      	bne.n	8008778 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	689a      	ldr	r2, [r3, #8]
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008746:	429a      	cmp	r2, r3
 8008748:	d316      	bcc.n	8008778 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	689a      	ldr	r2, [r3, #8]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008754:	429a      	cmp	r2, r3
 8008756:	d20f      	bcs.n	8008778 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008758:	2200      	movs	r2, #0
 800875a:	2100      	movs	r1, #0
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f000 fe9c 	bl	800949a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800876a:	2300      	movs	r3, #0
 800876c:	2200      	movs	r2, #0
 800876e:	2100      	movs	r1, #0
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f001 fb0b 	bl	8009d8c <USBD_LL_PrepareReceive>
 8008776:	e026      	b.n	80087c6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00a      	beq.n	800879a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800878a:	2b03      	cmp	r3, #3
 800878c:	d105      	bne.n	800879a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800879a:	2180      	movs	r1, #128	; 0x80
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f001 fa49 	bl	8009c34 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f000 fece 	bl	8009544 <USBD_CtlReceiveStatus>
 80087a8:	e00d      	b.n	80087c6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	d004      	beq.n	80087be <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d103      	bne.n	80087c6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80087be:	2180      	movs	r1, #128	; 0x80
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f001 fa37 	bl	8009c34 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d11d      	bne.n	800880c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f7ff fe81 	bl	80084d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80087de:	e015      	b.n	800880c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087e6:	695b      	ldr	r3, [r3, #20]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00d      	beq.n	8008808 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	d108      	bne.n	8008808 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	7afa      	ldrb	r2, [r7, #11]
 8008800:	4611      	mov	r1, r2
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	4798      	blx	r3
 8008806:	e001      	b.n	800880c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008808:	2302      	movs	r3, #2
 800880a:	e000      	b.n	800880e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3718      	adds	r7, #24
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800881e:	2340      	movs	r3, #64	; 0x40
 8008820:	2200      	movs	r2, #0
 8008822:	2100      	movs	r1, #0
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f001 f9c0 	bl	8009baa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2240      	movs	r2, #64	; 0x40
 8008836:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800883a:	2340      	movs	r3, #64	; 0x40
 800883c:	2200      	movs	r2, #0
 800883e:	2180      	movs	r1, #128	; 0x80
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 f9b2 	bl	8009baa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2240      	movs	r2, #64	; 0x40
 8008850:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2201      	movs	r2, #1
 8008856:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008876:	2b00      	cmp	r3, #0
 8008878:	d009      	beq.n	800888e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	6852      	ldr	r2, [r2, #4]
 8008886:	b2d2      	uxtb	r2, r2
 8008888:	4611      	mov	r1, r2
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	4798      	blx	r3
  }

  return USBD_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	460b      	mov	r3, r1
 80088a2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	78fa      	ldrb	r2, [r7, #3]
 80088a8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bc80      	pop	{r7}
 80088b4:	4770      	bx	lr

080088b6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b083      	sub	sp, #12
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2204      	movs	r2, #4
 80088ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	bc80      	pop	{r7}
 80088dc:	4770      	bx	lr

080088de <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088de:	b480      	push	{r7}
 80088e0:	b083      	sub	sp, #12
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ec:	2b04      	cmp	r3, #4
 80088ee:	d105      	bne.n	80088fc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	bc80      	pop	{r7}
 8008906:	4770      	bx	lr

08008908 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008916:	2b03      	cmp	r3, #3
 8008918:	d10b      	bne.n	8008932 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008920:	69db      	ldr	r3, [r3, #28]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d005      	beq.n	8008932 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008952:	2b40      	cmp	r3, #64	; 0x40
 8008954:	d005      	beq.n	8008962 <USBD_StdDevReq+0x26>
 8008956:	2b40      	cmp	r3, #64	; 0x40
 8008958:	d84f      	bhi.n	80089fa <USBD_StdDevReq+0xbe>
 800895a:	2b00      	cmp	r3, #0
 800895c:	d009      	beq.n	8008972 <USBD_StdDevReq+0x36>
 800895e:	2b20      	cmp	r3, #32
 8008960:	d14b      	bne.n	80089fa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	4798      	blx	r3
      break;
 8008970:	e048      	b.n	8008a04 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	785b      	ldrb	r3, [r3, #1]
 8008976:	2b09      	cmp	r3, #9
 8008978:	d839      	bhi.n	80089ee <USBD_StdDevReq+0xb2>
 800897a:	a201      	add	r2, pc, #4	; (adr r2, 8008980 <USBD_StdDevReq+0x44>)
 800897c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008980:	080089d1 	.word	0x080089d1
 8008984:	080089e5 	.word	0x080089e5
 8008988:	080089ef 	.word	0x080089ef
 800898c:	080089db 	.word	0x080089db
 8008990:	080089ef 	.word	0x080089ef
 8008994:	080089b3 	.word	0x080089b3
 8008998:	080089a9 	.word	0x080089a9
 800899c:	080089ef 	.word	0x080089ef
 80089a0:	080089c7 	.word	0x080089c7
 80089a4:	080089bd 	.word	0x080089bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f9dc 	bl	8008d68 <USBD_GetDescriptor>
          break;
 80089b0:	e022      	b.n	80089f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fb3f 	bl	8009038 <USBD_SetAddress>
          break;
 80089ba:	e01d      	b.n	80089f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fb7e 	bl	80090c0 <USBD_SetConfig>
          break;
 80089c4:	e018      	b.n	80089f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fc07 	bl	80091dc <USBD_GetConfig>
          break;
 80089ce:	e013      	b.n	80089f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fc37 	bl	8009246 <USBD_GetStatus>
          break;
 80089d8:	e00e      	b.n	80089f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fc65 	bl	80092ac <USBD_SetFeature>
          break;
 80089e2:	e009      	b.n	80089f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fc74 	bl	80092d4 <USBD_ClrFeature>
          break;
 80089ec:	e004      	b.n	80089f8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fccc 	bl	800938e <USBD_CtlError>
          break;
 80089f6:	bf00      	nop
      }
      break;
 80089f8:	e004      	b.n	8008a04 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80089fa:	6839      	ldr	r1, [r7, #0]
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fcc6 	bl	800938e <USBD_CtlError>
      break;
 8008a02:	bf00      	nop
  }

  return ret;
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop

08008a10 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a26:	2b40      	cmp	r3, #64	; 0x40
 8008a28:	d005      	beq.n	8008a36 <USBD_StdItfReq+0x26>
 8008a2a:	2b40      	cmp	r3, #64	; 0x40
 8008a2c:	d82e      	bhi.n	8008a8c <USBD_StdItfReq+0x7c>
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <USBD_StdItfReq+0x26>
 8008a32:	2b20      	cmp	r3, #32
 8008a34:	d12a      	bne.n	8008a8c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d81d      	bhi.n	8008a7e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	889b      	ldrh	r3, [r3, #4]
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d813      	bhi.n	8008a74 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	4798      	blx	r3
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	88db      	ldrh	r3, [r3, #6]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d110      	bne.n	8008a88 <USBD_StdItfReq+0x78>
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10d      	bne.n	8008a88 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fd56 	bl	800951e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a72:	e009      	b.n	8008a88 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fc89 	bl	800938e <USBD_CtlError>
          break;
 8008a7c:	e004      	b.n	8008a88 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fc84 	bl	800938e <USBD_CtlError>
          break;
 8008a86:	e000      	b.n	8008a8a <USBD_StdItfReq+0x7a>
          break;
 8008a88:	bf00      	nop
      }
      break;
 8008a8a:	e004      	b.n	8008a96 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fc7d 	bl	800938e <USBD_CtlError>
      break;
 8008a94:	bf00      	nop
  }

  return USBD_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	889b      	ldrh	r3, [r3, #4]
 8008ab2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008abc:	2b40      	cmp	r3, #64	; 0x40
 8008abe:	d007      	beq.n	8008ad0 <USBD_StdEPReq+0x30>
 8008ac0:	2b40      	cmp	r3, #64	; 0x40
 8008ac2:	f200 8146 	bhi.w	8008d52 <USBD_StdEPReq+0x2b2>
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00a      	beq.n	8008ae0 <USBD_StdEPReq+0x40>
 8008aca:	2b20      	cmp	r3, #32
 8008acc:	f040 8141 	bne.w	8008d52 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	4798      	blx	r3
      break;
 8008ade:	e13d      	b.n	8008d5c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ae8:	2b20      	cmp	r3, #32
 8008aea:	d10a      	bne.n	8008b02 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	4798      	blx	r3
 8008afa:	4603      	mov	r3, r0
 8008afc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008afe:	7bfb      	ldrb	r3, [r7, #15]
 8008b00:	e12d      	b.n	8008d5e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	785b      	ldrb	r3, [r3, #1]
 8008b06:	2b03      	cmp	r3, #3
 8008b08:	d007      	beq.n	8008b1a <USBD_StdEPReq+0x7a>
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	f300 811b 	bgt.w	8008d46 <USBD_StdEPReq+0x2a6>
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d072      	beq.n	8008bfa <USBD_StdEPReq+0x15a>
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d03a      	beq.n	8008b8e <USBD_StdEPReq+0xee>
 8008b18:	e115      	b.n	8008d46 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d002      	beq.n	8008b2a <USBD_StdEPReq+0x8a>
 8008b24:	2b03      	cmp	r3, #3
 8008b26:	d015      	beq.n	8008b54 <USBD_StdEPReq+0xb4>
 8008b28:	e02b      	b.n	8008b82 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00c      	beq.n	8008b4a <USBD_StdEPReq+0xaa>
 8008b30:	7bbb      	ldrb	r3, [r7, #14]
 8008b32:	2b80      	cmp	r3, #128	; 0x80
 8008b34:	d009      	beq.n	8008b4a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b36:	7bbb      	ldrb	r3, [r7, #14]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f001 f87a 	bl	8009c34 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008b40:	2180      	movs	r1, #128	; 0x80
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f001 f876 	bl	8009c34 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b48:	e020      	b.n	8008b8c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fc1e 	bl	800938e <USBD_CtlError>
              break;
 8008b52:	e01b      	b.n	8008b8c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	885b      	ldrh	r3, [r3, #2]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10e      	bne.n	8008b7a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00b      	beq.n	8008b7a <USBD_StdEPReq+0xda>
 8008b62:	7bbb      	ldrb	r3, [r7, #14]
 8008b64:	2b80      	cmp	r3, #128	; 0x80
 8008b66:	d008      	beq.n	8008b7a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	88db      	ldrh	r3, [r3, #6]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d104      	bne.n	8008b7a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
 8008b72:	4619      	mov	r1, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f001 f85d 	bl	8009c34 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fccf 	bl	800951e <USBD_CtlSendStatus>

              break;
 8008b80:	e004      	b.n	8008b8c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008b82:	6839      	ldr	r1, [r7, #0]
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fc02 	bl	800938e <USBD_CtlError>
              break;
 8008b8a:	bf00      	nop
          }
          break;
 8008b8c:	e0e0      	b.n	8008d50 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d002      	beq.n	8008b9e <USBD_StdEPReq+0xfe>
 8008b98:	2b03      	cmp	r3, #3
 8008b9a:	d015      	beq.n	8008bc8 <USBD_StdEPReq+0x128>
 8008b9c:	e026      	b.n	8008bec <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00c      	beq.n	8008bbe <USBD_StdEPReq+0x11e>
 8008ba4:	7bbb      	ldrb	r3, [r7, #14]
 8008ba6:	2b80      	cmp	r3, #128	; 0x80
 8008ba8:	d009      	beq.n	8008bbe <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008baa:	7bbb      	ldrb	r3, [r7, #14]
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f001 f840 	bl	8009c34 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008bb4:	2180      	movs	r1, #128	; 0x80
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f001 f83c 	bl	8009c34 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bbc:	e01c      	b.n	8008bf8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fbe4 	bl	800938e <USBD_CtlError>
              break;
 8008bc6:	e017      	b.n	8008bf8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	885b      	ldrh	r3, [r3, #2]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d112      	bne.n	8008bf6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008bd0:	7bbb      	ldrb	r3, [r7, #14]
 8008bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d004      	beq.n	8008be4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008bda:	7bbb      	ldrb	r3, [r7, #14]
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f001 f847 	bl	8009c72 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fc9a 	bl	800951e <USBD_CtlSendStatus>
              }
              break;
 8008bea:	e004      	b.n	8008bf6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008bec:	6839      	ldr	r1, [r7, #0]
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fbcd 	bl	800938e <USBD_CtlError>
              break;
 8008bf4:	e000      	b.n	8008bf8 <USBD_StdEPReq+0x158>
              break;
 8008bf6:	bf00      	nop
          }
          break;
 8008bf8:	e0aa      	b.n	8008d50 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d002      	beq.n	8008c0a <USBD_StdEPReq+0x16a>
 8008c04:	2b03      	cmp	r3, #3
 8008c06:	d032      	beq.n	8008c6e <USBD_StdEPReq+0x1ce>
 8008c08:	e097      	b.n	8008d3a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c0a:	7bbb      	ldrb	r3, [r7, #14]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d007      	beq.n	8008c20 <USBD_StdEPReq+0x180>
 8008c10:	7bbb      	ldrb	r3, [r7, #14]
 8008c12:	2b80      	cmp	r3, #128	; 0x80
 8008c14:	d004      	beq.n	8008c20 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fbb8 	bl	800938e <USBD_CtlError>
                break;
 8008c1e:	e091      	b.n	8008d44 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	da0b      	bge.n	8008c40 <USBD_StdEPReq+0x1a0>
 8008c28:	7bbb      	ldrb	r3, [r7, #14]
 8008c2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c2e:	4613      	mov	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	3310      	adds	r3, #16
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	3304      	adds	r3, #4
 8008c3e:	e00b      	b.n	8008c58 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c40:	7bbb      	ldrb	r3, [r7, #14]
 8008c42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c46:	4613      	mov	r3, r2
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4413      	add	r3, r2
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	4413      	add	r3, r2
 8008c56:	3304      	adds	r3, #4
 8008c58:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	2202      	movs	r2, #2
 8008c64:	4619      	mov	r1, r3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fbfb 	bl	8009462 <USBD_CtlSendData>
              break;
 8008c6c:	e06a      	b.n	8008d44 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	da11      	bge.n	8008c9a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c76:	7bbb      	ldrb	r3, [r7, #14]
 8008c78:	f003 020f 	and.w	r2, r3, #15
 8008c7c:	6879      	ldr	r1, [r7, #4]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	440b      	add	r3, r1
 8008c88:	3318      	adds	r3, #24
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d117      	bne.n	8008cc0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fb7b 	bl	800938e <USBD_CtlError>
                  break;
 8008c98:	e054      	b.n	8008d44 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	f003 020f 	and.w	r2, r3, #15
 8008ca0:	6879      	ldr	r1, [r7, #4]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	4413      	add	r3, r2
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	440b      	add	r3, r1
 8008cac:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d104      	bne.n	8008cc0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008cb6:	6839      	ldr	r1, [r7, #0]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fb68 	bl	800938e <USBD_CtlError>
                  break;
 8008cbe:	e041      	b.n	8008d44 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	da0b      	bge.n	8008ce0 <USBD_StdEPReq+0x240>
 8008cc8:	7bbb      	ldrb	r3, [r7, #14]
 8008cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cce:	4613      	mov	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	3310      	adds	r3, #16
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	4413      	add	r3, r2
 8008cdc:	3304      	adds	r3, #4
 8008cde:	e00b      	b.n	8008cf8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
 8008ce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	4413      	add	r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <USBD_StdEPReq+0x266>
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	2b80      	cmp	r3, #128	; 0x80
 8008d04:	d103      	bne.n	8008d0e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]
 8008d0c:	e00e      	b.n	8008d2c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008d0e:	7bbb      	ldrb	r3, [r7, #14]
 8008d10:	4619      	mov	r1, r3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 ffcc 	bl	8009cb0 <USBD_LL_IsStallEP>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d003      	beq.n	8008d26 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	2201      	movs	r2, #1
 8008d22:	601a      	str	r2, [r3, #0]
 8008d24:	e002      	b.n	8008d2c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	2202      	movs	r2, #2
 8008d30:	4619      	mov	r1, r3
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fb95 	bl	8009462 <USBD_CtlSendData>
              break;
 8008d38:	e004      	b.n	8008d44 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fb26 	bl	800938e <USBD_CtlError>
              break;
 8008d42:	bf00      	nop
          }
          break;
 8008d44:	e004      	b.n	8008d50 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fb20 	bl	800938e <USBD_CtlError>
          break;
 8008d4e:	bf00      	nop
      }
      break;
 8008d50:	e004      	b.n	8008d5c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fb1a 	bl	800938e <USBD_CtlError>
      break;
 8008d5a:	bf00      	nop
  }

  return ret;
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
	...

08008d68 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d76:	2300      	movs	r3, #0
 8008d78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	885b      	ldrh	r3, [r3, #2]
 8008d82:	0a1b      	lsrs	r3, r3, #8
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	3b01      	subs	r3, #1
 8008d88:	2b06      	cmp	r3, #6
 8008d8a:	f200 8128 	bhi.w	8008fde <USBD_GetDescriptor+0x276>
 8008d8e:	a201      	add	r2, pc, #4	; (adr r2, 8008d94 <USBD_GetDescriptor+0x2c>)
 8008d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d94:	08008db1 	.word	0x08008db1
 8008d98:	08008dc9 	.word	0x08008dc9
 8008d9c:	08008e09 	.word	0x08008e09
 8008da0:	08008fdf 	.word	0x08008fdf
 8008da4:	08008fdf 	.word	0x08008fdf
 8008da8:	08008f7f 	.word	0x08008f7f
 8008dac:	08008fab 	.word	0x08008fab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	7c12      	ldrb	r2, [r2, #16]
 8008dbc:	f107 0108 	add.w	r1, r7, #8
 8008dc0:	4610      	mov	r0, r2
 8008dc2:	4798      	blx	r3
 8008dc4:	60f8      	str	r0, [r7, #12]
      break;
 8008dc6:	e112      	b.n	8008fee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	7c1b      	ldrb	r3, [r3, #16]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10d      	bne.n	8008dec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd8:	f107 0208 	add.w	r2, r7, #8
 8008ddc:	4610      	mov	r0, r2
 8008dde:	4798      	blx	r3
 8008de0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3301      	adds	r3, #1
 8008de6:	2202      	movs	r2, #2
 8008de8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008dea:	e100      	b.n	8008fee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df4:	f107 0208 	add.w	r2, r7, #8
 8008df8:	4610      	mov	r0, r2
 8008dfa:	4798      	blx	r3
 8008dfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3301      	adds	r3, #1
 8008e02:	2202      	movs	r2, #2
 8008e04:	701a      	strb	r2, [r3, #0]
      break;
 8008e06:	e0f2      	b.n	8008fee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	885b      	ldrh	r3, [r3, #2]
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2b05      	cmp	r3, #5
 8008e10:	f200 80ac 	bhi.w	8008f6c <USBD_GetDescriptor+0x204>
 8008e14:	a201      	add	r2, pc, #4	; (adr r2, 8008e1c <USBD_GetDescriptor+0xb4>)
 8008e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1a:	bf00      	nop
 8008e1c:	08008e35 	.word	0x08008e35
 8008e20:	08008e69 	.word	0x08008e69
 8008e24:	08008e9d 	.word	0x08008e9d
 8008e28:	08008ed1 	.word	0x08008ed1
 8008e2c:	08008f05 	.word	0x08008f05
 8008e30:	08008f39 	.word	0x08008f39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00b      	beq.n	8008e58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	7c12      	ldrb	r2, [r2, #16]
 8008e4c:	f107 0108 	add.w	r1, r7, #8
 8008e50:	4610      	mov	r0, r2
 8008e52:	4798      	blx	r3
 8008e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e56:	e091      	b.n	8008f7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fa97 	bl	800938e <USBD_CtlError>
            err++;
 8008e60:	7afb      	ldrb	r3, [r7, #11]
 8008e62:	3301      	adds	r3, #1
 8008e64:	72fb      	strb	r3, [r7, #11]
          break;
 8008e66:	e089      	b.n	8008f7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00b      	beq.n	8008e8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	7c12      	ldrb	r2, [r2, #16]
 8008e80:	f107 0108 	add.w	r1, r7, #8
 8008e84:	4610      	mov	r0, r2
 8008e86:	4798      	blx	r3
 8008e88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e8a:	e077      	b.n	8008f7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fa7d 	bl	800938e <USBD_CtlError>
            err++;
 8008e94:	7afb      	ldrb	r3, [r7, #11]
 8008e96:	3301      	adds	r3, #1
 8008e98:	72fb      	strb	r3, [r7, #11]
          break;
 8008e9a:	e06f      	b.n	8008f7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00b      	beq.n	8008ec0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	7c12      	ldrb	r2, [r2, #16]
 8008eb4:	f107 0108 	add.w	r1, r7, #8
 8008eb8:	4610      	mov	r0, r2
 8008eba:	4798      	blx	r3
 8008ebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ebe:	e05d      	b.n	8008f7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ec0:	6839      	ldr	r1, [r7, #0]
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 fa63 	bl	800938e <USBD_CtlError>
            err++;
 8008ec8:	7afb      	ldrb	r3, [r7, #11]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	72fb      	strb	r3, [r7, #11]
          break;
 8008ece:	e055      	b.n	8008f7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00b      	beq.n	8008ef4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	7c12      	ldrb	r2, [r2, #16]
 8008ee8:	f107 0108 	add.w	r1, r7, #8
 8008eec:	4610      	mov	r0, r2
 8008eee:	4798      	blx	r3
 8008ef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ef2:	e043      	b.n	8008f7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fa49 	bl	800938e <USBD_CtlError>
            err++;
 8008efc:	7afb      	ldrb	r3, [r7, #11]
 8008efe:	3301      	adds	r3, #1
 8008f00:	72fb      	strb	r3, [r7, #11]
          break;
 8008f02:	e03b      	b.n	8008f7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f0a:	695b      	ldr	r3, [r3, #20]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00b      	beq.n	8008f28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f16:	695b      	ldr	r3, [r3, #20]
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	7c12      	ldrb	r2, [r2, #16]
 8008f1c:	f107 0108 	add.w	r1, r7, #8
 8008f20:	4610      	mov	r0, r2
 8008f22:	4798      	blx	r3
 8008f24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f26:	e029      	b.n	8008f7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f28:	6839      	ldr	r1, [r7, #0]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fa2f 	bl	800938e <USBD_CtlError>
            err++;
 8008f30:	7afb      	ldrb	r3, [r7, #11]
 8008f32:	3301      	adds	r3, #1
 8008f34:	72fb      	strb	r3, [r7, #11]
          break;
 8008f36:	e021      	b.n	8008f7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00b      	beq.n	8008f5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	7c12      	ldrb	r2, [r2, #16]
 8008f50:	f107 0108 	add.w	r1, r7, #8
 8008f54:	4610      	mov	r0, r2
 8008f56:	4798      	blx	r3
 8008f58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f5a:	e00f      	b.n	8008f7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fa15 	bl	800938e <USBD_CtlError>
            err++;
 8008f64:	7afb      	ldrb	r3, [r7, #11]
 8008f66:	3301      	adds	r3, #1
 8008f68:	72fb      	strb	r3, [r7, #11]
          break;
 8008f6a:	e007      	b.n	8008f7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008f6c:	6839      	ldr	r1, [r7, #0]
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 fa0d 	bl	800938e <USBD_CtlError>
          err++;
 8008f74:	7afb      	ldrb	r3, [r7, #11]
 8008f76:	3301      	adds	r3, #1
 8008f78:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008f7a:	e038      	b.n	8008fee <USBD_GetDescriptor+0x286>
 8008f7c:	e037      	b.n	8008fee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	7c1b      	ldrb	r3, [r3, #16]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d109      	bne.n	8008f9a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f8e:	f107 0208 	add.w	r2, r7, #8
 8008f92:	4610      	mov	r0, r2
 8008f94:	4798      	blx	r3
 8008f96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f98:	e029      	b.n	8008fee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f9f6 	bl	800938e <USBD_CtlError>
        err++;
 8008fa2:	7afb      	ldrb	r3, [r7, #11]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	72fb      	strb	r3, [r7, #11]
      break;
 8008fa8:	e021      	b.n	8008fee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	7c1b      	ldrb	r3, [r3, #16]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10d      	bne.n	8008fce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fba:	f107 0208 	add.w	r2, r7, #8
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	4798      	blx	r3
 8008fc2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	2207      	movs	r2, #7
 8008fca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fcc:	e00f      	b.n	8008fee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fce:	6839      	ldr	r1, [r7, #0]
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 f9dc 	bl	800938e <USBD_CtlError>
        err++;
 8008fd6:	7afb      	ldrb	r3, [r7, #11]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	72fb      	strb	r3, [r7, #11]
      break;
 8008fdc:	e007      	b.n	8008fee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008fde:	6839      	ldr	r1, [r7, #0]
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 f9d4 	bl	800938e <USBD_CtlError>
      err++;
 8008fe6:	7afb      	ldrb	r3, [r7, #11]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	72fb      	strb	r3, [r7, #11]
      break;
 8008fec:	bf00      	nop
  }

  if (err != 0U)
 8008fee:	7afb      	ldrb	r3, [r7, #11]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d11c      	bne.n	800902e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008ff4:	893b      	ldrh	r3, [r7, #8]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d011      	beq.n	800901e <USBD_GetDescriptor+0x2b6>
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	88db      	ldrh	r3, [r3, #6]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00d      	beq.n	800901e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	88da      	ldrh	r2, [r3, #6]
 8009006:	893b      	ldrh	r3, [r7, #8]
 8009008:	4293      	cmp	r3, r2
 800900a:	bf28      	it	cs
 800900c:	4613      	movcs	r3, r2
 800900e:	b29b      	uxth	r3, r3
 8009010:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009012:	893b      	ldrh	r3, [r7, #8]
 8009014:	461a      	mov	r2, r3
 8009016:	68f9      	ldr	r1, [r7, #12]
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fa22 	bl	8009462 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	88db      	ldrh	r3, [r3, #6]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d104      	bne.n	8009030 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fa79 	bl	800951e <USBD_CtlSendStatus>
 800902c:	e000      	b.n	8009030 <USBD_GetDescriptor+0x2c8>
    return;
 800902e:	bf00      	nop
    }
  }
}
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop

08009038 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	889b      	ldrh	r3, [r3, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d130      	bne.n	80090ac <USBD_SetAddress+0x74>
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	88db      	ldrh	r3, [r3, #6]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d12c      	bne.n	80090ac <USBD_SetAddress+0x74>
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	885b      	ldrh	r3, [r3, #2]
 8009056:	2b7f      	cmp	r3, #127	; 0x7f
 8009058:	d828      	bhi.n	80090ac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	885b      	ldrh	r3, [r3, #2]
 800905e:	b2db      	uxtb	r3, r3
 8009060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009064:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800906c:	2b03      	cmp	r3, #3
 800906e:	d104      	bne.n	800907a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009070:	6839      	ldr	r1, [r7, #0]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f98b 	bl	800938e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009078:	e01d      	b.n	80090b6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	7bfa      	ldrb	r2, [r7, #15]
 800907e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009082:	7bfb      	ldrb	r3, [r7, #15]
 8009084:	4619      	mov	r1, r3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fe3e 	bl	8009d08 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fa46 	bl	800951e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009092:	7bfb      	ldrb	r3, [r7, #15]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d004      	beq.n	80090a2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2202      	movs	r2, #2
 800909c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a0:	e009      	b.n	80090b6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090aa:	e004      	b.n	80090b6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80090ac:	6839      	ldr	r1, [r7, #0]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f96d 	bl	800938e <USBD_CtlError>
  }
}
 80090b4:	bf00      	nop
 80090b6:	bf00      	nop
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
	...

080090c0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	885b      	ldrh	r3, [r3, #2]
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	4b41      	ldr	r3, [pc, #260]	; (80091d8 <USBD_SetConfig+0x118>)
 80090d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090d4:	4b40      	ldr	r3, [pc, #256]	; (80091d8 <USBD_SetConfig+0x118>)
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d904      	bls.n	80090e6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80090dc:	6839      	ldr	r1, [r7, #0]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f955 	bl	800938e <USBD_CtlError>
 80090e4:	e075      	b.n	80091d2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d002      	beq.n	80090f6 <USBD_SetConfig+0x36>
 80090f0:	2b03      	cmp	r3, #3
 80090f2:	d023      	beq.n	800913c <USBD_SetConfig+0x7c>
 80090f4:	e062      	b.n	80091bc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80090f6:	4b38      	ldr	r3, [pc, #224]	; (80091d8 <USBD_SetConfig+0x118>)
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d01a      	beq.n	8009134 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80090fe:	4b36      	ldr	r3, [pc, #216]	; (80091d8 <USBD_SetConfig+0x118>)
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	461a      	mov	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2203      	movs	r2, #3
 800910c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009110:	4b31      	ldr	r3, [pc, #196]	; (80091d8 <USBD_SetConfig+0x118>)
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	4619      	mov	r1, r3
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f7ff f9e8 	bl	80084ec <USBD_SetClassConfig>
 800911c:	4603      	mov	r3, r0
 800911e:	2b02      	cmp	r3, #2
 8009120:	d104      	bne.n	800912c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f932 	bl	800938e <USBD_CtlError>
            return;
 800912a:	e052      	b.n	80091d2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f9f6 	bl	800951e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009132:	e04e      	b.n	80091d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f9f2 	bl	800951e <USBD_CtlSendStatus>
        break;
 800913a:	e04a      	b.n	80091d2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800913c:	4b26      	ldr	r3, [pc, #152]	; (80091d8 <USBD_SetConfig+0x118>)
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d112      	bne.n	800916a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2202      	movs	r2, #2
 8009148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800914c:	4b22      	ldr	r3, [pc, #136]	; (80091d8 <USBD_SetConfig+0x118>)
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	461a      	mov	r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009156:	4b20      	ldr	r3, [pc, #128]	; (80091d8 <USBD_SetConfig+0x118>)
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7ff f9e4 	bl	800852a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f9db 	bl	800951e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009168:	e033      	b.n	80091d2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800916a:	4b1b      	ldr	r3, [pc, #108]	; (80091d8 <USBD_SetConfig+0x118>)
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	461a      	mov	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	429a      	cmp	r2, r3
 8009176:	d01d      	beq.n	80091b4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	b2db      	uxtb	r3, r3
 800917e:	4619      	mov	r1, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f7ff f9d2 	bl	800852a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009186:	4b14      	ldr	r3, [pc, #80]	; (80091d8 <USBD_SetConfig+0x118>)
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009190:	4b11      	ldr	r3, [pc, #68]	; (80091d8 <USBD_SetConfig+0x118>)
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	4619      	mov	r1, r3
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f7ff f9a8 	bl	80084ec <USBD_SetClassConfig>
 800919c:	4603      	mov	r3, r0
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d104      	bne.n	80091ac <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f8f2 	bl	800938e <USBD_CtlError>
            return;
 80091aa:	e012      	b.n	80091d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f9b6 	bl	800951e <USBD_CtlSendStatus>
        break;
 80091b2:	e00e      	b.n	80091d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f9b2 	bl	800951e <USBD_CtlSendStatus>
        break;
 80091ba:	e00a      	b.n	80091d2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f8e5 	bl	800938e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80091c4:	4b04      	ldr	r3, [pc, #16]	; (80091d8 <USBD_SetConfig+0x118>)
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	4619      	mov	r1, r3
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f7ff f9ad 	bl	800852a <USBD_ClrClassConfig>
        break;
 80091d0:	bf00      	nop
    }
  }
}
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	20000300 	.word	0x20000300

080091dc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	88db      	ldrh	r3, [r3, #6]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d004      	beq.n	80091f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091ee:	6839      	ldr	r1, [r7, #0]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f8cc 	bl	800938e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80091f6:	e022      	b.n	800923e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091fe:	2b02      	cmp	r3, #2
 8009200:	dc02      	bgt.n	8009208 <USBD_GetConfig+0x2c>
 8009202:	2b00      	cmp	r3, #0
 8009204:	dc03      	bgt.n	800920e <USBD_GetConfig+0x32>
 8009206:	e015      	b.n	8009234 <USBD_GetConfig+0x58>
 8009208:	2b03      	cmp	r3, #3
 800920a:	d00b      	beq.n	8009224 <USBD_GetConfig+0x48>
 800920c:	e012      	b.n	8009234 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	3308      	adds	r3, #8
 8009218:	2201      	movs	r2, #1
 800921a:	4619      	mov	r1, r3
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f920 	bl	8009462 <USBD_CtlSendData>
        break;
 8009222:	e00c      	b.n	800923e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	3304      	adds	r3, #4
 8009228:	2201      	movs	r2, #1
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f918 	bl	8009462 <USBD_CtlSendData>
        break;
 8009232:	e004      	b.n	800923e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009234:	6839      	ldr	r1, [r7, #0]
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 f8a9 	bl	800938e <USBD_CtlError>
        break;
 800923c:	bf00      	nop
}
 800923e:	bf00      	nop
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b082      	sub	sp, #8
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009256:	3b01      	subs	r3, #1
 8009258:	2b02      	cmp	r3, #2
 800925a:	d81e      	bhi.n	800929a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	88db      	ldrh	r3, [r3, #6]
 8009260:	2b02      	cmp	r3, #2
 8009262:	d004      	beq.n	800926e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f891 	bl	800938e <USBD_CtlError>
        break;
 800926c:	e01a      	b.n	80092a4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2201      	movs	r2, #1
 8009272:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800927a:	2b00      	cmp	r3, #0
 800927c:	d005      	beq.n	800928a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	f043 0202 	orr.w	r2, r3, #2
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	330c      	adds	r3, #12
 800928e:	2202      	movs	r2, #2
 8009290:	4619      	mov	r1, r3
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 f8e5 	bl	8009462 <USBD_CtlSendData>
      break;
 8009298:	e004      	b.n	80092a4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800929a:	6839      	ldr	r1, [r7, #0]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f876 	bl	800938e <USBD_CtlError>
      break;
 80092a2:	bf00      	nop
  }
}
 80092a4:	bf00      	nop
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	885b      	ldrh	r3, [r3, #2]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d106      	bne.n	80092cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2201      	movs	r2, #1
 80092c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f929 	bl	800951e <USBD_CtlSendStatus>
  }
}
 80092cc:	bf00      	nop
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e4:	3b01      	subs	r3, #1
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d80b      	bhi.n	8009302 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	885b      	ldrh	r3, [r3, #2]
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d10c      	bne.n	800930c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f90f 	bl	800951e <USBD_CtlSendStatus>
      }
      break;
 8009300:	e004      	b.n	800930c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f842 	bl	800938e <USBD_CtlError>
      break;
 800930a:	e000      	b.n	800930e <USBD_ClrFeature+0x3a>
      break;
 800930c:	bf00      	nop
  }
}
 800930e:	bf00      	nop
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009316:	b480      	push	{r7}
 8009318:	b083      	sub	sp, #12
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	781a      	ldrb	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	785a      	ldrb	r2, [r3, #1]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	3302      	adds	r3, #2
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	b29a      	uxth	r2, r3
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	3303      	adds	r3, #3
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	b29b      	uxth	r3, r3
 8009340:	021b      	lsls	r3, r3, #8
 8009342:	b29b      	uxth	r3, r3
 8009344:	4413      	add	r3, r2
 8009346:	b29a      	uxth	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	3304      	adds	r3, #4
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	b29a      	uxth	r2, r3
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	3305      	adds	r3, #5
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	b29b      	uxth	r3, r3
 800935c:	021b      	lsls	r3, r3, #8
 800935e:	b29b      	uxth	r3, r3
 8009360:	4413      	add	r3, r2
 8009362:	b29a      	uxth	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	3306      	adds	r3, #6
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	b29a      	uxth	r2, r3
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	3307      	adds	r3, #7
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	b29b      	uxth	r3, r3
 8009378:	021b      	lsls	r3, r3, #8
 800937a:	b29b      	uxth	r3, r3
 800937c:	4413      	add	r3, r2
 800937e:	b29a      	uxth	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	80da      	strh	r2, [r3, #6]

}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	bc80      	pop	{r7}
 800938c:	4770      	bx	lr

0800938e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b082      	sub	sp, #8
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009398:	2180      	movs	r1, #128	; 0x80
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fc4a 	bl	8009c34 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80093a0:	2100      	movs	r1, #0
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fc46 	bl	8009c34 <USBD_LL_StallEP>
}
 80093a8:	bf00      	nop
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80093bc:	2300      	movs	r3, #0
 80093be:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d032      	beq.n	800942c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f000 f834 	bl	8009434 <USBD_GetLen>
 80093cc:	4603      	mov	r3, r0
 80093ce:	3301      	adds	r3, #1
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	005b      	lsls	r3, r3, #1
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80093da:	7dfb      	ldrb	r3, [r7, #23]
 80093dc:	1c5a      	adds	r2, r3, #1
 80093de:	75fa      	strb	r2, [r7, #23]
 80093e0:	461a      	mov	r2, r3
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	4413      	add	r3, r2
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	7812      	ldrb	r2, [r2, #0]
 80093ea:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80093ec:	7dfb      	ldrb	r3, [r7, #23]
 80093ee:	1c5a      	adds	r2, r3, #1
 80093f0:	75fa      	strb	r2, [r7, #23]
 80093f2:	461a      	mov	r2, r3
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	4413      	add	r3, r2
 80093f8:	2203      	movs	r2, #3
 80093fa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80093fc:	e012      	b.n	8009424 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	1c5a      	adds	r2, r3, #1
 8009402:	60fa      	str	r2, [r7, #12]
 8009404:	7dfa      	ldrb	r2, [r7, #23]
 8009406:	1c51      	adds	r1, r2, #1
 8009408:	75f9      	strb	r1, [r7, #23]
 800940a:	4611      	mov	r1, r2
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	440a      	add	r2, r1
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009414:	7dfb      	ldrb	r3, [r7, #23]
 8009416:	1c5a      	adds	r2, r3, #1
 8009418:	75fa      	strb	r2, [r7, #23]
 800941a:	461a      	mov	r2, r3
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	4413      	add	r3, r2
 8009420:	2200      	movs	r2, #0
 8009422:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1e8      	bne.n	80093fe <USBD_GetString+0x4e>
    }
  }
}
 800942c:	bf00      	nop
 800942e:	3718      	adds	r7, #24
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800943c:	2300      	movs	r3, #0
 800943e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009440:	e005      	b.n	800944e <USBD_GetLen+0x1a>
  {
    len++;
 8009442:	7bfb      	ldrb	r3, [r7, #15]
 8009444:	3301      	adds	r3, #1
 8009446:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3301      	adds	r3, #1
 800944c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1f5      	bne.n	8009442 <USBD_GetLen+0xe>
  }

  return len;
 8009456:	7bfb      	ldrb	r3, [r7, #15]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	bc80      	pop	{r7}
 8009460:	4770      	bx	lr

08009462 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b084      	sub	sp, #16
 8009466:	af00      	add	r7, sp, #0
 8009468:	60f8      	str	r0, [r7, #12]
 800946a:	60b9      	str	r1, [r7, #8]
 800946c:	4613      	mov	r3, r2
 800946e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2202      	movs	r2, #2
 8009474:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009478:	88fa      	ldrh	r2, [r7, #6]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800947e:	88fa      	ldrh	r2, [r7, #6]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009484:	88fb      	ldrh	r3, [r7, #6]
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	2100      	movs	r1, #0
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f000 fc5b 	bl	8009d46 <USBD_LL_Transmit>

  return USBD_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b084      	sub	sp, #16
 800949e:	af00      	add	r7, sp, #0
 80094a0:	60f8      	str	r0, [r7, #12]
 80094a2:	60b9      	str	r1, [r7, #8]
 80094a4:	4613      	mov	r3, r2
 80094a6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094a8:	88fb      	ldrh	r3, [r7, #6]
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	2100      	movs	r1, #0
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f000 fc49 	bl	8009d46 <USBD_LL_Transmit>

  return USBD_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b084      	sub	sp, #16
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	60f8      	str	r0, [r7, #12]
 80094c6:	60b9      	str	r1, [r7, #8]
 80094c8:	4613      	mov	r3, r2
 80094ca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2203      	movs	r2, #3
 80094d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80094d4:	88fa      	ldrh	r2, [r7, #6]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80094dc:	88fa      	ldrh	r2, [r7, #6]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094e4:	88fb      	ldrh	r3, [r7, #6]
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	2100      	movs	r1, #0
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f000 fc4e 	bl	8009d8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	60f8      	str	r0, [r7, #12]
 8009502:	60b9      	str	r1, [r7, #8]
 8009504:	4613      	mov	r3, r2
 8009506:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009508:	88fb      	ldrh	r3, [r7, #6]
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	2100      	movs	r1, #0
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f000 fc3c 	bl	8009d8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b082      	sub	sp, #8
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2204      	movs	r2, #4
 800952a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800952e:	2300      	movs	r3, #0
 8009530:	2200      	movs	r2, #0
 8009532:	2100      	movs	r1, #0
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fc06 	bl	8009d46 <USBD_LL_Transmit>

  return USBD_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3708      	adds	r7, #8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2205      	movs	r2, #5
 8009550:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009554:	2300      	movs	r3, #0
 8009556:	2200      	movs	r2, #0
 8009558:	2100      	movs	r1, #0
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 fc16 	bl	8009d8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
	...

0800956c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009570:	2200      	movs	r2, #0
 8009572:	4912      	ldr	r1, [pc, #72]	; (80095bc <MX_USB_DEVICE_Init+0x50>)
 8009574:	4812      	ldr	r0, [pc, #72]	; (80095c0 <MX_USB_DEVICE_Init+0x54>)
 8009576:	f7fe ff5f 	bl	8008438 <USBD_Init>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d001      	beq.n	8009584 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009580:	f7f7 fb43 	bl	8000c0a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009584:	490f      	ldr	r1, [pc, #60]	; (80095c4 <MX_USB_DEVICE_Init+0x58>)
 8009586:	480e      	ldr	r0, [pc, #56]	; (80095c0 <MX_USB_DEVICE_Init+0x54>)
 8009588:	f7fe ff81 	bl	800848e <USBD_RegisterClass>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009592:	f7f7 fb3a 	bl	8000c0a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009596:	490c      	ldr	r1, [pc, #48]	; (80095c8 <MX_USB_DEVICE_Init+0x5c>)
 8009598:	4809      	ldr	r0, [pc, #36]	; (80095c0 <MX_USB_DEVICE_Init+0x54>)
 800959a:	f7fe fee1 	bl	8008360 <USBD_CDC_RegisterInterface>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80095a4:	f7f7 fb31 	bl	8000c0a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80095a8:	4805      	ldr	r0, [pc, #20]	; (80095c0 <MX_USB_DEVICE_Init+0x54>)
 80095aa:	f7fe ff89 	bl	80084c0 <USBD_Start>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d001      	beq.n	80095b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80095b4:	f7f7 fb29 	bl	8000c0a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80095b8:	bf00      	nop
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	20000134 	.word	0x20000134
 80095c0:	20000304 	.word	0x20000304
 80095c4:	20000020 	.word	0x20000020
 80095c8:	20000124 	.word	0x20000124

080095cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80095d0:	2200      	movs	r2, #0
 80095d2:	4905      	ldr	r1, [pc, #20]	; (80095e8 <CDC_Init_FS+0x1c>)
 80095d4:	4805      	ldr	r0, [pc, #20]	; (80095ec <CDC_Init_FS+0x20>)
 80095d6:	f7fe fed9 	bl	800838c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80095da:	4905      	ldr	r1, [pc, #20]	; (80095f0 <CDC_Init_FS+0x24>)
 80095dc:	4803      	ldr	r0, [pc, #12]	; (80095ec <CDC_Init_FS+0x20>)
 80095de:	f7fe feee 	bl	80083be <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80095e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	200009b0 	.word	0x200009b0
 80095ec:	20000304 	.word	0x20000304
 80095f0:	200005c8 	.word	0x200005c8

080095f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80095f4:	b480      	push	{r7}
 80095f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80095f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bc80      	pop	{r7}
 8009600:	4770      	bx	lr
	...

08009604 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	6039      	str	r1, [r7, #0]
 800960e:	71fb      	strb	r3, [r7, #7]
 8009610:	4613      	mov	r3, r2
 8009612:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009614:	79fb      	ldrb	r3, [r7, #7]
 8009616:	2b23      	cmp	r3, #35	; 0x23
 8009618:	d84a      	bhi.n	80096b0 <CDC_Control_FS+0xac>
 800961a:	a201      	add	r2, pc, #4	; (adr r2, 8009620 <CDC_Control_FS+0x1c>)
 800961c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009620:	080096b1 	.word	0x080096b1
 8009624:	080096b1 	.word	0x080096b1
 8009628:	080096b1 	.word	0x080096b1
 800962c:	080096b1 	.word	0x080096b1
 8009630:	080096b1 	.word	0x080096b1
 8009634:	080096b1 	.word	0x080096b1
 8009638:	080096b1 	.word	0x080096b1
 800963c:	080096b1 	.word	0x080096b1
 8009640:	080096b1 	.word	0x080096b1
 8009644:	080096b1 	.word	0x080096b1
 8009648:	080096b1 	.word	0x080096b1
 800964c:	080096b1 	.word	0x080096b1
 8009650:	080096b1 	.word	0x080096b1
 8009654:	080096b1 	.word	0x080096b1
 8009658:	080096b1 	.word	0x080096b1
 800965c:	080096b1 	.word	0x080096b1
 8009660:	080096b1 	.word	0x080096b1
 8009664:	080096b1 	.word	0x080096b1
 8009668:	080096b1 	.word	0x080096b1
 800966c:	080096b1 	.word	0x080096b1
 8009670:	080096b1 	.word	0x080096b1
 8009674:	080096b1 	.word	0x080096b1
 8009678:	080096b1 	.word	0x080096b1
 800967c:	080096b1 	.word	0x080096b1
 8009680:	080096b1 	.word	0x080096b1
 8009684:	080096b1 	.word	0x080096b1
 8009688:	080096b1 	.word	0x080096b1
 800968c:	080096b1 	.word	0x080096b1
 8009690:	080096b1 	.word	0x080096b1
 8009694:	080096b1 	.word	0x080096b1
 8009698:	080096b1 	.word	0x080096b1
 800969c:	080096b1 	.word	0x080096b1
 80096a0:	080096b1 	.word	0x080096b1
 80096a4:	080096b1 	.word	0x080096b1
 80096a8:	080096b1 	.word	0x080096b1
 80096ac:	080096b1 	.word	0x080096b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80096b0:	bf00      	nop
  }

  return (USBD_OK);
 80096b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bc80      	pop	{r7}
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop

080096c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint8_t x = Buf[0];
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	73fb      	strb	r3, [r7, #15]
	uint8_t z = Buf[1];
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	785b      	ldrb	r3, [r3, #1]
 80096d4:	73bb      	strb	r3, [r7, #14]

    X_TARGET = (double)x;
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
 80096d8:	4618      	mov	r0, r3
 80096da:	f7f6 fe7b 	bl	80003d4 <__aeabi_ui2d>
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	490c      	ldr	r1, [pc, #48]	; (8009714 <CDC_Receive_FS+0x54>)
 80096e4:	e9c1 2300 	strd	r2, r3, [r1]
    Z_TARGET = (double)z;
 80096e8:	7bbb      	ldrb	r3, [r7, #14]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7f6 fe72 	bl	80003d4 <__aeabi_ui2d>
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	4908      	ldr	r1, [pc, #32]	; (8009718 <CDC_Receive_FS+0x58>)
 80096f6:	e9c1 2300 	strd	r2, r3, [r1]


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80096fa:	6879      	ldr	r1, [r7, #4]
 80096fc:	4807      	ldr	r0, [pc, #28]	; (800971c <CDC_Receive_FS+0x5c>)
 80096fe:	f7fe fe5e 	bl	80083be <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009702:	4806      	ldr	r0, [pc, #24]	; (800971c <CDC_Receive_FS+0x5c>)
 8009704:	f7fe fe6e 	bl	80083e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009708:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	20000000 	.word	0x20000000
 8009718:	20000218 	.word	0x20000218
 800971c:	20000304 	.word	0x20000304

08009720 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	6039      	str	r1, [r7, #0]
 800972a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2212      	movs	r2, #18
 8009730:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009732:	4b03      	ldr	r3, [pc, #12]	; (8009740 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009734:	4618      	mov	r0, r3
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	bc80      	pop	{r7}
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	20000150 	.word	0x20000150

08009744 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	4603      	mov	r3, r0
 800974c:	6039      	str	r1, [r7, #0]
 800974e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	2204      	movs	r2, #4
 8009754:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009756:	4b03      	ldr	r3, [pc, #12]	; (8009764 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009758:	4618      	mov	r0, r3
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	bc80      	pop	{r7}
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	20000164 	.word	0x20000164

08009768 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	4603      	mov	r3, r0
 8009770:	6039      	str	r1, [r7, #0]
 8009772:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d105      	bne.n	8009786 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	4907      	ldr	r1, [pc, #28]	; (800979c <USBD_FS_ProductStrDescriptor+0x34>)
 800977e:	4808      	ldr	r0, [pc, #32]	; (80097a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009780:	f7ff fe16 	bl	80093b0 <USBD_GetString>
 8009784:	e004      	b.n	8009790 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009786:	683a      	ldr	r2, [r7, #0]
 8009788:	4904      	ldr	r1, [pc, #16]	; (800979c <USBD_FS_ProductStrDescriptor+0x34>)
 800978a:	4805      	ldr	r0, [pc, #20]	; (80097a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800978c:	f7ff fe10 	bl	80093b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009790:	4b02      	ldr	r3, [pc, #8]	; (800979c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	20000d98 	.word	0x20000d98
 80097a0:	0800d538 	.word	0x0800d538

080097a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	6039      	str	r1, [r7, #0]
 80097ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097b0:	683a      	ldr	r2, [r7, #0]
 80097b2:	4904      	ldr	r1, [pc, #16]	; (80097c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097b4:	4804      	ldr	r0, [pc, #16]	; (80097c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097b6:	f7ff fdfb 	bl	80093b0 <USBD_GetString>
  return USBD_StrDesc;
 80097ba:	4b02      	ldr	r3, [pc, #8]	; (80097c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	20000d98 	.word	0x20000d98
 80097c8:	0800d550 	.word	0x0800d550

080097cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	4603      	mov	r3, r0
 80097d4:	6039      	str	r1, [r7, #0]
 80097d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	221a      	movs	r2, #26
 80097dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097de:	f000 f843 	bl	8009868 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097e2:	4b02      	ldr	r3, [pc, #8]	; (80097ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	20000168 	.word	0x20000168

080097f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	4603      	mov	r3, r0
 80097f8:	6039      	str	r1, [r7, #0]
 80097fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80097fc:	79fb      	ldrb	r3, [r7, #7]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d105      	bne.n	800980e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009802:	683a      	ldr	r2, [r7, #0]
 8009804:	4907      	ldr	r1, [pc, #28]	; (8009824 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009806:	4808      	ldr	r0, [pc, #32]	; (8009828 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009808:	f7ff fdd2 	bl	80093b0 <USBD_GetString>
 800980c:	e004      	b.n	8009818 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	4904      	ldr	r1, [pc, #16]	; (8009824 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009812:	4805      	ldr	r0, [pc, #20]	; (8009828 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009814:	f7ff fdcc 	bl	80093b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009818:	4b02      	ldr	r3, [pc, #8]	; (8009824 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800981a:	4618      	mov	r0, r3
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	20000d98 	.word	0x20000d98
 8009828:	0800d564 	.word	0x0800d564

0800982c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	4603      	mov	r3, r0
 8009834:	6039      	str	r1, [r7, #0]
 8009836:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009838:	79fb      	ldrb	r3, [r7, #7]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d105      	bne.n	800984a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800983e:	683a      	ldr	r2, [r7, #0]
 8009840:	4907      	ldr	r1, [pc, #28]	; (8009860 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009842:	4808      	ldr	r0, [pc, #32]	; (8009864 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009844:	f7ff fdb4 	bl	80093b0 <USBD_GetString>
 8009848:	e004      	b.n	8009854 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	4904      	ldr	r1, [pc, #16]	; (8009860 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800984e:	4805      	ldr	r0, [pc, #20]	; (8009864 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009850:	f7ff fdae 	bl	80093b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009854:	4b02      	ldr	r3, [pc, #8]	; (8009860 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009856:	4618      	mov	r0, r3
 8009858:	3708      	adds	r7, #8
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	20000d98 	.word	0x20000d98
 8009864:	0800d570 	.word	0x0800d570

08009868 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800986e:	4b0f      	ldr	r3, [pc, #60]	; (80098ac <Get_SerialNum+0x44>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009874:	4b0e      	ldr	r3, [pc, #56]	; (80098b0 <Get_SerialNum+0x48>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800987a:	4b0e      	ldr	r3, [pc, #56]	; (80098b4 <Get_SerialNum+0x4c>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4413      	add	r3, r2
 8009886:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d009      	beq.n	80098a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800988e:	2208      	movs	r2, #8
 8009890:	4909      	ldr	r1, [pc, #36]	; (80098b8 <Get_SerialNum+0x50>)
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 f814 	bl	80098c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009898:	2204      	movs	r2, #4
 800989a:	4908      	ldr	r1, [pc, #32]	; (80098bc <Get_SerialNum+0x54>)
 800989c:	68b8      	ldr	r0, [r7, #8]
 800989e:	f000 f80f 	bl	80098c0 <IntToUnicode>
  }
}
 80098a2:	bf00      	nop
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	1ffff7e8 	.word	0x1ffff7e8
 80098b0:	1ffff7ec 	.word	0x1ffff7ec
 80098b4:	1ffff7f0 	.word	0x1ffff7f0
 80098b8:	2000016a 	.word	0x2000016a
 80098bc:	2000017a 	.word	0x2000017a

080098c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	4613      	mov	r3, r2
 80098cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098ce:	2300      	movs	r3, #0
 80098d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098d2:	2300      	movs	r3, #0
 80098d4:	75fb      	strb	r3, [r7, #23]
 80098d6:	e027      	b.n	8009928 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	0f1b      	lsrs	r3, r3, #28
 80098dc:	2b09      	cmp	r3, #9
 80098de:	d80b      	bhi.n	80098f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	0f1b      	lsrs	r3, r3, #28
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	7dfb      	ldrb	r3, [r7, #23]
 80098e8:	005b      	lsls	r3, r3, #1
 80098ea:	4619      	mov	r1, r3
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	440b      	add	r3, r1
 80098f0:	3230      	adds	r2, #48	; 0x30
 80098f2:	b2d2      	uxtb	r2, r2
 80098f4:	701a      	strb	r2, [r3, #0]
 80098f6:	e00a      	b.n	800990e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	0f1b      	lsrs	r3, r3, #28
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	4619      	mov	r1, r3
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	440b      	add	r3, r1
 8009908:	3237      	adds	r2, #55	; 0x37
 800990a:	b2d2      	uxtb	r2, r2
 800990c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	011b      	lsls	r3, r3, #4
 8009912:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009914:	7dfb      	ldrb	r3, [r7, #23]
 8009916:	005b      	lsls	r3, r3, #1
 8009918:	3301      	adds	r3, #1
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	4413      	add	r3, r2
 800991e:	2200      	movs	r2, #0
 8009920:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009922:	7dfb      	ldrb	r3, [r7, #23]
 8009924:	3301      	adds	r3, #1
 8009926:	75fb      	strb	r3, [r7, #23]
 8009928:	7dfa      	ldrb	r2, [r7, #23]
 800992a:	79fb      	ldrb	r3, [r7, #7]
 800992c:	429a      	cmp	r2, r3
 800992e:	d3d3      	bcc.n	80098d8 <IntToUnicode+0x18>
  }
}
 8009930:	bf00      	nop
 8009932:	bf00      	nop
 8009934:	371c      	adds	r7, #28
 8009936:	46bd      	mov	sp, r7
 8009938:	bc80      	pop	{r7}
 800993a:	4770      	bx	lr

0800993c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a0d      	ldr	r2, [pc, #52]	; (8009980 <HAL_PCD_MspInit+0x44>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d113      	bne.n	8009976 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800994e:	4b0d      	ldr	r3, [pc, #52]	; (8009984 <HAL_PCD_MspInit+0x48>)
 8009950:	69db      	ldr	r3, [r3, #28]
 8009952:	4a0c      	ldr	r2, [pc, #48]	; (8009984 <HAL_PCD_MspInit+0x48>)
 8009954:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009958:	61d3      	str	r3, [r2, #28]
 800995a:	4b0a      	ldr	r3, [pc, #40]	; (8009984 <HAL_PCD_MspInit+0x48>)
 800995c:	69db      	ldr	r3, [r3, #28]
 800995e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009962:	60fb      	str	r3, [r7, #12]
 8009964:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009966:	2200      	movs	r2, #0
 8009968:	2100      	movs	r1, #0
 800996a:	2014      	movs	r0, #20
 800996c:	f7f7 fd8b 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009970:	2014      	movs	r0, #20
 8009972:	f7f7 fda4 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009976:	bf00      	nop
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	40005c00 	.word	0x40005c00
 8009984:	40021000 	.word	0x40021000

08009988 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800999c:	4619      	mov	r1, r3
 800999e:	4610      	mov	r0, r2
 80099a0:	f7fe fdd6 	bl	8008550 <USBD_LL_SetupStage>
}
 80099a4:	bf00      	nop
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	460b      	mov	r3, r1
 80099b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80099be:	78fa      	ldrb	r2, [r7, #3]
 80099c0:	6879      	ldr	r1, [r7, #4]
 80099c2:	4613      	mov	r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	4413      	add	r3, r2
 80099c8:	00db      	lsls	r3, r3, #3
 80099ca:	440b      	add	r3, r1
 80099cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	78fb      	ldrb	r3, [r7, #3]
 80099d4:	4619      	mov	r1, r3
 80099d6:	f7fe fe08 	bl	80085ea <USBD_LL_DataOutStage>
}
 80099da:	bf00      	nop
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b082      	sub	sp, #8
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	460b      	mov	r3, r1
 80099ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80099f4:	78fa      	ldrb	r2, [r7, #3]
 80099f6:	6879      	ldr	r1, [r7, #4]
 80099f8:	4613      	mov	r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4413      	add	r3, r2
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	440b      	add	r3, r1
 8009a02:	333c      	adds	r3, #60	; 0x3c
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	78fb      	ldrb	r3, [r7, #3]
 8009a08:	4619      	mov	r1, r3
 8009a0a:	f7fe fe5f 	bl	80086cc <USBD_LL_DataInStage>
}
 8009a0e:	bf00      	nop
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b082      	sub	sp, #8
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fe ff6f 	bl	8008908 <USBD_LL_SOF>
}
 8009a2a:	bf00      	nop
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b084      	sub	sp, #16
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d001      	beq.n	8009a4a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a46:	f7f7 f8e0 	bl	8000c0a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009a50:	7bfa      	ldrb	r2, [r7, #15]
 8009a52:	4611      	mov	r1, r2
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fe ff1f 	bl	8008898 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7fe fed8 	bl	8008816 <USBD_LL_Reset>
}
 8009a66:	bf00      	nop
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7fe ff19 	bl	80088b6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d005      	beq.n	8009a98 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a8c:	4b04      	ldr	r3, [pc, #16]	; (8009aa0 <HAL_PCD_SuspendCallback+0x30>)
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	4a03      	ldr	r2, [pc, #12]	; (8009aa0 <HAL_PCD_SuspendCallback+0x30>)
 8009a92:	f043 0306 	orr.w	r3, r3, #6
 8009a96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a98:	bf00      	nop
 8009a9a:	3708      	adds	r7, #8
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	e000ed00 	.word	0xe000ed00

08009aa4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fe ff13 	bl	80088de <USBD_LL_Resume>
}
 8009ab8:	bf00      	nop
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009ac8:	4a28      	ldr	r2, [pc, #160]	; (8009b6c <USBD_LL_Init+0xac>)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a26      	ldr	r2, [pc, #152]	; (8009b6c <USBD_LL_Init+0xac>)
 8009ad4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009ad8:	4b24      	ldr	r3, [pc, #144]	; (8009b6c <USBD_LL_Init+0xac>)
 8009ada:	4a25      	ldr	r2, [pc, #148]	; (8009b70 <USBD_LL_Init+0xb0>)
 8009adc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009ade:	4b23      	ldr	r3, [pc, #140]	; (8009b6c <USBD_LL_Init+0xac>)
 8009ae0:	2208      	movs	r2, #8
 8009ae2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009ae4:	4b21      	ldr	r3, [pc, #132]	; (8009b6c <USBD_LL_Init+0xac>)
 8009ae6:	2202      	movs	r2, #2
 8009ae8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009aea:	4b20      	ldr	r3, [pc, #128]	; (8009b6c <USBD_LL_Init+0xac>)
 8009aec:	2200      	movs	r2, #0
 8009aee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009af0:	4b1e      	ldr	r3, [pc, #120]	; (8009b6c <USBD_LL_Init+0xac>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009af6:	4b1d      	ldr	r3, [pc, #116]	; (8009b6c <USBD_LL_Init+0xac>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009afc:	481b      	ldr	r0, [pc, #108]	; (8009b6c <USBD_LL_Init+0xac>)
 8009afe:	f7f7 ff2d 	bl	800195c <HAL_PCD_Init>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d001      	beq.n	8009b0c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009b08:	f7f7 f87f 	bl	8000c0a <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b12:	2318      	movs	r3, #24
 8009b14:	2200      	movs	r2, #0
 8009b16:	2100      	movs	r1, #0
 8009b18:	f7f9 fba1 	bl	800325e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b22:	2358      	movs	r3, #88	; 0x58
 8009b24:	2200      	movs	r2, #0
 8009b26:	2180      	movs	r1, #128	; 0x80
 8009b28:	f7f9 fb99 	bl	800325e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b32:	23c0      	movs	r3, #192	; 0xc0
 8009b34:	2200      	movs	r2, #0
 8009b36:	2181      	movs	r1, #129	; 0x81
 8009b38:	f7f9 fb91 	bl	800325e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b42:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009b46:	2200      	movs	r2, #0
 8009b48:	2101      	movs	r1, #1
 8009b4a:	f7f9 fb88 	bl	800325e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2182      	movs	r1, #130	; 0x82
 8009b5c:	f7f9 fb7f 	bl	800325e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20000f98 	.word	0x20000f98
 8009b70:	40005c00 	.word	0x40005c00

08009b74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b80:	2300      	movs	r3, #0
 8009b82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7f7 fff1 	bl	8001b72 <HAL_PCD_Start>
 8009b90:	4603      	mov	r3, r0
 8009b92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f000 f94e 	bl	8009e38 <USBD_Get_USB_Status>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ba0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b084      	sub	sp, #16
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	4608      	mov	r0, r1
 8009bb4:	4611      	mov	r1, r2
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	4603      	mov	r3, r0
 8009bba:	70fb      	strb	r3, [r7, #3]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	70bb      	strb	r3, [r7, #2]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009bd2:	78bb      	ldrb	r3, [r7, #2]
 8009bd4:	883a      	ldrh	r2, [r7, #0]
 8009bd6:	78f9      	ldrb	r1, [r7, #3]
 8009bd8:	f7f8 f969 	bl	8001eae <HAL_PCD_EP_Open>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009be0:	7bfb      	ldrb	r3, [r7, #15]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f000 f928 	bl	8009e38 <USBD_Get_USB_Status>
 8009be8:	4603      	mov	r3, r0
 8009bea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bec:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b084      	sub	sp, #16
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	460b      	mov	r3, r1
 8009c00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c10:	78fa      	ldrb	r2, [r7, #3]
 8009c12:	4611      	mov	r1, r2
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7f8 f9b0 	bl	8001f7a <HAL_PCD_EP_Close>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c1e:	7bfb      	ldrb	r3, [r7, #15]
 8009c20:	4618      	mov	r0, r3
 8009c22:	f000 f909 	bl	8009e38 <USBD_Get_USB_Status>
 8009c26:	4603      	mov	r3, r0
 8009c28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c40:	2300      	movs	r3, #0
 8009c42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c44:	2300      	movs	r3, #0
 8009c46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c4e:	78fa      	ldrb	r2, [r7, #3]
 8009c50:	4611      	mov	r1, r2
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7f8 fa70 	bl	8002138 <HAL_PCD_EP_SetStall>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c5c:	7bfb      	ldrb	r3, [r7, #15]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f000 f8ea 	bl	8009e38 <USBD_Get_USB_Status>
 8009c64:	4603      	mov	r3, r0
 8009c66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c68:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b084      	sub	sp, #16
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c82:	2300      	movs	r3, #0
 8009c84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c8c:	78fa      	ldrb	r2, [r7, #3]
 8009c8e:	4611      	mov	r1, r2
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7f8 fab1 	bl	80021f8 <HAL_PCD_EP_ClrStall>
 8009c96:	4603      	mov	r3, r0
 8009c98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c9a:	7bfb      	ldrb	r3, [r7, #15]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f000 f8cb 	bl	8009e38 <USBD_Get_USB_Status>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ca6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cc2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009cc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	da0c      	bge.n	8009ce6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009ccc:	78fb      	ldrb	r3, [r7, #3]
 8009cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cd2:	68f9      	ldr	r1, [r7, #12]
 8009cd4:	1c5a      	adds	r2, r3, #1
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	00db      	lsls	r3, r3, #3
 8009cde:	440b      	add	r3, r1
 8009ce0:	3302      	adds	r3, #2
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	e00b      	b.n	8009cfe <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009ce6:	78fb      	ldrb	r3, [r7, #3]
 8009ce8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cec:	68f9      	ldr	r1, [r7, #12]
 8009cee:	4613      	mov	r3, r2
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	4413      	add	r3, r2
 8009cf4:	00db      	lsls	r3, r3, #3
 8009cf6:	440b      	add	r3, r1
 8009cf8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009cfc:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3714      	adds	r7, #20
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bc80      	pop	{r7}
 8009d06:	4770      	bx	lr

08009d08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	460b      	mov	r3, r1
 8009d12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d14:	2300      	movs	r3, #0
 8009d16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d22:	78fa      	ldrb	r2, [r7, #3]
 8009d24:	4611      	mov	r1, r2
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7f8 f89c 	bl	8001e64 <HAL_PCD_SetAddress>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f000 f880 	bl	8009e38 <USBD_Get_USB_Status>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b086      	sub	sp, #24
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	60f8      	str	r0, [r7, #12]
 8009d4e:	607a      	str	r2, [r7, #4]
 8009d50:	461a      	mov	r2, r3
 8009d52:	460b      	mov	r3, r1
 8009d54:	72fb      	strb	r3, [r7, #11]
 8009d56:	4613      	mov	r3, r2
 8009d58:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d68:	893b      	ldrh	r3, [r7, #8]
 8009d6a:	7af9      	ldrb	r1, [r7, #11]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	f7f8 f9a0 	bl	80020b2 <HAL_PCD_EP_Transmit>
 8009d72:	4603      	mov	r3, r0
 8009d74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d76:	7dfb      	ldrb	r3, [r7, #23]
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f000 f85d 	bl	8009e38 <USBD_Get_USB_Status>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d82:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3718      	adds	r7, #24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	607a      	str	r2, [r7, #4]
 8009d96:	461a      	mov	r2, r3
 8009d98:	460b      	mov	r3, r1
 8009d9a:	72fb      	strb	r3, [r7, #11]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009da0:	2300      	movs	r3, #0
 8009da2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009da4:	2300      	movs	r3, #0
 8009da6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009dae:	893b      	ldrh	r3, [r7, #8]
 8009db0:	7af9      	ldrb	r1, [r7, #11]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	f7f8 f929 	bl	800200a <HAL_PCD_EP_Receive>
 8009db8:	4603      	mov	r3, r0
 8009dba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dbc:	7dfb      	ldrb	r3, [r7, #23]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f000 f83a 	bl	8009e38 <USBD_Get_USB_Status>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009dc8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3718      	adds	r7, #24
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b082      	sub	sp, #8
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	460b      	mov	r3, r1
 8009ddc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009de4:	78fa      	ldrb	r2, [r7, #3]
 8009de6:	4611      	mov	r1, r2
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7f8 f94b 	bl	8002084 <HAL_PCD_EP_GetRxCount>
 8009dee:	4603      	mov	r3, r0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009e00:	4b02      	ldr	r3, [pc, #8]	; (8009e0c <USBD_static_malloc+0x14>)
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bc80      	pop	{r7}
 8009e0a:	4770      	bx	lr
 8009e0c:	20001284 	.word	0x20001284

08009e10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]

}
 8009e18:	bf00      	nop
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bc80      	pop	{r7}
 8009e20:	4770      	bx	lr

08009e22 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009e2e:	bf00      	nop
 8009e30:	370c      	adds	r7, #12
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bc80      	pop	{r7}
 8009e36:	4770      	bx	lr

08009e38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	4603      	mov	r3, r0
 8009e40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e46:	79fb      	ldrb	r3, [r7, #7]
 8009e48:	2b03      	cmp	r3, #3
 8009e4a:	d817      	bhi.n	8009e7c <USBD_Get_USB_Status+0x44>
 8009e4c:	a201      	add	r2, pc, #4	; (adr r2, 8009e54 <USBD_Get_USB_Status+0x1c>)
 8009e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e52:	bf00      	nop
 8009e54:	08009e65 	.word	0x08009e65
 8009e58:	08009e6b 	.word	0x08009e6b
 8009e5c:	08009e71 	.word	0x08009e71
 8009e60:	08009e77 	.word	0x08009e77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e64:	2300      	movs	r3, #0
 8009e66:	73fb      	strb	r3, [r7, #15]
    break;
 8009e68:	e00b      	b.n	8009e82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e6a:	2302      	movs	r3, #2
 8009e6c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e6e:	e008      	b.n	8009e82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e70:	2301      	movs	r3, #1
 8009e72:	73fb      	strb	r3, [r7, #15]
    break;
 8009e74:	e005      	b.n	8009e82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e76:	2302      	movs	r3, #2
 8009e78:	73fb      	strb	r3, [r7, #15]
    break;
 8009e7a:	e002      	b.n	8009e82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e7c:	2302      	movs	r3, #2
 8009e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e80:	bf00      	nop
  }
  return usb_status;
 8009e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bc80      	pop	{r7}
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop

08009e90 <control>:
uint8_t buff[10];
uint8_t receive_flag = 0;

//平缓到达任意一点
uint8_t control(double x, double z, double angle)
{
 8009e90:	b5b0      	push	{r4, r5, r7, lr}
 8009e92:	b096      	sub	sp, #88	; 0x58
 8009e94:	af02      	add	r7, sp, #8
 8009e96:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8009e9a:	e9c7 2300 	strd	r2, r3, [r7]
	if(x > 30 || x < 0)
 8009e9e:	f04f 0200 	mov.w	r2, #0
 8009ea2:	4b81      	ldr	r3, [pc, #516]	; (800a0a8 <control+0x218>)
 8009ea4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ea8:	f7f6 fd9e 	bl	80009e8 <__aeabi_dcmpgt>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10a      	bne.n	8009ec8 <control+0x38>
 8009eb2:	f04f 0200 	mov.w	r2, #0
 8009eb6:	f04f 0300 	mov.w	r3, #0
 8009eba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ebe:	f7f6 fd75 	bl	80009ac <__aeabi_dcmplt>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d001      	beq.n	8009ecc <control+0x3c>
	{
		return 1;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e0e3      	b.n	800a094 <control+0x204>
	}
	if(z > 8 || z < 0)
 8009ecc:	f04f 0200 	mov.w	r2, #0
 8009ed0:	4b76      	ldr	r3, [pc, #472]	; (800a0ac <control+0x21c>)
 8009ed2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ed6:	f7f6 fd87 	bl	80009e8 <__aeabi_dcmpgt>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10a      	bne.n	8009ef6 <control+0x66>
 8009ee0:	f04f 0200 	mov.w	r2, #0
 8009ee4:	f04f 0300 	mov.w	r3, #0
 8009ee8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009eec:	f7f6 fd5e 	bl	80009ac <__aeabi_dcmplt>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <control+0x6a>
	{
		return 1;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e0cc      	b.n	800a094 <control+0x204>
	}
	if(angle > pi || angle < 0)
 8009efa:	a369      	add	r3, pc, #420	; (adr r3, 800a0a0 <control+0x210>)
 8009efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f00:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009f04:	f7f6 fd70 	bl	80009e8 <__aeabi_dcmpgt>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10a      	bne.n	8009f24 <control+0x94>
 8009f0e:	f04f 0200 	mov.w	r2, #0
 8009f12:	f04f 0300 	mov.w	r3, #0
 8009f16:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009f1a:	f7f6 fd47 	bl	80009ac <__aeabi_dcmplt>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d001      	beq.n	8009f28 <control+0x98>
	{
		return 1;
 8009f24:	2301      	movs	r3, #1
 8009f26:	e0b5      	b.n	800a094 <control+0x204>
	}
	double x_target = x;
 8009f28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f2c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double z_target = z;
 8009f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f34:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double angle_target = angle;
 8009f38:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009f3c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double num = TARGET_SPEND_TIME / STEP_TIME;
 8009f40:	f04f 0200 	mov.w	r2, #0
 8009f44:	4b5a      	ldr	r3, [pc, #360]	; (800a0b0 <control+0x220>)
 8009f46:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double x_error = (x_target - X) / num;
 8009f4a:	4b5a      	ldr	r3, [pc, #360]	; (800a0b4 <control+0x224>)
 8009f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f50:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009f54:	f7f6 f900 	bl	8000158 <__aeabi_dsub>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	4610      	mov	r0, r2
 8009f5e:	4619      	mov	r1, r3
 8009f60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f64:	f7f6 fbda 	bl	800071c <__aeabi_ddiv>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double z_error = (z_target - Z) / num;
 8009f70:	4b51      	ldr	r3, [pc, #324]	; (800a0b8 <control+0x228>)
 8009f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f76:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009f7a:	f7f6 f8ed 	bl	8000158 <__aeabi_dsub>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	460b      	mov	r3, r1
 8009f82:	4610      	mov	r0, r2
 8009f84:	4619      	mov	r1, r3
 8009f86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f8a:	f7f6 fbc7 	bl	800071c <__aeabi_ddiv>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	460b      	mov	r3, r1
 8009f92:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle_error = (angle_target - ANGLE) / num;
 8009f96:	4b49      	ldr	r3, [pc, #292]	; (800a0bc <control+0x22c>)
 8009f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8009fa0:	f7f6 f8da 	bl	8000158 <__aeabi_dsub>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	4610      	mov	r0, r2
 8009faa:	4619      	mov	r1, r3
 8009fac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fb0:	f7f6 fbb4 	bl	800071c <__aeabi_ddiv>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if((x_error == 0) && (z_error == 0) && (angle_error == 0))
 8009fbc:	f04f 0200 	mov.w	r2, #0
 8009fc0:	f04f 0300 	mov.w	r3, #0
 8009fc4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009fc8:	f7f6 fce6 	bl	8000998 <__aeabi_dcmpeq>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d017      	beq.n	800a002 <control+0x172>
 8009fd2:	f04f 0200 	mov.w	r2, #0
 8009fd6:	f04f 0300 	mov.w	r3, #0
 8009fda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009fde:	f7f6 fcdb 	bl	8000998 <__aeabi_dcmpeq>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d00c      	beq.n	800a002 <control+0x172>
 8009fe8:	f04f 0200 	mov.w	r2, #0
 8009fec:	f04f 0300 	mov.w	r3, #0
 8009ff0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009ff4:	f7f6 fcd0 	bl	8000998 <__aeabi_dcmpeq>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d001      	beq.n	800a002 <control+0x172>
	{
		return 0;
 8009ffe:	2300      	movs	r3, #0
 800a000:	e048      	b.n	800a094 <control+0x204>
	}

	for(uint32_t i = 0; i < num; i++)
 800a002:	2300      	movs	r3, #0
 800a004:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a006:	e038      	b.n	800a07a <control+0x1ea>
	{
		X += x_error;
 800a008:	4b2a      	ldr	r3, [pc, #168]	; (800a0b4 <control+0x224>)
 800a00a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a00e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a012:	f7f6 f8a3 	bl	800015c <__adddf3>
 800a016:	4602      	mov	r2, r0
 800a018:	460b      	mov	r3, r1
 800a01a:	4926      	ldr	r1, [pc, #152]	; (800a0b4 <control+0x224>)
 800a01c:	e9c1 2300 	strd	r2, r3, [r1]
		Z += z_error;
 800a020:	4b25      	ldr	r3, [pc, #148]	; (800a0b8 <control+0x228>)
 800a022:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a026:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a02a:	f7f6 f897 	bl	800015c <__adddf3>
 800a02e:	4602      	mov	r2, r0
 800a030:	460b      	mov	r3, r1
 800a032:	4921      	ldr	r1, [pc, #132]	; (800a0b8 <control+0x228>)
 800a034:	e9c1 2300 	strd	r2, r3, [r1]
		ANGLE += angle_error;
 800a038:	4b20      	ldr	r3, [pc, #128]	; (800a0bc <control+0x22c>)
 800a03a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a03e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a042:	f7f6 f88b 	bl	800015c <__adddf3>
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	491c      	ldr	r1, [pc, #112]	; (800a0bc <control+0x22c>)
 800a04c:	e9c1 2300 	strd	r2, r3, [r1]
		caculate_position(X, Z, ANGLE);
 800a050:	4b18      	ldr	r3, [pc, #96]	; (800a0b4 <control+0x224>)
 800a052:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a056:	4b18      	ldr	r3, [pc, #96]	; (800a0b8 <control+0x228>)
 800a058:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a05c:	4b17      	ldr	r3, [pc, #92]	; (800a0bc <control+0x22c>)
 800a05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a062:	e9cd 2300 	strd	r2, r3, [sp]
 800a066:	4622      	mov	r2, r4
 800a068:	462b      	mov	r3, r5
 800a06a:	f000 f829 	bl	800a0c0 <caculate_position>
		HAL_Delay(STEP_TIME);
 800a06e:	2032      	movs	r0, #50	; 0x32
 800a070:	f7f7 f90e 	bl	8001290 <HAL_Delay>
	for(uint32_t i = 0; i < num; i++)
 800a074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a076:	3301      	adds	r3, #1
 800a078:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a07a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a07c:	f7f6 f9aa 	bl	80003d4 <__aeabi_ui2d>
 800a080:	4602      	mov	r2, r0
 800a082:	460b      	mov	r3, r1
 800a084:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a088:	f7f6 fcae 	bl	80009e8 <__aeabi_dcmpgt>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1ba      	bne.n	800a008 <control+0x178>
	}

	return 0;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3750      	adds	r7, #80	; 0x50
 800a098:	46bd      	mov	sp, r7
 800a09a:	bdb0      	pop	{r4, r5, r7, pc}
 800a09c:	f3af 8000 	nop.w
 800a0a0:	54411744 	.word	0x54411744
 800a0a4:	400921fb 	.word	0x400921fb
 800a0a8:	403e0000 	.word	0x403e0000
 800a0ac:	40200000 	.word	0x40200000
 800a0b0:	404e0000 	.word	0x404e0000
 800a0b4:	20000188 	.word	0x20000188
 800a0b8:	200014a8 	.word	0x200014a8
 800a0bc:	200014b0 	.word	0x200014b0

0800a0c0 <caculate_position>:

//根据坐标计算舵机输出角度
void caculate_position(double x, double z, double angle)
{
 800a0c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a0c4:	b0bc      	sub	sp, #240	; 0xf0
 800a0c6:	af02      	add	r7, sp, #8
 800a0c8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800a0cc:	e9c7 2300 	strd	r2, r3, [r7]
	double z_init = 7.5 - x * 0.25;
 800a0d0:	f04f 0200 	mov.w	r2, #0
 800a0d4:	4b3c      	ldr	r3, [pc, #240]	; (800a1c8 <caculate_position+0x108>)
 800a0d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0da:	f7f6 f9f5 	bl	80004c8 <__aeabi_dmul>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	f04f 0000 	mov.w	r0, #0
 800a0e6:	4939      	ldr	r1, [pc, #228]	; (800a1cc <caculate_position+0x10c>)
 800a0e8:	f7f6 f836 	bl	8000158 <__aeabi_dsub>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

	double A = z_init - z;
 800a0f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0f8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800a0fc:	f7f6 f82c 	bl	8000158 <__aeabi_dsub>
 800a100:	4602      	mov	r2, r0
 800a102:	460b      	mov	r3, r1
 800a104:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	double B = 10.5;
 800a108:	f04f 0200 	mov.w	r2, #0
 800a10c:	4b30      	ldr	r3, [pc, #192]	; (800a1d0 <caculate_position+0x110>)
 800a10e:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	double C = 15;
 800a112:	f04f 0200 	mov.w	r2, #0
 800a116:	4b2f      	ldr	r3, [pc, #188]	; (800a1d4 <caculate_position+0x114>)
 800a118:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	double D = 17;
 800a11c:	f04f 0200 	mov.w	r2, #0
 800a120:	4b2d      	ldr	r3, [pc, #180]	; (800a1d8 <caculate_position+0x118>)
 800a122:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	double pwm_1;
	double pwm_2;
	double pwm_3;
	double pwm_4;

	if (x >= 0 && x < 15)
 800a126:	f04f 0200 	mov.w	r2, #0
 800a12a:	f04f 0300 	mov.w	r3, #0
 800a12e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a132:	f7f6 fc4f 	bl	80009d4 <__aeabi_dcmpge>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d00f      	beq.n	800a15c <caculate_position+0x9c>
 800a13c:	f04f 0200 	mov.w	r2, #0
 800a140:	4b24      	ldr	r3, [pc, #144]	; (800a1d4 <caculate_position+0x114>)
 800a142:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a146:	f7f6 fc31 	bl	80009ac <__aeabi_dcmplt>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d005      	beq.n	800a15c <caculate_position+0x9c>
	{
		alpha = 0;
 800a150:	f04f 0200 	mov.w	r2, #0
 800a154:	f04f 0300 	mov.w	r3, #0
 800a158:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	}
	if (x >= 15)
 800a15c:	f04f 0200 	mov.w	r2, #0
 800a160:	4b1c      	ldr	r3, [pc, #112]	; (800a1d4 <caculate_position+0x114>)
 800a162:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a166:	f7f6 fc35 	bl	80009d4 <__aeabi_dcmpge>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d039      	beq.n	800a1e4 <caculate_position+0x124>
	{
		alpha = (90 * (x - 15) / (40 - 15)) * (pi / 180);
 800a170:	f04f 0200 	mov.w	r2, #0
 800a174:	4b17      	ldr	r3, [pc, #92]	; (800a1d4 <caculate_position+0x114>)
 800a176:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a17a:	f7f5 ffed 	bl	8000158 <__aeabi_dsub>
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	4610      	mov	r0, r2
 800a184:	4619      	mov	r1, r3
 800a186:	f04f 0200 	mov.w	r2, #0
 800a18a:	4b14      	ldr	r3, [pc, #80]	; (800a1dc <caculate_position+0x11c>)
 800a18c:	f7f6 f99c 	bl	80004c8 <__aeabi_dmul>
 800a190:	4602      	mov	r2, r0
 800a192:	460b      	mov	r3, r1
 800a194:	4610      	mov	r0, r2
 800a196:	4619      	mov	r1, r3
 800a198:	f04f 0200 	mov.w	r2, #0
 800a19c:	4b10      	ldr	r3, [pc, #64]	; (800a1e0 <caculate_position+0x120>)
 800a19e:	f7f6 fabd 	bl	800071c <__aeabi_ddiv>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	4610      	mov	r0, r2
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	a305      	add	r3, pc, #20	; (adr r3, 800a1c0 <caculate_position+0x100>)
 800a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b0:	f7f6 f98a 	bl	80004c8 <__aeabi_dmul>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 800a1bc:	e012      	b.n	800a1e4 <caculate_position+0x124>
 800a1be:	bf00      	nop
 800a1c0:	a2506b91 	.word	0xa2506b91
 800a1c4:	3f91df46 	.word	0x3f91df46
 800a1c8:	3fd00000 	.word	0x3fd00000
 800a1cc:	401e0000 	.word	0x401e0000
 800a1d0:	40250000 	.word	0x40250000
 800a1d4:	402e0000 	.word	0x402e0000
 800a1d8:	40310000 	.word	0x40310000
 800a1dc:	40568000 	.word	0x40568000
 800a1e0:	40390000 	.word	0x40390000
	}
	double x_ = x - B * sin(alpha);
 800a1e4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a1e8:	f001 f89a 	bl	800b320 <sin>
 800a1ec:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800a1f0:	f7f6 f96a 	bl	80004c8 <__aeabi_dmul>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a1fc:	f7f5 ffac 	bl	8000158 <__aeabi_dsub>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	double Y_ = 0 - A - B * cos(alpha);
 800a208:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800a20c:	f04f 0000 	mov.w	r0, #0
 800a210:	f04f 0100 	mov.w	r1, #0
 800a214:	f7f5 ffa0 	bl	8000158 <__aeabi_dsub>
 800a218:	4602      	mov	r2, r0
 800a21a:	460b      	mov	r3, r1
 800a21c:	4690      	mov	r8, r2
 800a21e:	4699      	mov	r9, r3
 800a220:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a224:	f001 f832 	bl	800b28c <cos>
 800a228:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800a22c:	f7f6 f94c 	bl	80004c8 <__aeabi_dmul>
 800a230:	4602      	mov	r2, r0
 800a232:	460b      	mov	r3, r1
 800a234:	4640      	mov	r0, r8
 800a236:	4649      	mov	r1, r9
 800a238:	f7f5 ff8e 	bl	8000158 <__aeabi_dsub>
 800a23c:	4602      	mov	r2, r0
 800a23e:	460b      	mov	r3, r1
 800a240:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	theta = acos((pow(x_, 2) + pow(Y_, 2) - pow(C, 2) - pow(D, 2)) / (2 * C * D));
 800a244:	f04f 0200 	mov.w	r2, #0
 800a248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a24c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800a250:	f001 f8d4 	bl	800b3fc <pow>
 800a254:	4680      	mov	r8, r0
 800a256:	4689      	mov	r9, r1
 800a258:	f04f 0200 	mov.w	r2, #0
 800a25c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a260:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800a264:	f001 f8ca 	bl	800b3fc <pow>
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	4640      	mov	r0, r8
 800a26e:	4649      	mov	r1, r9
 800a270:	f7f5 ff74 	bl	800015c <__adddf3>
 800a274:	4602      	mov	r2, r0
 800a276:	460b      	mov	r3, r1
 800a278:	4690      	mov	r8, r2
 800a27a:	4699      	mov	r9, r3
 800a27c:	f04f 0200 	mov.w	r2, #0
 800a280:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a284:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800a288:	f001 f8b8 	bl	800b3fc <pow>
 800a28c:	4602      	mov	r2, r0
 800a28e:	460b      	mov	r3, r1
 800a290:	4640      	mov	r0, r8
 800a292:	4649      	mov	r1, r9
 800a294:	f7f5 ff60 	bl	8000158 <__aeabi_dsub>
 800a298:	4602      	mov	r2, r0
 800a29a:	460b      	mov	r3, r1
 800a29c:	4690      	mov	r8, r2
 800a29e:	4699      	mov	r9, r3
 800a2a0:	f04f 0200 	mov.w	r2, #0
 800a2a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2a8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a2ac:	f001 f8a6 	bl	800b3fc <pow>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4640      	mov	r0, r8
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	f7f5 ff4e 	bl	8000158 <__aeabi_dsub>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	460b      	mov	r3, r1
 800a2c0:	4690      	mov	r8, r2
 800a2c2:	4699      	mov	r9, r3
 800a2c4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	f7f5 ff46 	bl	800015c <__adddf3>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4610      	mov	r0, r2
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800a2dc:	f7f6 f8f4 	bl	80004c8 <__aeabi_dmul>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	4640      	mov	r0, r8
 800a2e6:	4649      	mov	r1, r9
 800a2e8:	f7f6 fa18 	bl	800071c <__aeabi_ddiv>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	4610      	mov	r0, r2
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	f001 f85a 	bl	800b3ac <acos>
 800a2f8:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98

	double M = D * sin(theta);
 800a2fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a300:	f001 f80e 	bl	800b320 <sin>
 800a304:	4602      	mov	r2, r0
 800a306:	460b      	mov	r3, r1
 800a308:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a30c:	f7f6 f8dc 	bl	80004c8 <__aeabi_dmul>
 800a310:	4602      	mov	r2, r0
 800a312:	460b      	mov	r3, r1
 800a314:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	double P = x_ * cos(alpha) - Y_ * sin(alpha);
 800a318:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a31c:	f000 ffb6 	bl	800b28c <cos>
 800a320:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800a324:	f7f6 f8d0 	bl	80004c8 <__aeabi_dmul>
 800a328:	4602      	mov	r2, r0
 800a32a:	460b      	mov	r3, r1
 800a32c:	4690      	mov	r8, r2
 800a32e:	4699      	mov	r9, r3
 800a330:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a334:	f000 fff4 	bl	800b320 <sin>
 800a338:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800a33c:	f7f6 f8c4 	bl	80004c8 <__aeabi_dmul>
 800a340:	4602      	mov	r2, r0
 800a342:	460b      	mov	r3, r1
 800a344:	4640      	mov	r0, r8
 800a346:	4649      	mov	r1, r9
 800a348:	f7f5 ff06 	bl	8000158 <__aeabi_dsub>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	double Q = x_ * sin(alpha) + Y_ * cos(alpha);
 800a354:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a358:	f000 ffe2 	bl	800b320 <sin>
 800a35c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800a360:	f7f6 f8b2 	bl	80004c8 <__aeabi_dmul>
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	4690      	mov	r8, r2
 800a36a:	4699      	mov	r9, r3
 800a36c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a370:	f000 ff8c 	bl	800b28c <cos>
 800a374:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800a378:	f7f6 f8a6 	bl	80004c8 <__aeabi_dmul>
 800a37c:	4602      	mov	r2, r0
 800a37e:	460b      	mov	r3, r1
 800a380:	4640      	mov	r0, r8
 800a382:	4649      	mov	r1, r9
 800a384:	f7f5 feea 	bl	800015c <__adddf3>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	double a = pow(P, 2) + pow(Q, 2);
 800a390:	f04f 0200 	mov.w	r2, #0
 800a394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a398:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800a39c:	f001 f82e 	bl	800b3fc <pow>
 800a3a0:	4680      	mov	r8, r0
 800a3a2:	4689      	mov	r9, r1
 800a3a4:	f04f 0200 	mov.w	r2, #0
 800a3a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a3ac:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a3b0:	f001 f824 	bl	800b3fc <pow>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	4640      	mov	r0, r8
 800a3ba:	4649      	mov	r1, r9
 800a3bc:	f7f5 fece 	bl	800015c <__adddf3>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	double b = - 2 * M * P;
 800a3c8:	f04f 0200 	mov.w	r2, #0
 800a3cc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800a3d0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a3d4:	f7f6 f878 	bl	80004c8 <__aeabi_dmul>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	460b      	mov	r3, r1
 800a3dc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800a3e0:	f7f6 f872 	bl	80004c8 <__aeabi_dmul>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	double c = pow(M, 2) - pow(Q, 2);
 800a3ec:	f04f 0200 	mov.w	r2, #0
 800a3f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a3f4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a3f8:	f001 f800 	bl	800b3fc <pow>
 800a3fc:	4680      	mov	r8, r0
 800a3fe:	4689      	mov	r9, r1
 800a400:	f04f 0200 	mov.w	r2, #0
 800a404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a408:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a40c:	f000 fff6 	bl	800b3fc <pow>
 800a410:	4602      	mov	r2, r0
 800a412:	460b      	mov	r3, r1
 800a414:	4640      	mov	r0, r8
 800a416:	4649      	mov	r1, r9
 800a418:	f7f5 fe9e 	bl	8000158 <__aeabi_dsub>
 800a41c:	4602      	mov	r2, r0
 800a41e:	460b      	mov	r3, r1
 800a420:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	double delta = pow(b, 2) - 4 * a * c;
 800a424:	f04f 0200 	mov.w	r2, #0
 800a428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a42c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a430:	f000 ffe4 	bl	800b3fc <pow>
 800a434:	4680      	mov	r8, r0
 800a436:	4689      	mov	r9, r1
 800a438:	f04f 0200 	mov.w	r2, #0
 800a43c:	4b84      	ldr	r3, [pc, #528]	; (800a650 <caculate_position+0x590>)
 800a43e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a442:	f7f6 f841 	bl	80004c8 <__aeabi_dmul>
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	4610      	mov	r0, r2
 800a44c:	4619      	mov	r1, r3
 800a44e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a452:	f7f6 f839 	bl	80004c8 <__aeabi_dmul>
 800a456:	4602      	mov	r2, r0
 800a458:	460b      	mov	r3, r1
 800a45a:	4640      	mov	r0, r8
 800a45c:	4649      	mov	r1, r9
 800a45e:	f7f5 fe7b 	bl	8000158 <__aeabi_dsub>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double cos_beta_1 = (- b + sqrt(delta)) / (2 * a);
 800a46a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a46e:	f001 f82d 	bl	800b4cc <sqrt>
 800a472:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800a476:	f7f5 fe6f 	bl	8000158 <__aeabi_dsub>
 800a47a:	4602      	mov	r2, r0
 800a47c:	460b      	mov	r3, r1
 800a47e:	4690      	mov	r8, r2
 800a480:	4699      	mov	r9, r3
 800a482:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a486:	4602      	mov	r2, r0
 800a488:	460b      	mov	r3, r1
 800a48a:	f7f5 fe67 	bl	800015c <__adddf3>
 800a48e:	4602      	mov	r2, r0
 800a490:	460b      	mov	r3, r1
 800a492:	4640      	mov	r0, r8
 800a494:	4649      	mov	r1, r9
 800a496:	f7f6 f941 	bl	800071c <__aeabi_ddiv>
 800a49a:	4602      	mov	r2, r0
 800a49c:	460b      	mov	r3, r1
 800a49e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double cos_beta_2 = (-b - sqrt(delta)) / (2 * a);
 800a4a2:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800a4a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4a6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800a4aa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a4ae:	f001 f80d 	bl	800b4cc <sqrt>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	4629      	mov	r1, r5
 800a4ba:	f7f5 fe4d 	bl	8000158 <__aeabi_dsub>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	4614      	mov	r4, r2
 800a4c4:	461d      	mov	r5, r3
 800a4c6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	f7f5 fe45 	bl	800015c <__adddf3>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	4629      	mov	r1, r5
 800a4da:	f7f6 f91f 	bl	800071c <__aeabi_ddiv>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	double beta_1 = acos(cos_beta_1);
 800a4e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a4ea:	f000 ff5f 	bl	800b3ac <acos>
 800a4ee:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
	double beta_2 = acos(cos_beta_2);
 800a4f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a4f6:	f000 ff59 	bl	800b3ac <acos>
 800a4fa:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

	//double x_caculate;
	double x_caculate_1 = B * sin(alpha) + C * sin(alpha + beta_1) + D * sin(alpha + beta_1 + theta);
 800a4fe:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a502:	f000 ff0d 	bl	800b320 <sin>
 800a506:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800a50a:	f7f5 ffdd 	bl	80004c8 <__aeabi_dmul>
 800a50e:	4602      	mov	r2, r0
 800a510:	460b      	mov	r3, r1
 800a512:	4614      	mov	r4, r2
 800a514:	461d      	mov	r5, r3
 800a516:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a51a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a51e:	f7f5 fe1d 	bl	800015c <__adddf3>
 800a522:	4602      	mov	r2, r0
 800a524:	460b      	mov	r3, r1
 800a526:	4610      	mov	r0, r2
 800a528:	4619      	mov	r1, r3
 800a52a:	f000 fef9 	bl	800b320 <sin>
 800a52e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800a532:	f7f5 ffc9 	bl	80004c8 <__aeabi_dmul>
 800a536:	4602      	mov	r2, r0
 800a538:	460b      	mov	r3, r1
 800a53a:	4620      	mov	r0, r4
 800a53c:	4629      	mov	r1, r5
 800a53e:	f7f5 fe0d 	bl	800015c <__adddf3>
 800a542:	4602      	mov	r2, r0
 800a544:	460b      	mov	r3, r1
 800a546:	4614      	mov	r4, r2
 800a548:	461d      	mov	r5, r3
 800a54a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a54e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a552:	f7f5 fe03 	bl	800015c <__adddf3>
 800a556:	4602      	mov	r2, r0
 800a558:	460b      	mov	r3, r1
 800a55a:	4610      	mov	r0, r2
 800a55c:	4619      	mov	r1, r3
 800a55e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800a562:	f7f5 fdfb 	bl	800015c <__adddf3>
 800a566:	4602      	mov	r2, r0
 800a568:	460b      	mov	r3, r1
 800a56a:	4610      	mov	r0, r2
 800a56c:	4619      	mov	r1, r3
 800a56e:	f000 fed7 	bl	800b320 <sin>
 800a572:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800a576:	f7f5 ffa7 	bl	80004c8 <__aeabi_dmul>
 800a57a:	4602      	mov	r2, r0
 800a57c:	460b      	mov	r3, r1
 800a57e:	4620      	mov	r0, r4
 800a580:	4629      	mov	r1, r5
 800a582:	f7f5 fdeb 	bl	800015c <__adddf3>
 800a586:	4602      	mov	r2, r0
 800a588:	460b      	mov	r3, r1
 800a58a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double x_caculate_2 = B * sin(alpha) + C * sin(alpha + beta_2) + D * sin(alpha + beta_2 + theta);
 800a58e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a592:	f000 fec5 	bl	800b320 <sin>
 800a596:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800a59a:	f7f5 ff95 	bl	80004c8 <__aeabi_dmul>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	4614      	mov	r4, r2
 800a5a4:	461d      	mov	r5, r3
 800a5a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a5aa:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a5ae:	f7f5 fdd5 	bl	800015c <__adddf3>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	4610      	mov	r0, r2
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	f000 feb1 	bl	800b320 <sin>
 800a5be:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800a5c2:	f7f5 ff81 	bl	80004c8 <__aeabi_dmul>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	4629      	mov	r1, r5
 800a5ce:	f7f5 fdc5 	bl	800015c <__adddf3>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	4614      	mov	r4, r2
 800a5d8:	461d      	mov	r5, r3
 800a5da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a5de:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a5e2:	f7f5 fdbb 	bl	800015c <__adddf3>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	4610      	mov	r0, r2
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800a5f2:	f7f5 fdb3 	bl	800015c <__adddf3>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	4610      	mov	r0, r2
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	f000 fe8f 	bl	800b320 <sin>
 800a602:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800a606:	f7f5 ff5f 	bl	80004c8 <__aeabi_dmul>
 800a60a:	4602      	mov	r2, r0
 800a60c:	460b      	mov	r3, r1
 800a60e:	4620      	mov	r0, r4
 800a610:	4629      	mov	r1, r5
 800a612:	f7f5 fda3 	bl	800015c <__adddf3>
 800a616:	4602      	mov	r2, r0
 800a618:	460b      	mov	r3, r1
 800a61a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	if (abs_small(x_caculate_1, x_caculate_2, x) == x_caculate_1)
 800a61e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a622:	e9cd 2300 	strd	r2, r3, [sp]
 800a626:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a62a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a62e:	f000 f9a3 	bl	800a978 <abs_small>
 800a632:	4602      	mov	r2, r0
 800a634:	460b      	mov	r3, r1
 800a636:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a63a:	f7f6 f9ad 	bl	8000998 <__aeabi_dcmpeq>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d007      	beq.n	800a654 <caculate_position+0x594>
	{
		beta = beta_1;
 800a644:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a648:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 800a64c:	e006      	b.n	800a65c <caculate_position+0x59c>
 800a64e:	bf00      	nop
 800a650:	40100000 	.word	0x40100000
		//x_caculate = x_caculate_1;
	}
	else
	{
		beta = beta_2;
 800a654:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a658:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		//x_caculate = x_caculate_2;
	}

	pwm_1 = 500 + angle / (pi / 2000);
 800a65c:	a338      	add	r3, pc, #224	; (adr r3, 800a740 <caculate_position+0x680>)
 800a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a662:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 800a666:	f7f6 f859 	bl	800071c <__aeabi_ddiv>
 800a66a:	4602      	mov	r2, r0
 800a66c:	460b      	mov	r3, r1
 800a66e:	4610      	mov	r0, r2
 800a670:	4619      	mov	r1, r3
 800a672:	f04f 0200 	mov.w	r2, #0
 800a676:	4b3a      	ldr	r3, [pc, #232]	; (800a760 <caculate_position+0x6a0>)
 800a678:	f7f5 fd70 	bl	800015c <__adddf3>
 800a67c:	4602      	mov	r2, r0
 800a67e:	460b      	mov	r3, r1
 800a680:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	pwm_2 = 2500 - (pi / 2 - alpha) / (pi / 2000);
 800a684:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800a688:	a12f      	add	r1, pc, #188	; (adr r1, 800a748 <caculate_position+0x688>)
 800a68a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a68e:	f7f5 fd63 	bl	8000158 <__aeabi_dsub>
 800a692:	4602      	mov	r2, r0
 800a694:	460b      	mov	r3, r1
 800a696:	4610      	mov	r0, r2
 800a698:	4619      	mov	r1, r3
 800a69a:	a329      	add	r3, pc, #164	; (adr r3, 800a740 <caculate_position+0x680>)
 800a69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a0:	f7f6 f83c 	bl	800071c <__aeabi_ddiv>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	a129      	add	r1, pc, #164	; (adr r1, 800a750 <caculate_position+0x690>)
 800a6aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6ae:	f7f5 fd53 	bl	8000158 <__aeabi_dsub>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	pwm_3 = 2500 - (pi / 2 - beta) / (pi / 2000);
 800a6ba:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a6be:	a122      	add	r1, pc, #136	; (adr r1, 800a748 <caculate_position+0x688>)
 800a6c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6c4:	f7f5 fd48 	bl	8000158 <__aeabi_dsub>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	4610      	mov	r0, r2
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	a31b      	add	r3, pc, #108	; (adr r3, 800a740 <caculate_position+0x680>)
 800a6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d6:	f7f6 f821 	bl	800071c <__aeabi_ddiv>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	460b      	mov	r3, r1
 800a6de:	a11c      	add	r1, pc, #112	; (adr r1, 800a750 <caculate_position+0x690>)
 800a6e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6e4:	f7f5 fd38 	bl	8000158 <__aeabi_dsub>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
	pwm_4 = 2420 - theta / (pi / 2000);
 800a6f0:	a313      	add	r3, pc, #76	; (adr r3, 800a740 <caculate_position+0x680>)
 800a6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a6fa:	f7f6 f80f 	bl	800071c <__aeabi_ddiv>
 800a6fe:	4602      	mov	r2, r0
 800a700:	460b      	mov	r3, r1
 800a702:	a115      	add	r1, pc, #84	; (adr r1, 800a758 <caculate_position+0x698>)
 800a704:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a708:	f7f5 fd26 	bl	8000158 <__aeabi_dsub>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	e9c7 2304 	strd	r2, r3, [r7, #16]

	output(&pwm_1, &pwm_2, &pwm_3, &pwm_4, NULL, NULL);
 800a714:	f107 0310 	add.w	r3, r7, #16
 800a718:	f107 0218 	add.w	r2, r7, #24
 800a71c:	f107 0120 	add.w	r1, r7, #32
 800a720:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800a724:	2400      	movs	r4, #0
 800a726:	9401      	str	r4, [sp, #4]
 800a728:	2400      	movs	r4, #0
 800a72a:	9400      	str	r4, [sp, #0]
 800a72c:	f000 f8c6 	bl	800a8bc <output>
}
 800a730:	bf00      	nop
 800a732:	37e8      	adds	r7, #232	; 0xe8
 800a734:	46bd      	mov	sp, r7
 800a736:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a73a:	bf00      	nop
 800a73c:	f3af 8000 	nop.w
 800a740:	b68848fa 	.word	0xb68848fa
 800a744:	3f59bc65 	.word	0x3f59bc65
 800a748:	54411744 	.word	0x54411744
 800a74c:	3ff921fb 	.word	0x3ff921fb
 800a750:	00000000 	.word	0x00000000
 800a754:	40a38800 	.word	0x40a38800
 800a758:	00000000 	.word	0x00000000
 800a75c:	40a2e800 	.word	0x40a2e800
 800a760:	407f4000 	.word	0x407f4000

0800a764 <catch_reset>:

uint8_t catch_reset()
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af02      	add	r7, sp, #8
	if((X == X_origin) && (Z == Z_origin) && (ANGLE == ANGLE_origin))
 800a76a:	4b34      	ldr	r3, [pc, #208]	; (800a83c <catch_reset+0xd8>)
 800a76c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a770:	f04f 0200 	mov.w	r2, #0
 800a774:	4b32      	ldr	r3, [pc, #200]	; (800a840 <catch_reset+0xdc>)
 800a776:	f7f6 f90f 	bl	8000998 <__aeabi_dcmpeq>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d047      	beq.n	800a810 <catch_reset+0xac>
 800a780:	4b30      	ldr	r3, [pc, #192]	; (800a844 <catch_reset+0xe0>)
 800a782:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a786:	f04f 0200 	mov.w	r2, #0
 800a78a:	f04f 0300 	mov.w	r3, #0
 800a78e:	f7f6 f903 	bl	8000998 <__aeabi_dcmpeq>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d03b      	beq.n	800a810 <catch_reset+0xac>
 800a798:	4b2b      	ldr	r3, [pc, #172]	; (800a848 <catch_reset+0xe4>)
 800a79a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a79e:	f04f 0200 	mov.w	r2, #0
 800a7a2:	f04f 0300 	mov.w	r3, #0
 800a7a6:	f7f6 f8f7 	bl	8000998 <__aeabi_dcmpeq>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d02f      	beq.n	800a810 <catch_reset+0xac>
	{
		//第一次初始化
		HAL_UART_Receive_IT(&huart2, buff, 10);
 800a7b0:	220a      	movs	r2, #10
 800a7b2:	4926      	ldr	r1, [pc, #152]	; (800a84c <catch_reset+0xe8>)
 800a7b4:	4826      	ldr	r0, [pc, #152]	; (800a850 <catch_reset+0xec>)
 800a7b6:	f7fa f9be 	bl	8004b36 <HAL_UART_Receive_IT>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	4825      	ldr	r0, [pc, #148]	; (800a854 <catch_reset+0xf0>)
 800a7be:	f7f9 faff 	bl	8003dc0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800a7c2:	2104      	movs	r1, #4
 800a7c4:	4823      	ldr	r0, [pc, #140]	; (800a854 <catch_reset+0xf0>)
 800a7c6:	f7f9 fafb 	bl	8003dc0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800a7ca:	2108      	movs	r1, #8
 800a7cc:	4821      	ldr	r0, [pc, #132]	; (800a854 <catch_reset+0xf0>)
 800a7ce:	f7f9 faf7 	bl	8003dc0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800a7d2:	210c      	movs	r1, #12
 800a7d4:	481f      	ldr	r0, [pc, #124]	; (800a854 <catch_reset+0xf0>)
 800a7d6:	f7f9 faf3 	bl	8003dc0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800a7da:	2100      	movs	r1, #0
 800a7dc:	481e      	ldr	r0, [pc, #120]	; (800a858 <catch_reset+0xf4>)
 800a7de:	f7f9 faef 	bl	8003dc0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800a7e2:	2104      	movs	r1, #4
 800a7e4:	481c      	ldr	r0, [pc, #112]	; (800a858 <catch_reset+0xf4>)
 800a7e6:	f7f9 faeb 	bl	8003dc0 <HAL_TIM_PWM_Start>
		catch_release();
 800a7ea:	f000 f837 	bl	800a85c <catch_release>
		caculate_position(10, 0, 0);
 800a7ee:	f04f 0200 	mov.w	r2, #0
 800a7f2:	f04f 0300 	mov.w	r3, #0
 800a7f6:	e9cd 2300 	strd	r2, r3, [sp]
 800a7fa:	f04f 0200 	mov.w	r2, #0
 800a7fe:	f04f 0300 	mov.w	r3, #0
 800a802:	f04f 0000 	mov.w	r0, #0
 800a806:	490e      	ldr	r1, [pc, #56]	; (800a840 <catch_reset+0xdc>)
 800a808:	f7ff fc5a 	bl	800a0c0 <caculate_position>
		return 0;
 800a80c:	2300      	movs	r3, #0
 800a80e:	e011      	b.n	800a834 <catch_reset+0xd0>
	}

	catch_release();
 800a810:	f000 f824 	bl	800a85c <catch_release>
	control(X_origin, Z_origin, ANGLE_origin);
 800a814:	f04f 0200 	mov.w	r2, #0
 800a818:	f04f 0300 	mov.w	r3, #0
 800a81c:	e9cd 2300 	strd	r2, r3, [sp]
 800a820:	f04f 0200 	mov.w	r2, #0
 800a824:	f04f 0300 	mov.w	r3, #0
 800a828:	f04f 0000 	mov.w	r0, #0
 800a82c:	4904      	ldr	r1, [pc, #16]	; (800a840 <catch_reset+0xdc>)
 800a82e:	f7ff fb2f 	bl	8009e90 <control>


	return 0;
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	20000188 	.word	0x20000188
 800a840:	40240000 	.word	0x40240000
 800a844:	200014a8 	.word	0x200014a8
 800a848:	200014b0 	.word	0x200014b0
 800a84c:	200014b8 	.word	0x200014b8
 800a850:	200002b8 	.word	0x200002b8
 800a854:	20000228 	.word	0x20000228
 800a858:	20000270 	.word	0x20000270

0800a85c <catch_release>:

//释放
void catch_release()
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af02      	add	r7, sp, #8
	double pwm6 = 1200;
 800a862:	f04f 0200 	mov.w	r2, #0
 800a866:	4b08      	ldr	r3, [pc, #32]	; (800a888 <catch_release+0x2c>)
 800a868:	e9c7 2300 	strd	r2, r3, [r7]
	output(NULL, NULL, NULL, NULL, NULL, &pwm6);
 800a86c:	463b      	mov	r3, r7
 800a86e:	9301      	str	r3, [sp, #4]
 800a870:	2300      	movs	r3, #0
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	2300      	movs	r3, #0
 800a876:	2200      	movs	r2, #0
 800a878:	2100      	movs	r1, #0
 800a87a:	2000      	movs	r0, #0
 800a87c:	f000 f81e 	bl	800a8bc <output>
}
 800a880:	bf00      	nop
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	4092c000 	.word	0x4092c000

0800a88c <catch>:

//抓取
void catch()
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af02      	add	r7, sp, #8
	double pwm6 = 700;
 800a892:	f04f 0200 	mov.w	r2, #0
 800a896:	4b08      	ldr	r3, [pc, #32]	; (800a8b8 <catch+0x2c>)
 800a898:	e9c7 2300 	strd	r2, r3, [r7]
	output(NULL, NULL, NULL, NULL, NULL, &pwm6);
 800a89c:	463b      	mov	r3, r7
 800a89e:	9301      	str	r3, [sp, #4]
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	9300      	str	r3, [sp, #0]
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	f000 f806 	bl	800a8bc <output>
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	4085e000 	.word	0x4085e000

0800a8bc <output>:

//底层pwm输出接口
void output(double *pwm1, double *pwm2, double *pwm3, double *pwm4, double *pwm5,  double *pwm6)
{
 800a8bc:	b590      	push	{r4, r7, lr}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
 800a8c8:	603b      	str	r3, [r7, #0]
	if(pwm1 != NULL)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00a      	beq.n	800a8e6 <output+0x2a>
	{
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, *pwm1);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d6:	4926      	ldr	r1, [pc, #152]	; (800a970 <output+0xb4>)
 800a8d8:	680c      	ldr	r4, [r1, #0]
 800a8da:	4610      	mov	r0, r2
 800a8dc:	4619      	mov	r1, r3
 800a8de:	f7f6 f8cb 	bl	8000a78 <__aeabi_d2uiz>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	6363      	str	r3, [r4, #52]	; 0x34
	}
	if(pwm2 != NULL)
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00a      	beq.n	800a902 <output+0x46>
	{
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, *pwm2);
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f2:	491f      	ldr	r1, [pc, #124]	; (800a970 <output+0xb4>)
 800a8f4:	680c      	ldr	r4, [r1, #0]
 800a8f6:	4610      	mov	r0, r2
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	f7f6 f8bd 	bl	8000a78 <__aeabi_d2uiz>
 800a8fe:	4603      	mov	r3, r0
 800a900:	63a3      	str	r3, [r4, #56]	; 0x38
	}
	if(pwm3 != NULL)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d00a      	beq.n	800a91e <output+0x62>
	{
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, *pwm3);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90e:	4918      	ldr	r1, [pc, #96]	; (800a970 <output+0xb4>)
 800a910:	680c      	ldr	r4, [r1, #0]
 800a912:	4610      	mov	r0, r2
 800a914:	4619      	mov	r1, r3
 800a916:	f7f6 f8af 	bl	8000a78 <__aeabi_d2uiz>
 800a91a:	4603      	mov	r3, r0
 800a91c:	63e3      	str	r3, [r4, #60]	; 0x3c
	}
	if(pwm4 != NULL)
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00a      	beq.n	800a93a <output+0x7e>
	{
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, *pwm4);
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92a:	4911      	ldr	r1, [pc, #68]	; (800a970 <output+0xb4>)
 800a92c:	680c      	ldr	r4, [r1, #0]
 800a92e:	4610      	mov	r0, r2
 800a930:	4619      	mov	r1, r3
 800a932:	f7f6 f8a1 	bl	8000a78 <__aeabi_d2uiz>
 800a936:	4603      	mov	r3, r0
 800a938:	6423      	str	r3, [r4, #64]	; 0x40
	}
	if(pwm5 != NULL)
 800a93a:	6a3b      	ldr	r3, [r7, #32]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d004      	beq.n	800a94a <output+0x8e>
	{
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 1500);
 800a940:	4b0c      	ldr	r3, [pc, #48]	; (800a974 <output+0xb8>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a948:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(pwm6 != NULL)
 800a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00a      	beq.n	800a966 <output+0xaa>
	{
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, *pwm6);
 800a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a956:	4907      	ldr	r1, [pc, #28]	; (800a974 <output+0xb8>)
 800a958:	680c      	ldr	r4, [r1, #0]
 800a95a:	4610      	mov	r0, r2
 800a95c:	4619      	mov	r1, r3
 800a95e:	f7f6 f88b 	bl	8000a78 <__aeabi_d2uiz>
 800a962:	4603      	mov	r3, r0
 800a964:	63a3      	str	r3, [r4, #56]	; 0x38
	}
}
 800a966:	bf00      	nop
 800a968:	3714      	adds	r7, #20
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd90      	pop	{r4, r7, pc}
 800a96e:	bf00      	nop
 800a970:	20000228 	.word	0x20000228
 800a974:	20000270 	.word	0x20000270

0800a978 <abs_small>:

double abs_small(double x, double y, double target)
{
 800a978:	b5b0      	push	{r4, r5, r7, lr}
 800a97a:	b08a      	sub	sp, #40	; 0x28
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800a982:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double x_ = x - target;
 800a986:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a98a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a98e:	f7f5 fbe3 	bl	8000158 <__aeabi_dsub>
 800a992:	4602      	mov	r2, r0
 800a994:	460b      	mov	r3, r1
 800a996:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double y_ = y - target;
 800a99a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a99e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a9a2:	f7f5 fbd9 	bl	8000158 <__aeabi_dsub>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if (x_ < 0)
 800a9ae:	f04f 0200 	mov.w	r2, #0
 800a9b2:	f04f 0300 	mov.w	r3, #0
 800a9b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a9ba:	f7f5 fff7 	bl	80009ac <__aeabi_dcmplt>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d009      	beq.n	800a9d8 <abs_small+0x60>
	{
		x_ = -x_;
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	603b      	str	r3, [r7, #0]
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a9ce:	607b      	str	r3, [r7, #4]
 800a9d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}
	if (y_ < 0)
 800a9d8:	f04f 0200 	mov.w	r2, #0
 800a9dc:	f04f 0300 	mov.w	r3, #0
 800a9e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a9e4:	f7f5 ffe2 	bl	80009ac <__aeabi_dcmplt>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d005      	beq.n	800a9fa <abs_small+0x82>
	{
		y_ = -y_;
 800a9ee:	69bc      	ldr	r4, [r7, #24]
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800a9f6:	e9c7 4506 	strd	r4, r5, [r7, #24]
	}
	if (x_ <= y_)
 800a9fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a9fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800aa02:	f7f5 ffdd 	bl	80009c0 <__aeabi_dcmple>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d002      	beq.n	800aa12 <abs_small+0x9a>
	{
		return x;
 800aa0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aa10:	e001      	b.n	800aa16 <abs_small+0x9e>
	}

	return y;
 800aa12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800aa16:	4610      	mov	r0, r2
 800aa18:	4619      	mov	r1, r3
 800aa1a:	3728      	adds	r7, #40	; 0x28
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bdb0      	pop	{r4, r5, r7, pc}

0800aa20 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//回调函数
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a19      	ldr	r2, [pc, #100]	; (800aa94 <HAL_UART_RxCpltCallback+0x74>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d12c      	bne.n	800aa8c <HAL_UART_RxCpltCallback+0x6c>
	{
		for(uint8_t num = 0; num < 7; num++)
 800aa32:	2300      	movs	r3, #0
 800aa34:	73fb      	strb	r3, [r7, #15]
 800aa36:	e021      	b.n	800aa7c <HAL_UART_RxCpltCallback+0x5c>
		{
			if(buff[num] == receive_head_1 || buff[num] == receive_head_2)
 800aa38:	7bfb      	ldrb	r3, [r7, #15]
 800aa3a:	4a17      	ldr	r2, [pc, #92]	; (800aa98 <HAL_UART_RxCpltCallback+0x78>)
 800aa3c:	5cd3      	ldrb	r3, [r2, r3]
 800aa3e:	2bff      	cmp	r3, #255	; 0xff
 800aa40:	d004      	beq.n	800aa4c <HAL_UART_RxCpltCallback+0x2c>
 800aa42:	7bfb      	ldrb	r3, [r7, #15]
 800aa44:	4a14      	ldr	r2, [pc, #80]	; (800aa98 <HAL_UART_RxCpltCallback+0x78>)
 800aa46:	5cd3      	ldrb	r3, [r2, r3]
 800aa48:	2bfe      	cmp	r3, #254	; 0xfe
 800aa4a:	d114      	bne.n	800aa76 <HAL_UART_RxCpltCallback+0x56>
			{
				buff[0] = buff[num];
 800aa4c:	7bfb      	ldrb	r3, [r7, #15]
 800aa4e:	4a12      	ldr	r2, [pc, #72]	; (800aa98 <HAL_UART_RxCpltCallback+0x78>)
 800aa50:	5cd2      	ldrb	r2, [r2, r3]
 800aa52:	4b11      	ldr	r3, [pc, #68]	; (800aa98 <HAL_UART_RxCpltCallback+0x78>)
 800aa54:	701a      	strb	r2, [r3, #0]
				buff[1] = buff[num + 1];
 800aa56:	7bfb      	ldrb	r3, [r7, #15]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	4a0f      	ldr	r2, [pc, #60]	; (800aa98 <HAL_UART_RxCpltCallback+0x78>)
 800aa5c:	5cd2      	ldrb	r2, [r2, r3]
 800aa5e:	4b0e      	ldr	r3, [pc, #56]	; (800aa98 <HAL_UART_RxCpltCallback+0x78>)
 800aa60:	705a      	strb	r2, [r3, #1]
				buff[2] = buff[num + 2];
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
 800aa64:	3302      	adds	r3, #2
 800aa66:	4a0c      	ldr	r2, [pc, #48]	; (800aa98 <HAL_UART_RxCpltCallback+0x78>)
 800aa68:	5cd2      	ldrb	r2, [r2, r3]
 800aa6a:	4b0b      	ldr	r3, [pc, #44]	; (800aa98 <HAL_UART_RxCpltCallback+0x78>)
 800aa6c:	709a      	strb	r2, [r3, #2]
				receive_flag = 1;
 800aa6e:	4b0b      	ldr	r3, [pc, #44]	; (800aa9c <HAL_UART_RxCpltCallback+0x7c>)
 800aa70:	2201      	movs	r2, #1
 800aa72:	701a      	strb	r2, [r3, #0]
				return ;
 800aa74:	e00a      	b.n	800aa8c <HAL_UART_RxCpltCallback+0x6c>
		for(uint8_t num = 0; num < 7; num++)
 800aa76:	7bfb      	ldrb	r3, [r7, #15]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	73fb      	strb	r3, [r7, #15]
 800aa7c:	7bfb      	ldrb	r3, [r7, #15]
 800aa7e:	2b06      	cmp	r3, #6
 800aa80:	d9da      	bls.n	800aa38 <HAL_UART_RxCpltCallback+0x18>
			}
		}
		HAL_UART_Receive_IT(&huart2, buff, 10);
 800aa82:	220a      	movs	r2, #10
 800aa84:	4904      	ldr	r1, [pc, #16]	; (800aa98 <HAL_UART_RxCpltCallback+0x78>)
 800aa86:	4806      	ldr	r0, [pc, #24]	; (800aaa0 <HAL_UART_RxCpltCallback+0x80>)
 800aa88:	f7fa f855 	bl	8004b36 <HAL_UART_Receive_IT>
	}

}
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	40004400 	.word	0x40004400
 800aa98:	200014b8 	.word	0x200014b8
 800aa9c:	200014c2 	.word	0x200014c2
 800aaa0:	200002b8 	.word	0x200002b8

0800aaa4 <wait_for_catch>:

void wait_for_catch()
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	af00      	add	r7, sp, #0
	if(receive_flag)
 800aaa8:	4b0c      	ldr	r3, [pc, #48]	; (800aadc <wait_for_catch+0x38>)
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d013      	beq.n	800aad8 <wait_for_catch+0x34>
	{
		receive_flag = 0;
 800aab0:	4b0a      	ldr	r3, [pc, #40]	; (800aadc <wait_for_catch+0x38>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	701a      	strb	r2, [r3, #0]
		if(buff[0] == receive_head_1)
 800aab6:	4b0a      	ldr	r3, [pc, #40]	; (800aae0 <wait_for_catch+0x3c>)
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	2bff      	cmp	r3, #255	; 0xff
 800aabc:	d101      	bne.n	800aac2 <wait_for_catch+0x1e>
		{
			catch_first_color_to_left();
 800aabe:	f000 f813 	bl	800aae8 <catch_first_color_to_left>
		}
		if(buff[0] == receive_head_2)
 800aac2:	4b07      	ldr	r3, [pc, #28]	; (800aae0 <wait_for_catch+0x3c>)
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	2bfe      	cmp	r3, #254	; 0xfe
 800aac8:	d101      	bne.n	800aace <wait_for_catch+0x2a>
		{
			catch_second_color_to_right();
 800aaca:	f000 f919 	bl	800ad00 <catch_second_color_to_right>
		}
		HAL_UART_Receive_IT(&huart2, buff, 10);
 800aace:	220a      	movs	r2, #10
 800aad0:	4903      	ldr	r1, [pc, #12]	; (800aae0 <wait_for_catch+0x3c>)
 800aad2:	4804      	ldr	r0, [pc, #16]	; (800aae4 <wait_for_catch+0x40>)
 800aad4:	f7fa f82f 	bl	8004b36 <HAL_UART_Receive_IT>
	}
}
 800aad8:	bf00      	nop
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	200014c2 	.word	0x200014c2
 800aae0:	200014b8 	.word	0x200014b8
 800aae4:	200002b8 	.word	0x200002b8

0800aae8 <catch_first_color_to_left>:

void catch_first_color_to_left()
{
 800aae8:	b5b0      	push	{r4, r5, r7, lr}
 800aaea:	b08a      	sub	sp, #40	; 0x28
 800aaec:	af02      	add	r7, sp, #8
	double x_o = (buff[2] * x_scale + x_offset);
 800aaee:	4b7a      	ldr	r3, [pc, #488]	; (800acd8 <catch_first_color_to_left+0x1f0>)
 800aaf0:	789b      	ldrb	r3, [r3, #2]
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7f5 fc7e 	bl	80003f4 <__aeabi_i2d>
 800aaf8:	a371      	add	r3, pc, #452	; (adr r3, 800acc0 <catch_first_color_to_left+0x1d8>)
 800aafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafe:	f7f5 fce3 	bl	80004c8 <__aeabi_dmul>
 800ab02:	4602      	mov	r2, r0
 800ab04:	460b      	mov	r3, r1
 800ab06:	4610      	mov	r0, r2
 800ab08:	4619      	mov	r1, r3
 800ab0a:	f04f 0200 	mov.w	r2, #0
 800ab0e:	4b73      	ldr	r3, [pc, #460]	; (800acdc <catch_first_color_to_left+0x1f4>)
 800ab10:	f7f5 fb24 	bl	800015c <__adddf3>
 800ab14:	4602      	mov	r2, r0
 800ab16:	460b      	mov	r3, r1
 800ab18:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double y_o = (buff[1] * y_scale - y_offset);
 800ab1c:	4b6e      	ldr	r3, [pc, #440]	; (800acd8 <catch_first_color_to_left+0x1f0>)
 800ab1e:	785b      	ldrb	r3, [r3, #1]
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7f5 fc67 	bl	80003f4 <__aeabi_i2d>
 800ab26:	a368      	add	r3, pc, #416	; (adr r3, 800acc8 <catch_first_color_to_left+0x1e0>)
 800ab28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2c:	f7f5 fccc 	bl	80004c8 <__aeabi_dmul>
 800ab30:	4602      	mov	r2, r0
 800ab32:	460b      	mov	r3, r1
 800ab34:	4610      	mov	r0, r2
 800ab36:	4619      	mov	r1, r3
 800ab38:	f04f 0200 	mov.w	r2, #0
 800ab3c:	4b68      	ldr	r3, [pc, #416]	; (800ace0 <catch_first_color_to_left+0x1f8>)
 800ab3e:	f7f5 fb0b 	bl	8000158 <__aeabi_dsub>
 800ab42:	4602      	mov	r2, r0
 800ab44:	460b      	mov	r3, r1
 800ab46:	e9c7 2302 	strd	r2, r3, [r7, #8]
	//到达目标上空
	double x = sqrt(pow(x_o, 2) + pow(y_o, 2));
 800ab4a:	f04f 0200 	mov.w	r2, #0
 800ab4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ab56:	f000 fc51 	bl	800b3fc <pow>
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	460d      	mov	r5, r1
 800ab5e:	f04f 0200 	mov.w	r2, #0
 800ab62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ab6a:	f000 fc47 	bl	800b3fc <pow>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	460b      	mov	r3, r1
 800ab72:	4620      	mov	r0, r4
 800ab74:	4629      	mov	r1, r5
 800ab76:	f7f5 faf1 	bl	800015c <__adddf3>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	4610      	mov	r0, r2
 800ab80:	4619      	mov	r1, r3
 800ab82:	f000 fca3 	bl	800b4cc <sqrt>
 800ab86:	e9c7 0100 	strd	r0, r1, [r7]
	double angle = atan(x_o / y_o);
 800ab8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ab92:	f7f5 fdc3 	bl	800071c <__aeabi_ddiv>
 800ab96:	4602      	mov	r2, r0
 800ab98:	460b      	mov	r3, r1
 800ab9a:	4610      	mov	r0, r2
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	f000 f9eb 	bl	800af78 <atan>
 800aba2:	e9c7 0106 	strd	r0, r1, [r7, #24]
	if(angle < 0)
 800aba6:	f04f 0200 	mov.w	r2, #0
 800abaa:	f04f 0300 	mov.w	r3, #0
 800abae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800abb2:	f7f5 fefb 	bl	80009ac <__aeabi_dcmplt>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00a      	beq.n	800abd2 <catch_first_color_to_left+0xea>
	{
			angle = pi + angle;
 800abbc:	a344      	add	r3, pc, #272	; (adr r3, 800acd0 <catch_first_color_to_left+0x1e8>)
 800abbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800abc6:	f7f5 fac9 	bl	800015c <__adddf3>
 800abca:	4602      	mov	r2, r0
 800abcc:	460b      	mov	r3, r1
 800abce:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}
	X_TARGET = x;
 800abd2:	4944      	ldr	r1, [pc, #272]	; (800ace4 <catch_first_color_to_left+0x1fc>)
 800abd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abd8:	e9c1 2300 	strd	r2, r3, [r1]
	Z_TARGET = 5;
 800abdc:	4942      	ldr	r1, [pc, #264]	; (800ace8 <catch_first_color_to_left+0x200>)
 800abde:	f04f 0200 	mov.w	r2, #0
 800abe2:	4b42      	ldr	r3, [pc, #264]	; (800acec <catch_first_color_to_left+0x204>)
 800abe4:	e9c1 2300 	strd	r2, r3, [r1]
	ANGLE_TARGET = angle;
 800abe8:	4941      	ldr	r1, [pc, #260]	; (800acf0 <catch_first_color_to_left+0x208>)
 800abea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800abee:	e9c1 2300 	strd	r2, r3, [r1]
	control(X_TARGET, Z_TARGET, ANGLE_TARGET);
 800abf2:	4b3c      	ldr	r3, [pc, #240]	; (800ace4 <catch_first_color_to_left+0x1fc>)
 800abf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800abf8:	4b3b      	ldr	r3, [pc, #236]	; (800ace8 <catch_first_color_to_left+0x200>)
 800abfa:	e9d3 4500 	ldrd	r4, r5, [r3]
 800abfe:	4b3c      	ldr	r3, [pc, #240]	; (800acf0 <catch_first_color_to_left+0x208>)
 800ac00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac04:	e9cd 2300 	strd	r2, r3, [sp]
 800ac08:	4622      	mov	r2, r4
 800ac0a:	462b      	mov	r3, r5
 800ac0c:	f7ff f940 	bl	8009e90 <control>
	//打开爪子
	catch_release();
 800ac10:	f7ff fe24 	bl	800a85c <catch_release>
	//对准目标
	Z_TARGET = 0;
 800ac14:	4934      	ldr	r1, [pc, #208]	; (800ace8 <catch_first_color_to_left+0x200>)
 800ac16:	f04f 0200 	mov.w	r2, #0
 800ac1a:	f04f 0300 	mov.w	r3, #0
 800ac1e:	e9c1 2300 	strd	r2, r3, [r1]
	control(X_TARGET, Z_TARGET, ANGLE_TARGET);
 800ac22:	4b30      	ldr	r3, [pc, #192]	; (800ace4 <catch_first_color_to_left+0x1fc>)
 800ac24:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac28:	4b2f      	ldr	r3, [pc, #188]	; (800ace8 <catch_first_color_to_left+0x200>)
 800ac2a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ac2e:	4b30      	ldr	r3, [pc, #192]	; (800acf0 <catch_first_color_to_left+0x208>)
 800ac30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac34:	e9cd 2300 	strd	r2, r3, [sp]
 800ac38:	4622      	mov	r2, r4
 800ac3a:	462b      	mov	r3, r5
 800ac3c:	f7ff f928 	bl	8009e90 <control>
	//夹取目标
	catch();
 800ac40:	f7ff fe24 	bl	800a88c <catch>
	//抬起目标
	Z_TARGET = 5;
 800ac44:	4928      	ldr	r1, [pc, #160]	; (800ace8 <catch_first_color_to_left+0x200>)
 800ac46:	f04f 0200 	mov.w	r2, #0
 800ac4a:	4b28      	ldr	r3, [pc, #160]	; (800acec <catch_first_color_to_left+0x204>)
 800ac4c:	e9c1 2300 	strd	r2, r3, [r1]
	control(X_TARGET, Z_TARGET, ANGLE_TARGET);
 800ac50:	4b24      	ldr	r3, [pc, #144]	; (800ace4 <catch_first_color_to_left+0x1fc>)
 800ac52:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac56:	4b24      	ldr	r3, [pc, #144]	; (800ace8 <catch_first_color_to_left+0x200>)
 800ac58:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ac5c:	4b24      	ldr	r3, [pc, #144]	; (800acf0 <catch_first_color_to_left+0x208>)
 800ac5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac62:	e9cd 2300 	strd	r2, r3, [sp]
 800ac66:	4622      	mov	r2, r4
 800ac68:	462b      	mov	r3, r5
 800ac6a:	f7ff f911 	bl	8009e90 <control>
	//转移目标
	X_TARGET = 25;
 800ac6e:	491d      	ldr	r1, [pc, #116]	; (800ace4 <catch_first_color_to_left+0x1fc>)
 800ac70:	f04f 0200 	mov.w	r2, #0
 800ac74:	4b1f      	ldr	r3, [pc, #124]	; (800acf4 <catch_first_color_to_left+0x20c>)
 800ac76:	e9c1 2300 	strd	r2, r3, [r1]
	ANGLE_TARGET = 0;
 800ac7a:	491d      	ldr	r1, [pc, #116]	; (800acf0 <catch_first_color_to_left+0x208>)
 800ac7c:	f04f 0200 	mov.w	r2, #0
 800ac80:	f04f 0300 	mov.w	r3, #0
 800ac84:	e9c1 2300 	strd	r2, r3, [r1]
	control(X_TARGET, Z_TARGET, ANGLE_TARGET);
 800ac88:	4b16      	ldr	r3, [pc, #88]	; (800ace4 <catch_first_color_to_left+0x1fc>)
 800ac8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac8e:	4b16      	ldr	r3, [pc, #88]	; (800ace8 <catch_first_color_to_left+0x200>)
 800ac90:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ac94:	4b16      	ldr	r3, [pc, #88]	; (800acf0 <catch_first_color_to_left+0x208>)
 800ac96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9a:	e9cd 2300 	strd	r2, r3, [sp]
 800ac9e:	4622      	mov	r2, r4
 800aca0:	462b      	mov	r3, r5
 800aca2:	f7ff f8f5 	bl	8009e90 <control>
	//释放目标到指定区域
	catch_release();
 800aca6:	f7ff fdd9 	bl	800a85c <catch_release>
	catch_reset();
 800acaa:	f7ff fd5b 	bl	800a764 <catch_reset>
	HAL_UART_Receive_IT(&huart2, buff, 10);
 800acae:	220a      	movs	r2, #10
 800acb0:	4909      	ldr	r1, [pc, #36]	; (800acd8 <catch_first_color_to_left+0x1f0>)
 800acb2:	4811      	ldr	r0, [pc, #68]	; (800acf8 <catch_first_color_to_left+0x210>)
 800acb4:	f7f9 ff3f 	bl	8004b36 <HAL_UART_Receive_IT>
}
 800acb8:	bf00      	nop
 800acba:	3720      	adds	r7, #32
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bdb0      	pop	{r4, r5, r7, pc}
 800acc0:	60dd67c6 	.word	0x60dd67c6
 800acc4:	3fb67c8a 	.word	0x3fb67c8a
 800acc8:	50f50f52 	.word	0x50f50f52
 800accc:	3fc0f50f 	.word	0x3fc0f50f
 800acd0:	54411744 	.word	0x54411744
 800acd4:	400921fb 	.word	0x400921fb
 800acd8:	200014b8 	.word	0x200014b8
 800acdc:	40220000 	.word	0x40220000
 800ace0:	402f0000 	.word	0x402f0000
 800ace4:	20000000 	.word	0x20000000
 800ace8:	20000218 	.word	0x20000218
 800acec:	40140000 	.word	0x40140000
 800acf0:	20000220 	.word	0x20000220
 800acf4:	40390000 	.word	0x40390000
 800acf8:	200002b8 	.word	0x200002b8
 800acfc:	00000000 	.word	0x00000000

0800ad00 <catch_second_color_to_right>:

void catch_second_color_to_right()
{
 800ad00:	b5b0      	push	{r4, r5, r7, lr}
 800ad02:	b08a      	sub	sp, #40	; 0x28
 800ad04:	af02      	add	r7, sp, #8
	//到达目标上空
	double x_o = (buff[2] * x_scale + x_offset);
 800ad06:	4b7a      	ldr	r3, [pc, #488]	; (800aef0 <catch_second_color_to_right+0x1f0>)
 800ad08:	789b      	ldrb	r3, [r3, #2]
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7f5 fb72 	bl	80003f4 <__aeabi_i2d>
 800ad10:	a371      	add	r3, pc, #452	; (adr r3, 800aed8 <catch_second_color_to_right+0x1d8>)
 800ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad16:	f7f5 fbd7 	bl	80004c8 <__aeabi_dmul>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	4610      	mov	r0, r2
 800ad20:	4619      	mov	r1, r3
 800ad22:	f04f 0200 	mov.w	r2, #0
 800ad26:	4b73      	ldr	r3, [pc, #460]	; (800aef4 <catch_second_color_to_right+0x1f4>)
 800ad28:	f7f5 fa18 	bl	800015c <__adddf3>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	460b      	mov	r3, r1
 800ad30:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double y_o = (buff[1] * y_scale - y_offset);
 800ad34:	4b6e      	ldr	r3, [pc, #440]	; (800aef0 <catch_second_color_to_right+0x1f0>)
 800ad36:	785b      	ldrb	r3, [r3, #1]
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7f5 fb5b 	bl	80003f4 <__aeabi_i2d>
 800ad3e:	a368      	add	r3, pc, #416	; (adr r3, 800aee0 <catch_second_color_to_right+0x1e0>)
 800ad40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad44:	f7f5 fbc0 	bl	80004c8 <__aeabi_dmul>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	4610      	mov	r0, r2
 800ad4e:	4619      	mov	r1, r3
 800ad50:	f04f 0200 	mov.w	r2, #0
 800ad54:	4b68      	ldr	r3, [pc, #416]	; (800aef8 <catch_second_color_to_right+0x1f8>)
 800ad56:	f7f5 f9ff 	bl	8000158 <__aeabi_dsub>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	//到达目标上空
	double x = sqrt(pow(x_o, 2) + pow(y_o, 2));
 800ad62:	f04f 0200 	mov.w	r2, #0
 800ad66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ad6e:	f000 fb45 	bl	800b3fc <pow>
 800ad72:	4604      	mov	r4, r0
 800ad74:	460d      	mov	r5, r1
 800ad76:	f04f 0200 	mov.w	r2, #0
 800ad7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad82:	f000 fb3b 	bl	800b3fc <pow>
 800ad86:	4602      	mov	r2, r0
 800ad88:	460b      	mov	r3, r1
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	f7f5 f9e5 	bl	800015c <__adddf3>
 800ad92:	4602      	mov	r2, r0
 800ad94:	460b      	mov	r3, r1
 800ad96:	4610      	mov	r0, r2
 800ad98:	4619      	mov	r1, r3
 800ad9a:	f000 fb97 	bl	800b4cc <sqrt>
 800ad9e:	e9c7 0100 	strd	r0, r1, [r7]
	double angle = atan(x_o / y_o);
 800ada2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ada6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800adaa:	f7f5 fcb7 	bl	800071c <__aeabi_ddiv>
 800adae:	4602      	mov	r2, r0
 800adb0:	460b      	mov	r3, r1
 800adb2:	4610      	mov	r0, r2
 800adb4:	4619      	mov	r1, r3
 800adb6:	f000 f8df 	bl	800af78 <atan>
 800adba:	e9c7 0106 	strd	r0, r1, [r7, #24]
	if(angle < 0)
 800adbe:	f04f 0200 	mov.w	r2, #0
 800adc2:	f04f 0300 	mov.w	r3, #0
 800adc6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800adca:	f7f5 fdef 	bl	80009ac <__aeabi_dcmplt>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00a      	beq.n	800adea <catch_second_color_to_right+0xea>
	{
		angle = pi + angle;
 800add4:	a344      	add	r3, pc, #272	; (adr r3, 800aee8 <catch_second_color_to_right+0x1e8>)
 800add6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800adde:	f7f5 f9bd 	bl	800015c <__adddf3>
 800ade2:	4602      	mov	r2, r0
 800ade4:	460b      	mov	r3, r1
 800ade6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}
	X_TARGET = x;
 800adea:	4944      	ldr	r1, [pc, #272]	; (800aefc <catch_second_color_to_right+0x1fc>)
 800adec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adf0:	e9c1 2300 	strd	r2, r3, [r1]
	Z_TARGET = 5;
 800adf4:	4942      	ldr	r1, [pc, #264]	; (800af00 <catch_second_color_to_right+0x200>)
 800adf6:	f04f 0200 	mov.w	r2, #0
 800adfa:	4b42      	ldr	r3, [pc, #264]	; (800af04 <catch_second_color_to_right+0x204>)
 800adfc:	e9c1 2300 	strd	r2, r3, [r1]
	ANGLE_TARGET = angle;
 800ae00:	4941      	ldr	r1, [pc, #260]	; (800af08 <catch_second_color_to_right+0x208>)
 800ae02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ae06:	e9c1 2300 	strd	r2, r3, [r1]
	control(X_TARGET, Z_TARGET, ANGLE_TARGET);
 800ae0a:	4b3c      	ldr	r3, [pc, #240]	; (800aefc <catch_second_color_to_right+0x1fc>)
 800ae0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ae10:	4b3b      	ldr	r3, [pc, #236]	; (800af00 <catch_second_color_to_right+0x200>)
 800ae12:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ae16:	4b3c      	ldr	r3, [pc, #240]	; (800af08 <catch_second_color_to_right+0x208>)
 800ae18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1c:	e9cd 2300 	strd	r2, r3, [sp]
 800ae20:	4622      	mov	r2, r4
 800ae22:	462b      	mov	r3, r5
 800ae24:	f7ff f834 	bl	8009e90 <control>
	//打开爪子
	catch_release();
 800ae28:	f7ff fd18 	bl	800a85c <catch_release>
	//对准目标
	Z_TARGET = 0;
 800ae2c:	4934      	ldr	r1, [pc, #208]	; (800af00 <catch_second_color_to_right+0x200>)
 800ae2e:	f04f 0200 	mov.w	r2, #0
 800ae32:	f04f 0300 	mov.w	r3, #0
 800ae36:	e9c1 2300 	strd	r2, r3, [r1]
	control(X_TARGET, Z_TARGET, ANGLE_TARGET);
 800ae3a:	4b30      	ldr	r3, [pc, #192]	; (800aefc <catch_second_color_to_right+0x1fc>)
 800ae3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ae40:	4b2f      	ldr	r3, [pc, #188]	; (800af00 <catch_second_color_to_right+0x200>)
 800ae42:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ae46:	4b30      	ldr	r3, [pc, #192]	; (800af08 <catch_second_color_to_right+0x208>)
 800ae48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4c:	e9cd 2300 	strd	r2, r3, [sp]
 800ae50:	4622      	mov	r2, r4
 800ae52:	462b      	mov	r3, r5
 800ae54:	f7ff f81c 	bl	8009e90 <control>
	//夹取目标
	catch();
 800ae58:	f7ff fd18 	bl	800a88c <catch>
	//抬起目标
	Z_TARGET = 5;
 800ae5c:	4928      	ldr	r1, [pc, #160]	; (800af00 <catch_second_color_to_right+0x200>)
 800ae5e:	f04f 0200 	mov.w	r2, #0
 800ae62:	4b28      	ldr	r3, [pc, #160]	; (800af04 <catch_second_color_to_right+0x204>)
 800ae64:	e9c1 2300 	strd	r2, r3, [r1]
	control(X_TARGET, Z_TARGET, ANGLE_TARGET);
 800ae68:	4b24      	ldr	r3, [pc, #144]	; (800aefc <catch_second_color_to_right+0x1fc>)
 800ae6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ae6e:	4b24      	ldr	r3, [pc, #144]	; (800af00 <catch_second_color_to_right+0x200>)
 800ae70:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ae74:	4b24      	ldr	r3, [pc, #144]	; (800af08 <catch_second_color_to_right+0x208>)
 800ae76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7a:	e9cd 2300 	strd	r2, r3, [sp]
 800ae7e:	4622      	mov	r2, r4
 800ae80:	462b      	mov	r3, r5
 800ae82:	f7ff f805 	bl	8009e90 <control>
	//转移目标
	X_TARGET = 25;
 800ae86:	491d      	ldr	r1, [pc, #116]	; (800aefc <catch_second_color_to_right+0x1fc>)
 800ae88:	f04f 0200 	mov.w	r2, #0
 800ae8c:	4b1f      	ldr	r3, [pc, #124]	; (800af0c <catch_second_color_to_right+0x20c>)
 800ae8e:	e9c1 2300 	strd	r2, r3, [r1]
	ANGLE_TARGET = pi;
 800ae92:	491d      	ldr	r1, [pc, #116]	; (800af08 <catch_second_color_to_right+0x208>)
 800ae94:	a314      	add	r3, pc, #80	; (adr r3, 800aee8 <catch_second_color_to_right+0x1e8>)
 800ae96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9a:	e9c1 2300 	strd	r2, r3, [r1]
	control(X_TARGET, Z_TARGET, ANGLE_TARGET);
 800ae9e:	4b17      	ldr	r3, [pc, #92]	; (800aefc <catch_second_color_to_right+0x1fc>)
 800aea0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aea4:	4b16      	ldr	r3, [pc, #88]	; (800af00 <catch_second_color_to_right+0x200>)
 800aea6:	e9d3 4500 	ldrd	r4, r5, [r3]
 800aeaa:	4b17      	ldr	r3, [pc, #92]	; (800af08 <catch_second_color_to_right+0x208>)
 800aeac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb0:	e9cd 2300 	strd	r2, r3, [sp]
 800aeb4:	4622      	mov	r2, r4
 800aeb6:	462b      	mov	r3, r5
 800aeb8:	f7fe ffea 	bl	8009e90 <control>
	//释放目标到指定区域
	catch_release();
 800aebc:	f7ff fcce 	bl	800a85c <catch_release>
	catch_reset();
 800aec0:	f7ff fc50 	bl	800a764 <catch_reset>
	HAL_UART_Receive_IT(&huart2, buff, 10);
 800aec4:	220a      	movs	r2, #10
 800aec6:	490a      	ldr	r1, [pc, #40]	; (800aef0 <catch_second_color_to_right+0x1f0>)
 800aec8:	4811      	ldr	r0, [pc, #68]	; (800af10 <catch_second_color_to_right+0x210>)
 800aeca:	f7f9 fe34 	bl	8004b36 <HAL_UART_Receive_IT>
}
 800aece:	bf00      	nop
 800aed0:	3720      	adds	r7, #32
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bdb0      	pop	{r4, r5, r7, pc}
 800aed6:	bf00      	nop
 800aed8:	60dd67c6 	.word	0x60dd67c6
 800aedc:	3fb67c8a 	.word	0x3fb67c8a
 800aee0:	50f50f52 	.word	0x50f50f52
 800aee4:	3fc0f50f 	.word	0x3fc0f50f
 800aee8:	54411744 	.word	0x54411744
 800aeec:	400921fb 	.word	0x400921fb
 800aef0:	200014b8 	.word	0x200014b8
 800aef4:	40220000 	.word	0x40220000
 800aef8:	402f0000 	.word	0x402f0000
 800aefc:	20000000 	.word	0x20000000
 800af00:	20000218 	.word	0x20000218
 800af04:	40140000 	.word	0x40140000
 800af08:	20000220 	.word	0x20000220
 800af0c:	40390000 	.word	0x40390000
 800af10:	200002b8 	.word	0x200002b8

0800af14 <__errno>:
 800af14:	4b01      	ldr	r3, [pc, #4]	; (800af1c <__errno+0x8>)
 800af16:	6818      	ldr	r0, [r3, #0]
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	20000190 	.word	0x20000190

0800af20 <__libc_init_array>:
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	2600      	movs	r6, #0
 800af24:	4d0c      	ldr	r5, [pc, #48]	; (800af58 <__libc_init_array+0x38>)
 800af26:	4c0d      	ldr	r4, [pc, #52]	; (800af5c <__libc_init_array+0x3c>)
 800af28:	1b64      	subs	r4, r4, r5
 800af2a:	10a4      	asrs	r4, r4, #2
 800af2c:	42a6      	cmp	r6, r4
 800af2e:	d109      	bne.n	800af44 <__libc_init_array+0x24>
 800af30:	f002 faec 	bl	800d50c <_init>
 800af34:	2600      	movs	r6, #0
 800af36:	4d0a      	ldr	r5, [pc, #40]	; (800af60 <__libc_init_array+0x40>)
 800af38:	4c0a      	ldr	r4, [pc, #40]	; (800af64 <__libc_init_array+0x44>)
 800af3a:	1b64      	subs	r4, r4, r5
 800af3c:	10a4      	asrs	r4, r4, #2
 800af3e:	42a6      	cmp	r6, r4
 800af40:	d105      	bne.n	800af4e <__libc_init_array+0x2e>
 800af42:	bd70      	pop	{r4, r5, r6, pc}
 800af44:	f855 3b04 	ldr.w	r3, [r5], #4
 800af48:	4798      	blx	r3
 800af4a:	3601      	adds	r6, #1
 800af4c:	e7ee      	b.n	800af2c <__libc_init_array+0xc>
 800af4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800af52:	4798      	blx	r3
 800af54:	3601      	adds	r6, #1
 800af56:	e7f2      	b.n	800af3e <__libc_init_array+0x1e>
 800af58:	0800d7e8 	.word	0x0800d7e8
 800af5c:	0800d7e8 	.word	0x0800d7e8
 800af60:	0800d7e8 	.word	0x0800d7e8
 800af64:	0800d7ec 	.word	0x0800d7ec

0800af68 <memset>:
 800af68:	4603      	mov	r3, r0
 800af6a:	4402      	add	r2, r0
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d100      	bne.n	800af72 <memset+0xa>
 800af70:	4770      	bx	lr
 800af72:	f803 1b01 	strb.w	r1, [r3], #1
 800af76:	e7f9      	b.n	800af6c <memset+0x4>

0800af78 <atan>:
 800af78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af7c:	4bb6      	ldr	r3, [pc, #728]	; (800b258 <atan+0x2e0>)
 800af7e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800af82:	429e      	cmp	r6, r3
 800af84:	4604      	mov	r4, r0
 800af86:	460d      	mov	r5, r1
 800af88:	468b      	mov	fp, r1
 800af8a:	dd17      	ble.n	800afbc <atan+0x44>
 800af8c:	4bb3      	ldr	r3, [pc, #716]	; (800b25c <atan+0x2e4>)
 800af8e:	429e      	cmp	r6, r3
 800af90:	dc01      	bgt.n	800af96 <atan+0x1e>
 800af92:	d109      	bne.n	800afa8 <atan+0x30>
 800af94:	b140      	cbz	r0, 800afa8 <atan+0x30>
 800af96:	4622      	mov	r2, r4
 800af98:	462b      	mov	r3, r5
 800af9a:	4620      	mov	r0, r4
 800af9c:	4629      	mov	r1, r5
 800af9e:	f7f5 f8dd 	bl	800015c <__adddf3>
 800afa2:	4604      	mov	r4, r0
 800afa4:	460d      	mov	r5, r1
 800afa6:	e005      	b.n	800afb4 <atan+0x3c>
 800afa8:	f1bb 0f00 	cmp.w	fp, #0
 800afac:	4cac      	ldr	r4, [pc, #688]	; (800b260 <atan+0x2e8>)
 800afae:	f300 8121 	bgt.w	800b1f4 <atan+0x27c>
 800afb2:	4dac      	ldr	r5, [pc, #688]	; (800b264 <atan+0x2ec>)
 800afb4:	4620      	mov	r0, r4
 800afb6:	4629      	mov	r1, r5
 800afb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afbc:	4baa      	ldr	r3, [pc, #680]	; (800b268 <atan+0x2f0>)
 800afbe:	429e      	cmp	r6, r3
 800afc0:	dc11      	bgt.n	800afe6 <atan+0x6e>
 800afc2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800afc6:	429e      	cmp	r6, r3
 800afc8:	dc0a      	bgt.n	800afe0 <atan+0x68>
 800afca:	a38b      	add	r3, pc, #556	; (adr r3, 800b1f8 <atan+0x280>)
 800afcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd0:	f7f5 f8c4 	bl	800015c <__adddf3>
 800afd4:	2200      	movs	r2, #0
 800afd6:	4ba5      	ldr	r3, [pc, #660]	; (800b26c <atan+0x2f4>)
 800afd8:	f7f5 fd06 	bl	80009e8 <__aeabi_dcmpgt>
 800afdc:	2800      	cmp	r0, #0
 800afde:	d1e9      	bne.n	800afb4 <atan+0x3c>
 800afe0:	f04f 3aff 	mov.w	sl, #4294967295
 800afe4:	e027      	b.n	800b036 <atan+0xbe>
 800afe6:	f000 f997 	bl	800b318 <fabs>
 800afea:	4ba1      	ldr	r3, [pc, #644]	; (800b270 <atan+0x2f8>)
 800afec:	4604      	mov	r4, r0
 800afee:	429e      	cmp	r6, r3
 800aff0:	460d      	mov	r5, r1
 800aff2:	f300 80b8 	bgt.w	800b166 <atan+0x1ee>
 800aff6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800affa:	429e      	cmp	r6, r3
 800affc:	f300 809c 	bgt.w	800b138 <atan+0x1c0>
 800b000:	4602      	mov	r2, r0
 800b002:	460b      	mov	r3, r1
 800b004:	f7f5 f8aa 	bl	800015c <__adddf3>
 800b008:	2200      	movs	r2, #0
 800b00a:	4b98      	ldr	r3, [pc, #608]	; (800b26c <atan+0x2f4>)
 800b00c:	f7f5 f8a4 	bl	8000158 <__aeabi_dsub>
 800b010:	2200      	movs	r2, #0
 800b012:	4606      	mov	r6, r0
 800b014:	460f      	mov	r7, r1
 800b016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b01a:	4620      	mov	r0, r4
 800b01c:	4629      	mov	r1, r5
 800b01e:	f7f5 f89d 	bl	800015c <__adddf3>
 800b022:	4602      	mov	r2, r0
 800b024:	460b      	mov	r3, r1
 800b026:	4630      	mov	r0, r6
 800b028:	4639      	mov	r1, r7
 800b02a:	f7f5 fb77 	bl	800071c <__aeabi_ddiv>
 800b02e:	f04f 0a00 	mov.w	sl, #0
 800b032:	4604      	mov	r4, r0
 800b034:	460d      	mov	r5, r1
 800b036:	4622      	mov	r2, r4
 800b038:	462b      	mov	r3, r5
 800b03a:	4620      	mov	r0, r4
 800b03c:	4629      	mov	r1, r5
 800b03e:	f7f5 fa43 	bl	80004c8 <__aeabi_dmul>
 800b042:	4602      	mov	r2, r0
 800b044:	460b      	mov	r3, r1
 800b046:	4680      	mov	r8, r0
 800b048:	4689      	mov	r9, r1
 800b04a:	f7f5 fa3d 	bl	80004c8 <__aeabi_dmul>
 800b04e:	a36c      	add	r3, pc, #432	; (adr r3, 800b200 <atan+0x288>)
 800b050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b054:	4606      	mov	r6, r0
 800b056:	460f      	mov	r7, r1
 800b058:	f7f5 fa36 	bl	80004c8 <__aeabi_dmul>
 800b05c:	a36a      	add	r3, pc, #424	; (adr r3, 800b208 <atan+0x290>)
 800b05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b062:	f7f5 f87b 	bl	800015c <__adddf3>
 800b066:	4632      	mov	r2, r6
 800b068:	463b      	mov	r3, r7
 800b06a:	f7f5 fa2d 	bl	80004c8 <__aeabi_dmul>
 800b06e:	a368      	add	r3, pc, #416	; (adr r3, 800b210 <atan+0x298>)
 800b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b074:	f7f5 f872 	bl	800015c <__adddf3>
 800b078:	4632      	mov	r2, r6
 800b07a:	463b      	mov	r3, r7
 800b07c:	f7f5 fa24 	bl	80004c8 <__aeabi_dmul>
 800b080:	a365      	add	r3, pc, #404	; (adr r3, 800b218 <atan+0x2a0>)
 800b082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b086:	f7f5 f869 	bl	800015c <__adddf3>
 800b08a:	4632      	mov	r2, r6
 800b08c:	463b      	mov	r3, r7
 800b08e:	f7f5 fa1b 	bl	80004c8 <__aeabi_dmul>
 800b092:	a363      	add	r3, pc, #396	; (adr r3, 800b220 <atan+0x2a8>)
 800b094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b098:	f7f5 f860 	bl	800015c <__adddf3>
 800b09c:	4632      	mov	r2, r6
 800b09e:	463b      	mov	r3, r7
 800b0a0:	f7f5 fa12 	bl	80004c8 <__aeabi_dmul>
 800b0a4:	a360      	add	r3, pc, #384	; (adr r3, 800b228 <atan+0x2b0>)
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	f7f5 f857 	bl	800015c <__adddf3>
 800b0ae:	4642      	mov	r2, r8
 800b0b0:	464b      	mov	r3, r9
 800b0b2:	f7f5 fa09 	bl	80004c8 <__aeabi_dmul>
 800b0b6:	a35e      	add	r3, pc, #376	; (adr r3, 800b230 <atan+0x2b8>)
 800b0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0bc:	4680      	mov	r8, r0
 800b0be:	4689      	mov	r9, r1
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	4639      	mov	r1, r7
 800b0c4:	f7f5 fa00 	bl	80004c8 <__aeabi_dmul>
 800b0c8:	a35b      	add	r3, pc, #364	; (adr r3, 800b238 <atan+0x2c0>)
 800b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ce:	f7f5 f843 	bl	8000158 <__aeabi_dsub>
 800b0d2:	4632      	mov	r2, r6
 800b0d4:	463b      	mov	r3, r7
 800b0d6:	f7f5 f9f7 	bl	80004c8 <__aeabi_dmul>
 800b0da:	a359      	add	r3, pc, #356	; (adr r3, 800b240 <atan+0x2c8>)
 800b0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e0:	f7f5 f83a 	bl	8000158 <__aeabi_dsub>
 800b0e4:	4632      	mov	r2, r6
 800b0e6:	463b      	mov	r3, r7
 800b0e8:	f7f5 f9ee 	bl	80004c8 <__aeabi_dmul>
 800b0ec:	a356      	add	r3, pc, #344	; (adr r3, 800b248 <atan+0x2d0>)
 800b0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f2:	f7f5 f831 	bl	8000158 <__aeabi_dsub>
 800b0f6:	4632      	mov	r2, r6
 800b0f8:	463b      	mov	r3, r7
 800b0fa:	f7f5 f9e5 	bl	80004c8 <__aeabi_dmul>
 800b0fe:	a354      	add	r3, pc, #336	; (adr r3, 800b250 <atan+0x2d8>)
 800b100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b104:	f7f5 f828 	bl	8000158 <__aeabi_dsub>
 800b108:	4632      	mov	r2, r6
 800b10a:	463b      	mov	r3, r7
 800b10c:	f7f5 f9dc 	bl	80004c8 <__aeabi_dmul>
 800b110:	4602      	mov	r2, r0
 800b112:	460b      	mov	r3, r1
 800b114:	4640      	mov	r0, r8
 800b116:	4649      	mov	r1, r9
 800b118:	f7f5 f820 	bl	800015c <__adddf3>
 800b11c:	4622      	mov	r2, r4
 800b11e:	462b      	mov	r3, r5
 800b120:	f7f5 f9d2 	bl	80004c8 <__aeabi_dmul>
 800b124:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b128:	4602      	mov	r2, r0
 800b12a:	460b      	mov	r3, r1
 800b12c:	d144      	bne.n	800b1b8 <atan+0x240>
 800b12e:	4620      	mov	r0, r4
 800b130:	4629      	mov	r1, r5
 800b132:	f7f5 f811 	bl	8000158 <__aeabi_dsub>
 800b136:	e734      	b.n	800afa2 <atan+0x2a>
 800b138:	2200      	movs	r2, #0
 800b13a:	4b4c      	ldr	r3, [pc, #304]	; (800b26c <atan+0x2f4>)
 800b13c:	f7f5 f80c 	bl	8000158 <__aeabi_dsub>
 800b140:	2200      	movs	r2, #0
 800b142:	4606      	mov	r6, r0
 800b144:	460f      	mov	r7, r1
 800b146:	4620      	mov	r0, r4
 800b148:	4629      	mov	r1, r5
 800b14a:	4b48      	ldr	r3, [pc, #288]	; (800b26c <atan+0x2f4>)
 800b14c:	f7f5 f806 	bl	800015c <__adddf3>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	4630      	mov	r0, r6
 800b156:	4639      	mov	r1, r7
 800b158:	f7f5 fae0 	bl	800071c <__aeabi_ddiv>
 800b15c:	f04f 0a01 	mov.w	sl, #1
 800b160:	4604      	mov	r4, r0
 800b162:	460d      	mov	r5, r1
 800b164:	e767      	b.n	800b036 <atan+0xbe>
 800b166:	4b43      	ldr	r3, [pc, #268]	; (800b274 <atan+0x2fc>)
 800b168:	429e      	cmp	r6, r3
 800b16a:	da1a      	bge.n	800b1a2 <atan+0x22a>
 800b16c:	2200      	movs	r2, #0
 800b16e:	4b42      	ldr	r3, [pc, #264]	; (800b278 <atan+0x300>)
 800b170:	f7f4 fff2 	bl	8000158 <__aeabi_dsub>
 800b174:	2200      	movs	r2, #0
 800b176:	4606      	mov	r6, r0
 800b178:	460f      	mov	r7, r1
 800b17a:	4620      	mov	r0, r4
 800b17c:	4629      	mov	r1, r5
 800b17e:	4b3e      	ldr	r3, [pc, #248]	; (800b278 <atan+0x300>)
 800b180:	f7f5 f9a2 	bl	80004c8 <__aeabi_dmul>
 800b184:	2200      	movs	r2, #0
 800b186:	4b39      	ldr	r3, [pc, #228]	; (800b26c <atan+0x2f4>)
 800b188:	f7f4 ffe8 	bl	800015c <__adddf3>
 800b18c:	4602      	mov	r2, r0
 800b18e:	460b      	mov	r3, r1
 800b190:	4630      	mov	r0, r6
 800b192:	4639      	mov	r1, r7
 800b194:	f7f5 fac2 	bl	800071c <__aeabi_ddiv>
 800b198:	f04f 0a02 	mov.w	sl, #2
 800b19c:	4604      	mov	r4, r0
 800b19e:	460d      	mov	r5, r1
 800b1a0:	e749      	b.n	800b036 <atan+0xbe>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	2000      	movs	r0, #0
 800b1a8:	4934      	ldr	r1, [pc, #208]	; (800b27c <atan+0x304>)
 800b1aa:	f7f5 fab7 	bl	800071c <__aeabi_ddiv>
 800b1ae:	f04f 0a03 	mov.w	sl, #3
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	460d      	mov	r5, r1
 800b1b6:	e73e      	b.n	800b036 <atan+0xbe>
 800b1b8:	4b31      	ldr	r3, [pc, #196]	; (800b280 <atan+0x308>)
 800b1ba:	4e32      	ldr	r6, [pc, #200]	; (800b284 <atan+0x30c>)
 800b1bc:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b1c0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b1c4:	e9da 2300 	ldrd	r2, r3, [sl]
 800b1c8:	f7f4 ffc6 	bl	8000158 <__aeabi_dsub>
 800b1cc:	4622      	mov	r2, r4
 800b1ce:	462b      	mov	r3, r5
 800b1d0:	f7f4 ffc2 	bl	8000158 <__aeabi_dsub>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b1dc:	f7f4 ffbc 	bl	8000158 <__aeabi_dsub>
 800b1e0:	f1bb 0f00 	cmp.w	fp, #0
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	460d      	mov	r5, r1
 800b1e8:	f6bf aee4 	bge.w	800afb4 <atan+0x3c>
 800b1ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1f0:	461d      	mov	r5, r3
 800b1f2:	e6df      	b.n	800afb4 <atan+0x3c>
 800b1f4:	4d24      	ldr	r5, [pc, #144]	; (800b288 <atan+0x310>)
 800b1f6:	e6dd      	b.n	800afb4 <atan+0x3c>
 800b1f8:	8800759c 	.word	0x8800759c
 800b1fc:	7e37e43c 	.word	0x7e37e43c
 800b200:	e322da11 	.word	0xe322da11
 800b204:	3f90ad3a 	.word	0x3f90ad3a
 800b208:	24760deb 	.word	0x24760deb
 800b20c:	3fa97b4b 	.word	0x3fa97b4b
 800b210:	a0d03d51 	.word	0xa0d03d51
 800b214:	3fb10d66 	.word	0x3fb10d66
 800b218:	c54c206e 	.word	0xc54c206e
 800b21c:	3fb745cd 	.word	0x3fb745cd
 800b220:	920083ff 	.word	0x920083ff
 800b224:	3fc24924 	.word	0x3fc24924
 800b228:	5555550d 	.word	0x5555550d
 800b22c:	3fd55555 	.word	0x3fd55555
 800b230:	2c6a6c2f 	.word	0x2c6a6c2f
 800b234:	bfa2b444 	.word	0xbfa2b444
 800b238:	52defd9a 	.word	0x52defd9a
 800b23c:	3fadde2d 	.word	0x3fadde2d
 800b240:	af749a6d 	.word	0xaf749a6d
 800b244:	3fb3b0f2 	.word	0x3fb3b0f2
 800b248:	fe231671 	.word	0xfe231671
 800b24c:	3fbc71c6 	.word	0x3fbc71c6
 800b250:	9998ebc4 	.word	0x9998ebc4
 800b254:	3fc99999 	.word	0x3fc99999
 800b258:	440fffff 	.word	0x440fffff
 800b25c:	7ff00000 	.word	0x7ff00000
 800b260:	54442d18 	.word	0x54442d18
 800b264:	bff921fb 	.word	0xbff921fb
 800b268:	3fdbffff 	.word	0x3fdbffff
 800b26c:	3ff00000 	.word	0x3ff00000
 800b270:	3ff2ffff 	.word	0x3ff2ffff
 800b274:	40038000 	.word	0x40038000
 800b278:	3ff80000 	.word	0x3ff80000
 800b27c:	bff00000 	.word	0xbff00000
 800b280:	0800d5b8 	.word	0x0800d5b8
 800b284:	0800d598 	.word	0x0800d598
 800b288:	3ff921fb 	.word	0x3ff921fb

0800b28c <cos>:
 800b28c:	b530      	push	{r4, r5, lr}
 800b28e:	4a20      	ldr	r2, [pc, #128]	; (800b310 <cos+0x84>)
 800b290:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b294:	4293      	cmp	r3, r2
 800b296:	b087      	sub	sp, #28
 800b298:	dc06      	bgt.n	800b2a8 <cos+0x1c>
 800b29a:	2200      	movs	r2, #0
 800b29c:	2300      	movs	r3, #0
 800b29e:	b007      	add	sp, #28
 800b2a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2a4:	f001 bb44 	b.w	800c930 <__kernel_cos>
 800b2a8:	4a1a      	ldr	r2, [pc, #104]	; (800b314 <cos+0x88>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	dd05      	ble.n	800b2ba <cos+0x2e>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	f7f4 ff51 	bl	8000158 <__aeabi_dsub>
 800b2b6:	b007      	add	sp, #28
 800b2b8:	bd30      	pop	{r4, r5, pc}
 800b2ba:	aa02      	add	r2, sp, #8
 800b2bc:	f001 f890 	bl	800c3e0 <__ieee754_rem_pio2>
 800b2c0:	f000 0003 	and.w	r0, r0, #3
 800b2c4:	2801      	cmp	r0, #1
 800b2c6:	d009      	beq.n	800b2dc <cos+0x50>
 800b2c8:	2802      	cmp	r0, #2
 800b2ca:	d011      	beq.n	800b2f0 <cos+0x64>
 800b2cc:	b9b8      	cbnz	r0, 800b2fe <cos+0x72>
 800b2ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2d6:	f001 fb2b 	bl	800c930 <__kernel_cos>
 800b2da:	e7ec      	b.n	800b2b6 <cos+0x2a>
 800b2dc:	9000      	str	r0, [sp, #0]
 800b2de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2e6:	f001 ff23 	bl	800d130 <__kernel_sin>
 800b2ea:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b2ee:	e7e2      	b.n	800b2b6 <cos+0x2a>
 800b2f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2f8:	f001 fb1a 	bl	800c930 <__kernel_cos>
 800b2fc:	e7f5      	b.n	800b2ea <cos+0x5e>
 800b2fe:	2301      	movs	r3, #1
 800b300:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b304:	9300      	str	r3, [sp, #0]
 800b306:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b30a:	f001 ff11 	bl	800d130 <__kernel_sin>
 800b30e:	e7d2      	b.n	800b2b6 <cos+0x2a>
 800b310:	3fe921fb 	.word	0x3fe921fb
 800b314:	7fefffff 	.word	0x7fefffff

0800b318 <fabs>:
 800b318:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b31c:	4770      	bx	lr
	...

0800b320 <sin>:
 800b320:	b530      	push	{r4, r5, lr}
 800b322:	4a20      	ldr	r2, [pc, #128]	; (800b3a4 <sin+0x84>)
 800b324:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b328:	4293      	cmp	r3, r2
 800b32a:	b087      	sub	sp, #28
 800b32c:	dc06      	bgt.n	800b33c <sin+0x1c>
 800b32e:	2300      	movs	r3, #0
 800b330:	2200      	movs	r2, #0
 800b332:	9300      	str	r3, [sp, #0]
 800b334:	2300      	movs	r3, #0
 800b336:	f001 fefb 	bl	800d130 <__kernel_sin>
 800b33a:	e006      	b.n	800b34a <sin+0x2a>
 800b33c:	4a1a      	ldr	r2, [pc, #104]	; (800b3a8 <sin+0x88>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	dd05      	ble.n	800b34e <sin+0x2e>
 800b342:	4602      	mov	r2, r0
 800b344:	460b      	mov	r3, r1
 800b346:	f7f4 ff07 	bl	8000158 <__aeabi_dsub>
 800b34a:	b007      	add	sp, #28
 800b34c:	bd30      	pop	{r4, r5, pc}
 800b34e:	aa02      	add	r2, sp, #8
 800b350:	f001 f846 	bl	800c3e0 <__ieee754_rem_pio2>
 800b354:	f000 0003 	and.w	r0, r0, #3
 800b358:	2801      	cmp	r0, #1
 800b35a:	d009      	beq.n	800b370 <sin+0x50>
 800b35c:	2802      	cmp	r0, #2
 800b35e:	d00e      	beq.n	800b37e <sin+0x5e>
 800b360:	b9c0      	cbnz	r0, 800b394 <sin+0x74>
 800b362:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b366:	2301      	movs	r3, #1
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b36e:	e7e2      	b.n	800b336 <sin+0x16>
 800b370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b374:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b378:	f001 fada 	bl	800c930 <__kernel_cos>
 800b37c:	e7e5      	b.n	800b34a <sin+0x2a>
 800b37e:	2301      	movs	r3, #1
 800b380:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b384:	9300      	str	r3, [sp, #0]
 800b386:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b38a:	f001 fed1 	bl	800d130 <__kernel_sin>
 800b38e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b392:	e7da      	b.n	800b34a <sin+0x2a>
 800b394:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b39c:	f001 fac8 	bl	800c930 <__kernel_cos>
 800b3a0:	e7f5      	b.n	800b38e <sin+0x6e>
 800b3a2:	bf00      	nop
 800b3a4:	3fe921fb 	.word	0x3fe921fb
 800b3a8:	7fefffff 	.word	0x7fefffff

0800b3ac <acos>:
 800b3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	460d      	mov	r5, r1
 800b3b2:	f000 f8b1 	bl	800b518 <__ieee754_acos>
 800b3b6:	4622      	mov	r2, r4
 800b3b8:	4606      	mov	r6, r0
 800b3ba:	460f      	mov	r7, r1
 800b3bc:	462b      	mov	r3, r5
 800b3be:	4620      	mov	r0, r4
 800b3c0:	4629      	mov	r1, r5
 800b3c2:	f7f5 fb1b 	bl	80009fc <__aeabi_dcmpun>
 800b3c6:	b988      	cbnz	r0, 800b3ec <acos+0x40>
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	4629      	mov	r1, r5
 800b3cc:	f7ff ffa4 	bl	800b318 <fabs>
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	4b08      	ldr	r3, [pc, #32]	; (800b3f4 <acos+0x48>)
 800b3d4:	f7f5 fb08 	bl	80009e8 <__aeabi_dcmpgt>
 800b3d8:	b140      	cbz	r0, 800b3ec <acos+0x40>
 800b3da:	f7ff fd9b 	bl	800af14 <__errno>
 800b3de:	2321      	movs	r3, #33	; 0x21
 800b3e0:	6003      	str	r3, [r0, #0]
 800b3e2:	4805      	ldr	r0, [pc, #20]	; (800b3f8 <acos+0x4c>)
 800b3e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b3e8:	f002 b80a 	b.w	800d400 <nan>
 800b3ec:	4630      	mov	r0, r6
 800b3ee:	4639      	mov	r1, r7
 800b3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	3ff00000 	.word	0x3ff00000
 800b3f8:	0800d5d8 	.word	0x0800d5d8

0800b3fc <pow>:
 800b3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b400:	4614      	mov	r4, r2
 800b402:	461d      	mov	r5, r3
 800b404:	4680      	mov	r8, r0
 800b406:	4689      	mov	r9, r1
 800b408:	f000 fad2 	bl	800b9b0 <__ieee754_pow>
 800b40c:	4622      	mov	r2, r4
 800b40e:	4606      	mov	r6, r0
 800b410:	460f      	mov	r7, r1
 800b412:	462b      	mov	r3, r5
 800b414:	4620      	mov	r0, r4
 800b416:	4629      	mov	r1, r5
 800b418:	f7f5 faf0 	bl	80009fc <__aeabi_dcmpun>
 800b41c:	bbc8      	cbnz	r0, 800b492 <pow+0x96>
 800b41e:	2200      	movs	r2, #0
 800b420:	2300      	movs	r3, #0
 800b422:	4640      	mov	r0, r8
 800b424:	4649      	mov	r1, r9
 800b426:	f7f5 fab7 	bl	8000998 <__aeabi_dcmpeq>
 800b42a:	b1b8      	cbz	r0, 800b45c <pow+0x60>
 800b42c:	2200      	movs	r2, #0
 800b42e:	2300      	movs	r3, #0
 800b430:	4620      	mov	r0, r4
 800b432:	4629      	mov	r1, r5
 800b434:	f7f5 fab0 	bl	8000998 <__aeabi_dcmpeq>
 800b438:	2800      	cmp	r0, #0
 800b43a:	d141      	bne.n	800b4c0 <pow+0xc4>
 800b43c:	4620      	mov	r0, r4
 800b43e:	4629      	mov	r1, r5
 800b440:	f001 ff58 	bl	800d2f4 <finite>
 800b444:	b328      	cbz	r0, 800b492 <pow+0x96>
 800b446:	2200      	movs	r2, #0
 800b448:	2300      	movs	r3, #0
 800b44a:	4620      	mov	r0, r4
 800b44c:	4629      	mov	r1, r5
 800b44e:	f7f5 faad 	bl	80009ac <__aeabi_dcmplt>
 800b452:	b1f0      	cbz	r0, 800b492 <pow+0x96>
 800b454:	f7ff fd5e 	bl	800af14 <__errno>
 800b458:	2322      	movs	r3, #34	; 0x22
 800b45a:	e019      	b.n	800b490 <pow+0x94>
 800b45c:	4630      	mov	r0, r6
 800b45e:	4639      	mov	r1, r7
 800b460:	f001 ff48 	bl	800d2f4 <finite>
 800b464:	b9c8      	cbnz	r0, 800b49a <pow+0x9e>
 800b466:	4640      	mov	r0, r8
 800b468:	4649      	mov	r1, r9
 800b46a:	f001 ff43 	bl	800d2f4 <finite>
 800b46e:	b1a0      	cbz	r0, 800b49a <pow+0x9e>
 800b470:	4620      	mov	r0, r4
 800b472:	4629      	mov	r1, r5
 800b474:	f001 ff3e 	bl	800d2f4 <finite>
 800b478:	b178      	cbz	r0, 800b49a <pow+0x9e>
 800b47a:	4632      	mov	r2, r6
 800b47c:	463b      	mov	r3, r7
 800b47e:	4630      	mov	r0, r6
 800b480:	4639      	mov	r1, r7
 800b482:	f7f5 fabb 	bl	80009fc <__aeabi_dcmpun>
 800b486:	2800      	cmp	r0, #0
 800b488:	d0e4      	beq.n	800b454 <pow+0x58>
 800b48a:	f7ff fd43 	bl	800af14 <__errno>
 800b48e:	2321      	movs	r3, #33	; 0x21
 800b490:	6003      	str	r3, [r0, #0]
 800b492:	4630      	mov	r0, r6
 800b494:	4639      	mov	r1, r7
 800b496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b49a:	2200      	movs	r2, #0
 800b49c:	2300      	movs	r3, #0
 800b49e:	4630      	mov	r0, r6
 800b4a0:	4639      	mov	r1, r7
 800b4a2:	f7f5 fa79 	bl	8000998 <__aeabi_dcmpeq>
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d0f3      	beq.n	800b492 <pow+0x96>
 800b4aa:	4640      	mov	r0, r8
 800b4ac:	4649      	mov	r1, r9
 800b4ae:	f001 ff21 	bl	800d2f4 <finite>
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	d0ed      	beq.n	800b492 <pow+0x96>
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	4629      	mov	r1, r5
 800b4ba:	f001 ff1b 	bl	800d2f4 <finite>
 800b4be:	e7c8      	b.n	800b452 <pow+0x56>
 800b4c0:	2600      	movs	r6, #0
 800b4c2:	4f01      	ldr	r7, [pc, #4]	; (800b4c8 <pow+0xcc>)
 800b4c4:	e7e5      	b.n	800b492 <pow+0x96>
 800b4c6:	bf00      	nop
 800b4c8:	3ff00000 	.word	0x3ff00000

0800b4cc <sqrt>:
 800b4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ce:	4606      	mov	r6, r0
 800b4d0:	460f      	mov	r7, r1
 800b4d2:	f001 f97d 	bl	800c7d0 <__ieee754_sqrt>
 800b4d6:	4632      	mov	r2, r6
 800b4d8:	4604      	mov	r4, r0
 800b4da:	460d      	mov	r5, r1
 800b4dc:	463b      	mov	r3, r7
 800b4de:	4630      	mov	r0, r6
 800b4e0:	4639      	mov	r1, r7
 800b4e2:	f7f5 fa8b 	bl	80009fc <__aeabi_dcmpun>
 800b4e6:	b990      	cbnz	r0, 800b50e <sqrt+0x42>
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	4639      	mov	r1, r7
 800b4f0:	f7f5 fa5c 	bl	80009ac <__aeabi_dcmplt>
 800b4f4:	b158      	cbz	r0, 800b50e <sqrt+0x42>
 800b4f6:	f7ff fd0d 	bl	800af14 <__errno>
 800b4fa:	2321      	movs	r3, #33	; 0x21
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	6003      	str	r3, [r0, #0]
 800b500:	2300      	movs	r3, #0
 800b502:	4610      	mov	r0, r2
 800b504:	4619      	mov	r1, r3
 800b506:	f7f5 f909 	bl	800071c <__aeabi_ddiv>
 800b50a:	4604      	mov	r4, r0
 800b50c:	460d      	mov	r5, r1
 800b50e:	4620      	mov	r0, r4
 800b510:	4629      	mov	r1, r5
 800b512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b514:	0000      	movs	r0, r0
	...

0800b518 <__ieee754_acos>:
 800b518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b51c:	4cb2      	ldr	r4, [pc, #712]	; (800b7e8 <__ieee754_acos+0x2d0>)
 800b51e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b522:	42a3      	cmp	r3, r4
 800b524:	4607      	mov	r7, r0
 800b526:	460e      	mov	r6, r1
 800b528:	dd16      	ble.n	800b558 <__ieee754_acos+0x40>
 800b52a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800b52e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b532:	4303      	orrs	r3, r0
 800b534:	d107      	bne.n	800b546 <__ieee754_acos+0x2e>
 800b536:	2900      	cmp	r1, #0
 800b538:	f300 8202 	bgt.w	800b940 <__ieee754_acos+0x428>
 800b53c:	a190      	add	r1, pc, #576	; (adr r1, 800b780 <__ieee754_acos+0x268>)
 800b53e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b542:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b546:	4602      	mov	r2, r0
 800b548:	460b      	mov	r3, r1
 800b54a:	f7f4 fe05 	bl	8000158 <__aeabi_dsub>
 800b54e:	4602      	mov	r2, r0
 800b550:	460b      	mov	r3, r1
 800b552:	f7f5 f8e3 	bl	800071c <__aeabi_ddiv>
 800b556:	e7f4      	b.n	800b542 <__ieee754_acos+0x2a>
 800b558:	4ca4      	ldr	r4, [pc, #656]	; (800b7ec <__ieee754_acos+0x2d4>)
 800b55a:	42a3      	cmp	r3, r4
 800b55c:	f300 8083 	bgt.w	800b666 <__ieee754_acos+0x14e>
 800b560:	4aa3      	ldr	r2, [pc, #652]	; (800b7f0 <__ieee754_acos+0x2d8>)
 800b562:	4293      	cmp	r3, r2
 800b564:	f340 81ef 	ble.w	800b946 <__ieee754_acos+0x42e>
 800b568:	4602      	mov	r2, r0
 800b56a:	460b      	mov	r3, r1
 800b56c:	f7f4 ffac 	bl	80004c8 <__aeabi_dmul>
 800b570:	a385      	add	r3, pc, #532	; (adr r3, 800b788 <__ieee754_acos+0x270>)
 800b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b576:	4604      	mov	r4, r0
 800b578:	460d      	mov	r5, r1
 800b57a:	f7f4 ffa5 	bl	80004c8 <__aeabi_dmul>
 800b57e:	a384      	add	r3, pc, #528	; (adr r3, 800b790 <__ieee754_acos+0x278>)
 800b580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b584:	f7f4 fdea 	bl	800015c <__adddf3>
 800b588:	4622      	mov	r2, r4
 800b58a:	462b      	mov	r3, r5
 800b58c:	f7f4 ff9c 	bl	80004c8 <__aeabi_dmul>
 800b590:	a381      	add	r3, pc, #516	; (adr r3, 800b798 <__ieee754_acos+0x280>)
 800b592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b596:	f7f4 fddf 	bl	8000158 <__aeabi_dsub>
 800b59a:	4622      	mov	r2, r4
 800b59c:	462b      	mov	r3, r5
 800b59e:	f7f4 ff93 	bl	80004c8 <__aeabi_dmul>
 800b5a2:	a37f      	add	r3, pc, #508	; (adr r3, 800b7a0 <__ieee754_acos+0x288>)
 800b5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a8:	f7f4 fdd8 	bl	800015c <__adddf3>
 800b5ac:	4622      	mov	r2, r4
 800b5ae:	462b      	mov	r3, r5
 800b5b0:	f7f4 ff8a 	bl	80004c8 <__aeabi_dmul>
 800b5b4:	a37c      	add	r3, pc, #496	; (adr r3, 800b7a8 <__ieee754_acos+0x290>)
 800b5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ba:	f7f4 fdcd 	bl	8000158 <__aeabi_dsub>
 800b5be:	4622      	mov	r2, r4
 800b5c0:	462b      	mov	r3, r5
 800b5c2:	f7f4 ff81 	bl	80004c8 <__aeabi_dmul>
 800b5c6:	a37a      	add	r3, pc, #488	; (adr r3, 800b7b0 <__ieee754_acos+0x298>)
 800b5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5cc:	f7f4 fdc6 	bl	800015c <__adddf3>
 800b5d0:	4622      	mov	r2, r4
 800b5d2:	462b      	mov	r3, r5
 800b5d4:	f7f4 ff78 	bl	80004c8 <__aeabi_dmul>
 800b5d8:	a377      	add	r3, pc, #476	; (adr r3, 800b7b8 <__ieee754_acos+0x2a0>)
 800b5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5de:	4680      	mov	r8, r0
 800b5e0:	4689      	mov	r9, r1
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	4629      	mov	r1, r5
 800b5e6:	f7f4 ff6f 	bl	80004c8 <__aeabi_dmul>
 800b5ea:	a375      	add	r3, pc, #468	; (adr r3, 800b7c0 <__ieee754_acos+0x2a8>)
 800b5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f0:	f7f4 fdb2 	bl	8000158 <__aeabi_dsub>
 800b5f4:	4622      	mov	r2, r4
 800b5f6:	462b      	mov	r3, r5
 800b5f8:	f7f4 ff66 	bl	80004c8 <__aeabi_dmul>
 800b5fc:	a372      	add	r3, pc, #456	; (adr r3, 800b7c8 <__ieee754_acos+0x2b0>)
 800b5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b602:	f7f4 fdab 	bl	800015c <__adddf3>
 800b606:	4622      	mov	r2, r4
 800b608:	462b      	mov	r3, r5
 800b60a:	f7f4 ff5d 	bl	80004c8 <__aeabi_dmul>
 800b60e:	a370      	add	r3, pc, #448	; (adr r3, 800b7d0 <__ieee754_acos+0x2b8>)
 800b610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b614:	f7f4 fda0 	bl	8000158 <__aeabi_dsub>
 800b618:	4622      	mov	r2, r4
 800b61a:	462b      	mov	r3, r5
 800b61c:	f7f4 ff54 	bl	80004c8 <__aeabi_dmul>
 800b620:	2200      	movs	r2, #0
 800b622:	4b74      	ldr	r3, [pc, #464]	; (800b7f4 <__ieee754_acos+0x2dc>)
 800b624:	f7f4 fd9a 	bl	800015c <__adddf3>
 800b628:	4602      	mov	r2, r0
 800b62a:	460b      	mov	r3, r1
 800b62c:	4640      	mov	r0, r8
 800b62e:	4649      	mov	r1, r9
 800b630:	f7f5 f874 	bl	800071c <__aeabi_ddiv>
 800b634:	463a      	mov	r2, r7
 800b636:	4633      	mov	r3, r6
 800b638:	f7f4 ff46 	bl	80004c8 <__aeabi_dmul>
 800b63c:	4602      	mov	r2, r0
 800b63e:	460b      	mov	r3, r1
 800b640:	a165      	add	r1, pc, #404	; (adr r1, 800b7d8 <__ieee754_acos+0x2c0>)
 800b642:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b646:	f7f4 fd87 	bl	8000158 <__aeabi_dsub>
 800b64a:	4602      	mov	r2, r0
 800b64c:	460b      	mov	r3, r1
 800b64e:	4638      	mov	r0, r7
 800b650:	4631      	mov	r1, r6
 800b652:	f7f4 fd81 	bl	8000158 <__aeabi_dsub>
 800b656:	4602      	mov	r2, r0
 800b658:	460b      	mov	r3, r1
 800b65a:	a161      	add	r1, pc, #388	; (adr r1, 800b7e0 <__ieee754_acos+0x2c8>)
 800b65c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b660:	f7f4 fd7a 	bl	8000158 <__aeabi_dsub>
 800b664:	e76d      	b.n	800b542 <__ieee754_acos+0x2a>
 800b666:	2900      	cmp	r1, #0
 800b668:	f280 80c8 	bge.w	800b7fc <__ieee754_acos+0x2e4>
 800b66c:	2200      	movs	r2, #0
 800b66e:	4b61      	ldr	r3, [pc, #388]	; (800b7f4 <__ieee754_acos+0x2dc>)
 800b670:	f7f4 fd74 	bl	800015c <__adddf3>
 800b674:	2200      	movs	r2, #0
 800b676:	4b60      	ldr	r3, [pc, #384]	; (800b7f8 <__ieee754_acos+0x2e0>)
 800b678:	f7f4 ff26 	bl	80004c8 <__aeabi_dmul>
 800b67c:	a342      	add	r3, pc, #264	; (adr r3, 800b788 <__ieee754_acos+0x270>)
 800b67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b682:	4604      	mov	r4, r0
 800b684:	460d      	mov	r5, r1
 800b686:	f7f4 ff1f 	bl	80004c8 <__aeabi_dmul>
 800b68a:	a341      	add	r3, pc, #260	; (adr r3, 800b790 <__ieee754_acos+0x278>)
 800b68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b690:	f7f4 fd64 	bl	800015c <__adddf3>
 800b694:	4622      	mov	r2, r4
 800b696:	462b      	mov	r3, r5
 800b698:	f7f4 ff16 	bl	80004c8 <__aeabi_dmul>
 800b69c:	a33e      	add	r3, pc, #248	; (adr r3, 800b798 <__ieee754_acos+0x280>)
 800b69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a2:	f7f4 fd59 	bl	8000158 <__aeabi_dsub>
 800b6a6:	4622      	mov	r2, r4
 800b6a8:	462b      	mov	r3, r5
 800b6aa:	f7f4 ff0d 	bl	80004c8 <__aeabi_dmul>
 800b6ae:	a33c      	add	r3, pc, #240	; (adr r3, 800b7a0 <__ieee754_acos+0x288>)
 800b6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b4:	f7f4 fd52 	bl	800015c <__adddf3>
 800b6b8:	4622      	mov	r2, r4
 800b6ba:	462b      	mov	r3, r5
 800b6bc:	f7f4 ff04 	bl	80004c8 <__aeabi_dmul>
 800b6c0:	a339      	add	r3, pc, #228	; (adr r3, 800b7a8 <__ieee754_acos+0x290>)
 800b6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c6:	f7f4 fd47 	bl	8000158 <__aeabi_dsub>
 800b6ca:	4622      	mov	r2, r4
 800b6cc:	462b      	mov	r3, r5
 800b6ce:	f7f4 fefb 	bl	80004c8 <__aeabi_dmul>
 800b6d2:	a337      	add	r3, pc, #220	; (adr r3, 800b7b0 <__ieee754_acos+0x298>)
 800b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d8:	f7f4 fd40 	bl	800015c <__adddf3>
 800b6dc:	4622      	mov	r2, r4
 800b6de:	462b      	mov	r3, r5
 800b6e0:	f7f4 fef2 	bl	80004c8 <__aeabi_dmul>
 800b6e4:	4680      	mov	r8, r0
 800b6e6:	4689      	mov	r9, r1
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	4629      	mov	r1, r5
 800b6ec:	f001 f870 	bl	800c7d0 <__ieee754_sqrt>
 800b6f0:	a331      	add	r3, pc, #196	; (adr r3, 800b7b8 <__ieee754_acos+0x2a0>)
 800b6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f6:	4606      	mov	r6, r0
 800b6f8:	460f      	mov	r7, r1
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	4629      	mov	r1, r5
 800b6fe:	f7f4 fee3 	bl	80004c8 <__aeabi_dmul>
 800b702:	a32f      	add	r3, pc, #188	; (adr r3, 800b7c0 <__ieee754_acos+0x2a8>)
 800b704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b708:	f7f4 fd26 	bl	8000158 <__aeabi_dsub>
 800b70c:	4622      	mov	r2, r4
 800b70e:	462b      	mov	r3, r5
 800b710:	f7f4 feda 	bl	80004c8 <__aeabi_dmul>
 800b714:	a32c      	add	r3, pc, #176	; (adr r3, 800b7c8 <__ieee754_acos+0x2b0>)
 800b716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71a:	f7f4 fd1f 	bl	800015c <__adddf3>
 800b71e:	4622      	mov	r2, r4
 800b720:	462b      	mov	r3, r5
 800b722:	f7f4 fed1 	bl	80004c8 <__aeabi_dmul>
 800b726:	a32a      	add	r3, pc, #168	; (adr r3, 800b7d0 <__ieee754_acos+0x2b8>)
 800b728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72c:	f7f4 fd14 	bl	8000158 <__aeabi_dsub>
 800b730:	4622      	mov	r2, r4
 800b732:	462b      	mov	r3, r5
 800b734:	f7f4 fec8 	bl	80004c8 <__aeabi_dmul>
 800b738:	2200      	movs	r2, #0
 800b73a:	4b2e      	ldr	r3, [pc, #184]	; (800b7f4 <__ieee754_acos+0x2dc>)
 800b73c:	f7f4 fd0e 	bl	800015c <__adddf3>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	4640      	mov	r0, r8
 800b746:	4649      	mov	r1, r9
 800b748:	f7f4 ffe8 	bl	800071c <__aeabi_ddiv>
 800b74c:	4632      	mov	r2, r6
 800b74e:	463b      	mov	r3, r7
 800b750:	f7f4 feba 	bl	80004c8 <__aeabi_dmul>
 800b754:	a320      	add	r3, pc, #128	; (adr r3, 800b7d8 <__ieee754_acos+0x2c0>)
 800b756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75a:	f7f4 fcfd 	bl	8000158 <__aeabi_dsub>
 800b75e:	4632      	mov	r2, r6
 800b760:	463b      	mov	r3, r7
 800b762:	f7f4 fcfb 	bl	800015c <__adddf3>
 800b766:	4602      	mov	r2, r0
 800b768:	460b      	mov	r3, r1
 800b76a:	f7f4 fcf7 	bl	800015c <__adddf3>
 800b76e:	4602      	mov	r2, r0
 800b770:	460b      	mov	r3, r1
 800b772:	a103      	add	r1, pc, #12	; (adr r1, 800b780 <__ieee754_acos+0x268>)
 800b774:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b778:	e772      	b.n	800b660 <__ieee754_acos+0x148>
 800b77a:	bf00      	nop
 800b77c:	f3af 8000 	nop.w
 800b780:	54442d18 	.word	0x54442d18
 800b784:	400921fb 	.word	0x400921fb
 800b788:	0dfdf709 	.word	0x0dfdf709
 800b78c:	3f023de1 	.word	0x3f023de1
 800b790:	7501b288 	.word	0x7501b288
 800b794:	3f49efe0 	.word	0x3f49efe0
 800b798:	b5688f3b 	.word	0xb5688f3b
 800b79c:	3fa48228 	.word	0x3fa48228
 800b7a0:	0e884455 	.word	0x0e884455
 800b7a4:	3fc9c155 	.word	0x3fc9c155
 800b7a8:	03eb6f7d 	.word	0x03eb6f7d
 800b7ac:	3fd4d612 	.word	0x3fd4d612
 800b7b0:	55555555 	.word	0x55555555
 800b7b4:	3fc55555 	.word	0x3fc55555
 800b7b8:	b12e9282 	.word	0xb12e9282
 800b7bc:	3fb3b8c5 	.word	0x3fb3b8c5
 800b7c0:	1b8d0159 	.word	0x1b8d0159
 800b7c4:	3fe6066c 	.word	0x3fe6066c
 800b7c8:	9c598ac8 	.word	0x9c598ac8
 800b7cc:	40002ae5 	.word	0x40002ae5
 800b7d0:	1c8a2d4b 	.word	0x1c8a2d4b
 800b7d4:	40033a27 	.word	0x40033a27
 800b7d8:	33145c07 	.word	0x33145c07
 800b7dc:	3c91a626 	.word	0x3c91a626
 800b7e0:	54442d18 	.word	0x54442d18
 800b7e4:	3ff921fb 	.word	0x3ff921fb
 800b7e8:	3fefffff 	.word	0x3fefffff
 800b7ec:	3fdfffff 	.word	0x3fdfffff
 800b7f0:	3c600000 	.word	0x3c600000
 800b7f4:	3ff00000 	.word	0x3ff00000
 800b7f8:	3fe00000 	.word	0x3fe00000
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	2000      	movs	r0, #0
 800b802:	4969      	ldr	r1, [pc, #420]	; (800b9a8 <__ieee754_acos+0x490>)
 800b804:	f7f4 fca8 	bl	8000158 <__aeabi_dsub>
 800b808:	2200      	movs	r2, #0
 800b80a:	4b68      	ldr	r3, [pc, #416]	; (800b9ac <__ieee754_acos+0x494>)
 800b80c:	f7f4 fe5c 	bl	80004c8 <__aeabi_dmul>
 800b810:	4604      	mov	r4, r0
 800b812:	460d      	mov	r5, r1
 800b814:	f000 ffdc 	bl	800c7d0 <__ieee754_sqrt>
 800b818:	a34d      	add	r3, pc, #308	; (adr r3, 800b950 <__ieee754_acos+0x438>)
 800b81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81e:	4689      	mov	r9, r1
 800b820:	4680      	mov	r8, r0
 800b822:	4629      	mov	r1, r5
 800b824:	4620      	mov	r0, r4
 800b826:	f7f4 fe4f 	bl	80004c8 <__aeabi_dmul>
 800b82a:	a34b      	add	r3, pc, #300	; (adr r3, 800b958 <__ieee754_acos+0x440>)
 800b82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b830:	f7f4 fc94 	bl	800015c <__adddf3>
 800b834:	4622      	mov	r2, r4
 800b836:	462b      	mov	r3, r5
 800b838:	f7f4 fe46 	bl	80004c8 <__aeabi_dmul>
 800b83c:	a348      	add	r3, pc, #288	; (adr r3, 800b960 <__ieee754_acos+0x448>)
 800b83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b842:	f7f4 fc89 	bl	8000158 <__aeabi_dsub>
 800b846:	4622      	mov	r2, r4
 800b848:	462b      	mov	r3, r5
 800b84a:	f7f4 fe3d 	bl	80004c8 <__aeabi_dmul>
 800b84e:	a346      	add	r3, pc, #280	; (adr r3, 800b968 <__ieee754_acos+0x450>)
 800b850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b854:	f7f4 fc82 	bl	800015c <__adddf3>
 800b858:	4622      	mov	r2, r4
 800b85a:	462b      	mov	r3, r5
 800b85c:	f7f4 fe34 	bl	80004c8 <__aeabi_dmul>
 800b860:	a343      	add	r3, pc, #268	; (adr r3, 800b970 <__ieee754_acos+0x458>)
 800b862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b866:	f7f4 fc77 	bl	8000158 <__aeabi_dsub>
 800b86a:	4622      	mov	r2, r4
 800b86c:	462b      	mov	r3, r5
 800b86e:	f7f4 fe2b 	bl	80004c8 <__aeabi_dmul>
 800b872:	a341      	add	r3, pc, #260	; (adr r3, 800b978 <__ieee754_acos+0x460>)
 800b874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b878:	f7f4 fc70 	bl	800015c <__adddf3>
 800b87c:	4622      	mov	r2, r4
 800b87e:	462b      	mov	r3, r5
 800b880:	f7f4 fe22 	bl	80004c8 <__aeabi_dmul>
 800b884:	a33e      	add	r3, pc, #248	; (adr r3, 800b980 <__ieee754_acos+0x468>)
 800b886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88a:	4682      	mov	sl, r0
 800b88c:	468b      	mov	fp, r1
 800b88e:	4620      	mov	r0, r4
 800b890:	4629      	mov	r1, r5
 800b892:	f7f4 fe19 	bl	80004c8 <__aeabi_dmul>
 800b896:	a33c      	add	r3, pc, #240	; (adr r3, 800b988 <__ieee754_acos+0x470>)
 800b898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89c:	f7f4 fc5c 	bl	8000158 <__aeabi_dsub>
 800b8a0:	4622      	mov	r2, r4
 800b8a2:	462b      	mov	r3, r5
 800b8a4:	f7f4 fe10 	bl	80004c8 <__aeabi_dmul>
 800b8a8:	a339      	add	r3, pc, #228	; (adr r3, 800b990 <__ieee754_acos+0x478>)
 800b8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ae:	f7f4 fc55 	bl	800015c <__adddf3>
 800b8b2:	4622      	mov	r2, r4
 800b8b4:	462b      	mov	r3, r5
 800b8b6:	f7f4 fe07 	bl	80004c8 <__aeabi_dmul>
 800b8ba:	a337      	add	r3, pc, #220	; (adr r3, 800b998 <__ieee754_acos+0x480>)
 800b8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c0:	f7f4 fc4a 	bl	8000158 <__aeabi_dsub>
 800b8c4:	4622      	mov	r2, r4
 800b8c6:	462b      	mov	r3, r5
 800b8c8:	f7f4 fdfe 	bl	80004c8 <__aeabi_dmul>
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	4b36      	ldr	r3, [pc, #216]	; (800b9a8 <__ieee754_acos+0x490>)
 800b8d0:	f7f4 fc44 	bl	800015c <__adddf3>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	4650      	mov	r0, sl
 800b8da:	4659      	mov	r1, fp
 800b8dc:	f7f4 ff1e 	bl	800071c <__aeabi_ddiv>
 800b8e0:	4642      	mov	r2, r8
 800b8e2:	464b      	mov	r3, r9
 800b8e4:	f7f4 fdf0 	bl	80004c8 <__aeabi_dmul>
 800b8e8:	2600      	movs	r6, #0
 800b8ea:	4682      	mov	sl, r0
 800b8ec:	468b      	mov	fp, r1
 800b8ee:	4632      	mov	r2, r6
 800b8f0:	464b      	mov	r3, r9
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	4649      	mov	r1, r9
 800b8f6:	f7f4 fde7 	bl	80004c8 <__aeabi_dmul>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	4620      	mov	r0, r4
 800b900:	4629      	mov	r1, r5
 800b902:	f7f4 fc29 	bl	8000158 <__aeabi_dsub>
 800b906:	4632      	mov	r2, r6
 800b908:	4604      	mov	r4, r0
 800b90a:	460d      	mov	r5, r1
 800b90c:	464b      	mov	r3, r9
 800b90e:	4640      	mov	r0, r8
 800b910:	4649      	mov	r1, r9
 800b912:	f7f4 fc23 	bl	800015c <__adddf3>
 800b916:	4602      	mov	r2, r0
 800b918:	460b      	mov	r3, r1
 800b91a:	4620      	mov	r0, r4
 800b91c:	4629      	mov	r1, r5
 800b91e:	f7f4 fefd 	bl	800071c <__aeabi_ddiv>
 800b922:	4602      	mov	r2, r0
 800b924:	460b      	mov	r3, r1
 800b926:	4650      	mov	r0, sl
 800b928:	4659      	mov	r1, fp
 800b92a:	f7f4 fc17 	bl	800015c <__adddf3>
 800b92e:	4632      	mov	r2, r6
 800b930:	464b      	mov	r3, r9
 800b932:	f7f4 fc13 	bl	800015c <__adddf3>
 800b936:	4602      	mov	r2, r0
 800b938:	460b      	mov	r3, r1
 800b93a:	f7f4 fc0f 	bl	800015c <__adddf3>
 800b93e:	e600      	b.n	800b542 <__ieee754_acos+0x2a>
 800b940:	2000      	movs	r0, #0
 800b942:	2100      	movs	r1, #0
 800b944:	e5fd      	b.n	800b542 <__ieee754_acos+0x2a>
 800b946:	a116      	add	r1, pc, #88	; (adr r1, 800b9a0 <__ieee754_acos+0x488>)
 800b948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b94c:	e5f9      	b.n	800b542 <__ieee754_acos+0x2a>
 800b94e:	bf00      	nop
 800b950:	0dfdf709 	.word	0x0dfdf709
 800b954:	3f023de1 	.word	0x3f023de1
 800b958:	7501b288 	.word	0x7501b288
 800b95c:	3f49efe0 	.word	0x3f49efe0
 800b960:	b5688f3b 	.word	0xb5688f3b
 800b964:	3fa48228 	.word	0x3fa48228
 800b968:	0e884455 	.word	0x0e884455
 800b96c:	3fc9c155 	.word	0x3fc9c155
 800b970:	03eb6f7d 	.word	0x03eb6f7d
 800b974:	3fd4d612 	.word	0x3fd4d612
 800b978:	55555555 	.word	0x55555555
 800b97c:	3fc55555 	.word	0x3fc55555
 800b980:	b12e9282 	.word	0xb12e9282
 800b984:	3fb3b8c5 	.word	0x3fb3b8c5
 800b988:	1b8d0159 	.word	0x1b8d0159
 800b98c:	3fe6066c 	.word	0x3fe6066c
 800b990:	9c598ac8 	.word	0x9c598ac8
 800b994:	40002ae5 	.word	0x40002ae5
 800b998:	1c8a2d4b 	.word	0x1c8a2d4b
 800b99c:	40033a27 	.word	0x40033a27
 800b9a0:	54442d18 	.word	0x54442d18
 800b9a4:	3ff921fb 	.word	0x3ff921fb
 800b9a8:	3ff00000 	.word	0x3ff00000
 800b9ac:	3fe00000 	.word	0x3fe00000

0800b9b0 <__ieee754_pow>:
 800b9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b4:	b093      	sub	sp, #76	; 0x4c
 800b9b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b9ba:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800b9be:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b9c2:	4689      	mov	r9, r1
 800b9c4:	ea56 0102 	orrs.w	r1, r6, r2
 800b9c8:	4680      	mov	r8, r0
 800b9ca:	d111      	bne.n	800b9f0 <__ieee754_pow+0x40>
 800b9cc:	1803      	adds	r3, r0, r0
 800b9ce:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800b9d2:	4152      	adcs	r2, r2
 800b9d4:	4299      	cmp	r1, r3
 800b9d6:	4b82      	ldr	r3, [pc, #520]	; (800bbe0 <__ieee754_pow+0x230>)
 800b9d8:	4193      	sbcs	r3, r2
 800b9da:	f080 84b9 	bcs.w	800c350 <__ieee754_pow+0x9a0>
 800b9de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	4649      	mov	r1, r9
 800b9e6:	f7f4 fbb9 	bl	800015c <__adddf3>
 800b9ea:	4683      	mov	fp, r0
 800b9ec:	468c      	mov	ip, r1
 800b9ee:	e06f      	b.n	800bad0 <__ieee754_pow+0x120>
 800b9f0:	4b7c      	ldr	r3, [pc, #496]	; (800bbe4 <__ieee754_pow+0x234>)
 800b9f2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800b9f6:	429c      	cmp	r4, r3
 800b9f8:	464d      	mov	r5, r9
 800b9fa:	4682      	mov	sl, r0
 800b9fc:	dc06      	bgt.n	800ba0c <__ieee754_pow+0x5c>
 800b9fe:	d101      	bne.n	800ba04 <__ieee754_pow+0x54>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	d1ec      	bne.n	800b9de <__ieee754_pow+0x2e>
 800ba04:	429e      	cmp	r6, r3
 800ba06:	dc01      	bgt.n	800ba0c <__ieee754_pow+0x5c>
 800ba08:	d10f      	bne.n	800ba2a <__ieee754_pow+0x7a>
 800ba0a:	b172      	cbz	r2, 800ba2a <__ieee754_pow+0x7a>
 800ba0c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ba10:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ba14:	ea55 050a 	orrs.w	r5, r5, sl
 800ba18:	d1e1      	bne.n	800b9de <__ieee754_pow+0x2e>
 800ba1a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ba1e:	18db      	adds	r3, r3, r3
 800ba20:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ba24:	4152      	adcs	r2, r2
 800ba26:	429d      	cmp	r5, r3
 800ba28:	e7d5      	b.n	800b9d6 <__ieee754_pow+0x26>
 800ba2a:	2d00      	cmp	r5, #0
 800ba2c:	da39      	bge.n	800baa2 <__ieee754_pow+0xf2>
 800ba2e:	4b6e      	ldr	r3, [pc, #440]	; (800bbe8 <__ieee754_pow+0x238>)
 800ba30:	429e      	cmp	r6, r3
 800ba32:	dc52      	bgt.n	800bada <__ieee754_pow+0x12a>
 800ba34:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ba38:	429e      	cmp	r6, r3
 800ba3a:	f340 849c 	ble.w	800c376 <__ieee754_pow+0x9c6>
 800ba3e:	1533      	asrs	r3, r6, #20
 800ba40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ba44:	2b14      	cmp	r3, #20
 800ba46:	dd0f      	ble.n	800ba68 <__ieee754_pow+0xb8>
 800ba48:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ba4c:	fa22 f103 	lsr.w	r1, r2, r3
 800ba50:	fa01 f303 	lsl.w	r3, r1, r3
 800ba54:	4293      	cmp	r3, r2
 800ba56:	f040 848e 	bne.w	800c376 <__ieee754_pow+0x9c6>
 800ba5a:	f001 0101 	and.w	r1, r1, #1
 800ba5e:	f1c1 0302 	rsb	r3, r1, #2
 800ba62:	9300      	str	r3, [sp, #0]
 800ba64:	b182      	cbz	r2, 800ba88 <__ieee754_pow+0xd8>
 800ba66:	e05d      	b.n	800bb24 <__ieee754_pow+0x174>
 800ba68:	2a00      	cmp	r2, #0
 800ba6a:	d159      	bne.n	800bb20 <__ieee754_pow+0x170>
 800ba6c:	f1c3 0314 	rsb	r3, r3, #20
 800ba70:	fa46 f103 	asr.w	r1, r6, r3
 800ba74:	fa01 f303 	lsl.w	r3, r1, r3
 800ba78:	42b3      	cmp	r3, r6
 800ba7a:	f040 8479 	bne.w	800c370 <__ieee754_pow+0x9c0>
 800ba7e:	f001 0101 	and.w	r1, r1, #1
 800ba82:	f1c1 0302 	rsb	r3, r1, #2
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	4b58      	ldr	r3, [pc, #352]	; (800bbec <__ieee754_pow+0x23c>)
 800ba8a:	429e      	cmp	r6, r3
 800ba8c:	d132      	bne.n	800baf4 <__ieee754_pow+0x144>
 800ba8e:	2f00      	cmp	r7, #0
 800ba90:	f280 846a 	bge.w	800c368 <__ieee754_pow+0x9b8>
 800ba94:	4642      	mov	r2, r8
 800ba96:	464b      	mov	r3, r9
 800ba98:	2000      	movs	r0, #0
 800ba9a:	4954      	ldr	r1, [pc, #336]	; (800bbec <__ieee754_pow+0x23c>)
 800ba9c:	f7f4 fe3e 	bl	800071c <__aeabi_ddiv>
 800baa0:	e7a3      	b.n	800b9ea <__ieee754_pow+0x3a>
 800baa2:	2300      	movs	r3, #0
 800baa4:	9300      	str	r3, [sp, #0]
 800baa6:	2a00      	cmp	r2, #0
 800baa8:	d13c      	bne.n	800bb24 <__ieee754_pow+0x174>
 800baaa:	4b4e      	ldr	r3, [pc, #312]	; (800bbe4 <__ieee754_pow+0x234>)
 800baac:	429e      	cmp	r6, r3
 800baae:	d1eb      	bne.n	800ba88 <__ieee754_pow+0xd8>
 800bab0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bab4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bab8:	ea53 030a 	orrs.w	r3, r3, sl
 800babc:	f000 8448 	beq.w	800c350 <__ieee754_pow+0x9a0>
 800bac0:	4b4b      	ldr	r3, [pc, #300]	; (800bbf0 <__ieee754_pow+0x240>)
 800bac2:	429c      	cmp	r4, r3
 800bac4:	dd0b      	ble.n	800bade <__ieee754_pow+0x12e>
 800bac6:	2f00      	cmp	r7, #0
 800bac8:	f2c0 8448 	blt.w	800c35c <__ieee754_pow+0x9ac>
 800bacc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800bad0:	4658      	mov	r0, fp
 800bad2:	4661      	mov	r1, ip
 800bad4:	b013      	add	sp, #76	; 0x4c
 800bad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bada:	2302      	movs	r3, #2
 800badc:	e7e2      	b.n	800baa4 <__ieee754_pow+0xf4>
 800bade:	2f00      	cmp	r7, #0
 800bae0:	f04f 0b00 	mov.w	fp, #0
 800bae4:	f04f 0c00 	mov.w	ip, #0
 800bae8:	daf2      	bge.n	800bad0 <__ieee754_pow+0x120>
 800baea:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800baee:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800baf2:	e7ed      	b.n	800bad0 <__ieee754_pow+0x120>
 800baf4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800baf8:	d106      	bne.n	800bb08 <__ieee754_pow+0x158>
 800bafa:	4642      	mov	r2, r8
 800bafc:	464b      	mov	r3, r9
 800bafe:	4640      	mov	r0, r8
 800bb00:	4649      	mov	r1, r9
 800bb02:	f7f4 fce1 	bl	80004c8 <__aeabi_dmul>
 800bb06:	e770      	b.n	800b9ea <__ieee754_pow+0x3a>
 800bb08:	4b3a      	ldr	r3, [pc, #232]	; (800bbf4 <__ieee754_pow+0x244>)
 800bb0a:	429f      	cmp	r7, r3
 800bb0c:	d10a      	bne.n	800bb24 <__ieee754_pow+0x174>
 800bb0e:	2d00      	cmp	r5, #0
 800bb10:	db08      	blt.n	800bb24 <__ieee754_pow+0x174>
 800bb12:	4640      	mov	r0, r8
 800bb14:	4649      	mov	r1, r9
 800bb16:	b013      	add	sp, #76	; 0x4c
 800bb18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb1c:	f000 be58 	b.w	800c7d0 <__ieee754_sqrt>
 800bb20:	2300      	movs	r3, #0
 800bb22:	9300      	str	r3, [sp, #0]
 800bb24:	4640      	mov	r0, r8
 800bb26:	4649      	mov	r1, r9
 800bb28:	f7ff fbf6 	bl	800b318 <fabs>
 800bb2c:	4683      	mov	fp, r0
 800bb2e:	468c      	mov	ip, r1
 800bb30:	f1ba 0f00 	cmp.w	sl, #0
 800bb34:	d128      	bne.n	800bb88 <__ieee754_pow+0x1d8>
 800bb36:	b124      	cbz	r4, 800bb42 <__ieee754_pow+0x192>
 800bb38:	4b2c      	ldr	r3, [pc, #176]	; (800bbec <__ieee754_pow+0x23c>)
 800bb3a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d122      	bne.n	800bb88 <__ieee754_pow+0x1d8>
 800bb42:	2f00      	cmp	r7, #0
 800bb44:	da07      	bge.n	800bb56 <__ieee754_pow+0x1a6>
 800bb46:	465a      	mov	r2, fp
 800bb48:	4663      	mov	r3, ip
 800bb4a:	2000      	movs	r0, #0
 800bb4c:	4927      	ldr	r1, [pc, #156]	; (800bbec <__ieee754_pow+0x23c>)
 800bb4e:	f7f4 fde5 	bl	800071c <__aeabi_ddiv>
 800bb52:	4683      	mov	fp, r0
 800bb54:	468c      	mov	ip, r1
 800bb56:	2d00      	cmp	r5, #0
 800bb58:	daba      	bge.n	800bad0 <__ieee754_pow+0x120>
 800bb5a:	9b00      	ldr	r3, [sp, #0]
 800bb5c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bb60:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bb64:	4323      	orrs	r3, r4
 800bb66:	d108      	bne.n	800bb7a <__ieee754_pow+0x1ca>
 800bb68:	465a      	mov	r2, fp
 800bb6a:	4663      	mov	r3, ip
 800bb6c:	4658      	mov	r0, fp
 800bb6e:	4661      	mov	r1, ip
 800bb70:	f7f4 faf2 	bl	8000158 <__aeabi_dsub>
 800bb74:	4602      	mov	r2, r0
 800bb76:	460b      	mov	r3, r1
 800bb78:	e790      	b.n	800ba9c <__ieee754_pow+0xec>
 800bb7a:	9b00      	ldr	r3, [sp, #0]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d1a7      	bne.n	800bad0 <__ieee754_pow+0x120>
 800bb80:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800bb84:	469c      	mov	ip, r3
 800bb86:	e7a3      	b.n	800bad0 <__ieee754_pow+0x120>
 800bb88:	0feb      	lsrs	r3, r5, #31
 800bb8a:	3b01      	subs	r3, #1
 800bb8c:	930c      	str	r3, [sp, #48]	; 0x30
 800bb8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb90:	9b00      	ldr	r3, [sp, #0]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	d104      	bne.n	800bba0 <__ieee754_pow+0x1f0>
 800bb96:	4642      	mov	r2, r8
 800bb98:	464b      	mov	r3, r9
 800bb9a:	4640      	mov	r0, r8
 800bb9c:	4649      	mov	r1, r9
 800bb9e:	e7e7      	b.n	800bb70 <__ieee754_pow+0x1c0>
 800bba0:	4b15      	ldr	r3, [pc, #84]	; (800bbf8 <__ieee754_pow+0x248>)
 800bba2:	429e      	cmp	r6, r3
 800bba4:	f340 80f6 	ble.w	800bd94 <__ieee754_pow+0x3e4>
 800bba8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bbac:	429e      	cmp	r6, r3
 800bbae:	4b10      	ldr	r3, [pc, #64]	; (800bbf0 <__ieee754_pow+0x240>)
 800bbb0:	dd09      	ble.n	800bbc6 <__ieee754_pow+0x216>
 800bbb2:	429c      	cmp	r4, r3
 800bbb4:	dc0c      	bgt.n	800bbd0 <__ieee754_pow+0x220>
 800bbb6:	2f00      	cmp	r7, #0
 800bbb8:	da0c      	bge.n	800bbd4 <__ieee754_pow+0x224>
 800bbba:	2000      	movs	r0, #0
 800bbbc:	b013      	add	sp, #76	; 0x4c
 800bbbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc2:	f001 bb92 	b.w	800d2ea <__math_oflow>
 800bbc6:	429c      	cmp	r4, r3
 800bbc8:	dbf5      	blt.n	800bbb6 <__ieee754_pow+0x206>
 800bbca:	4b08      	ldr	r3, [pc, #32]	; (800bbec <__ieee754_pow+0x23c>)
 800bbcc:	429c      	cmp	r4, r3
 800bbce:	dd15      	ble.n	800bbfc <__ieee754_pow+0x24c>
 800bbd0:	2f00      	cmp	r7, #0
 800bbd2:	dcf2      	bgt.n	800bbba <__ieee754_pow+0x20a>
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	b013      	add	sp, #76	; 0x4c
 800bbd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbdc:	f001 bb80 	b.w	800d2e0 <__math_uflow>
 800bbe0:	fff00000 	.word	0xfff00000
 800bbe4:	7ff00000 	.word	0x7ff00000
 800bbe8:	433fffff 	.word	0x433fffff
 800bbec:	3ff00000 	.word	0x3ff00000
 800bbf0:	3fefffff 	.word	0x3fefffff
 800bbf4:	3fe00000 	.word	0x3fe00000
 800bbf8:	41e00000 	.word	0x41e00000
 800bbfc:	4661      	mov	r1, ip
 800bbfe:	2200      	movs	r2, #0
 800bc00:	4658      	mov	r0, fp
 800bc02:	4b5f      	ldr	r3, [pc, #380]	; (800bd80 <__ieee754_pow+0x3d0>)
 800bc04:	f7f4 faa8 	bl	8000158 <__aeabi_dsub>
 800bc08:	a355      	add	r3, pc, #340	; (adr r3, 800bd60 <__ieee754_pow+0x3b0>)
 800bc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0e:	4604      	mov	r4, r0
 800bc10:	460d      	mov	r5, r1
 800bc12:	f7f4 fc59 	bl	80004c8 <__aeabi_dmul>
 800bc16:	a354      	add	r3, pc, #336	; (adr r3, 800bd68 <__ieee754_pow+0x3b8>)
 800bc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1c:	4606      	mov	r6, r0
 800bc1e:	460f      	mov	r7, r1
 800bc20:	4620      	mov	r0, r4
 800bc22:	4629      	mov	r1, r5
 800bc24:	f7f4 fc50 	bl	80004c8 <__aeabi_dmul>
 800bc28:	2200      	movs	r2, #0
 800bc2a:	4682      	mov	sl, r0
 800bc2c:	468b      	mov	fp, r1
 800bc2e:	4620      	mov	r0, r4
 800bc30:	4629      	mov	r1, r5
 800bc32:	4b54      	ldr	r3, [pc, #336]	; (800bd84 <__ieee754_pow+0x3d4>)
 800bc34:	f7f4 fc48 	bl	80004c8 <__aeabi_dmul>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	a14c      	add	r1, pc, #304	; (adr r1, 800bd70 <__ieee754_pow+0x3c0>)
 800bc3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc42:	f7f4 fa89 	bl	8000158 <__aeabi_dsub>
 800bc46:	4622      	mov	r2, r4
 800bc48:	462b      	mov	r3, r5
 800bc4a:	f7f4 fc3d 	bl	80004c8 <__aeabi_dmul>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	460b      	mov	r3, r1
 800bc52:	2000      	movs	r0, #0
 800bc54:	494c      	ldr	r1, [pc, #304]	; (800bd88 <__ieee754_pow+0x3d8>)
 800bc56:	f7f4 fa7f 	bl	8000158 <__aeabi_dsub>
 800bc5a:	4622      	mov	r2, r4
 800bc5c:	462b      	mov	r3, r5
 800bc5e:	4680      	mov	r8, r0
 800bc60:	4689      	mov	r9, r1
 800bc62:	4620      	mov	r0, r4
 800bc64:	4629      	mov	r1, r5
 800bc66:	f7f4 fc2f 	bl	80004c8 <__aeabi_dmul>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	4640      	mov	r0, r8
 800bc70:	4649      	mov	r1, r9
 800bc72:	f7f4 fc29 	bl	80004c8 <__aeabi_dmul>
 800bc76:	a340      	add	r3, pc, #256	; (adr r3, 800bd78 <__ieee754_pow+0x3c8>)
 800bc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7c:	f7f4 fc24 	bl	80004c8 <__aeabi_dmul>
 800bc80:	4602      	mov	r2, r0
 800bc82:	460b      	mov	r3, r1
 800bc84:	4650      	mov	r0, sl
 800bc86:	4659      	mov	r1, fp
 800bc88:	f7f4 fa66 	bl	8000158 <__aeabi_dsub>
 800bc8c:	f04f 0a00 	mov.w	sl, #0
 800bc90:	4602      	mov	r2, r0
 800bc92:	460b      	mov	r3, r1
 800bc94:	4604      	mov	r4, r0
 800bc96:	460d      	mov	r5, r1
 800bc98:	4630      	mov	r0, r6
 800bc9a:	4639      	mov	r1, r7
 800bc9c:	f7f4 fa5e 	bl	800015c <__adddf3>
 800bca0:	4632      	mov	r2, r6
 800bca2:	463b      	mov	r3, r7
 800bca4:	4650      	mov	r0, sl
 800bca6:	468b      	mov	fp, r1
 800bca8:	f7f4 fa56 	bl	8000158 <__aeabi_dsub>
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	f7f4 fa50 	bl	8000158 <__aeabi_dsub>
 800bcb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bcbc:	9b00      	ldr	r3, [sp, #0]
 800bcbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	f04f 0600 	mov.w	r6, #0
 800bcc8:	f04f 0200 	mov.w	r2, #0
 800bccc:	bf0c      	ite	eq
 800bcce:	4b2f      	ldreq	r3, [pc, #188]	; (800bd8c <__ieee754_pow+0x3dc>)
 800bcd0:	4b2b      	ldrne	r3, [pc, #172]	; (800bd80 <__ieee754_pow+0x3d0>)
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	460d      	mov	r5, r1
 800bcd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcda:	e9cd 2300 	strd	r2, r3, [sp]
 800bcde:	4632      	mov	r2, r6
 800bce0:	463b      	mov	r3, r7
 800bce2:	f7f4 fa39 	bl	8000158 <__aeabi_dsub>
 800bce6:	4652      	mov	r2, sl
 800bce8:	465b      	mov	r3, fp
 800bcea:	f7f4 fbed 	bl	80004c8 <__aeabi_dmul>
 800bcee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcf2:	4680      	mov	r8, r0
 800bcf4:	4689      	mov	r9, r1
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	4629      	mov	r1, r5
 800bcfa:	f7f4 fbe5 	bl	80004c8 <__aeabi_dmul>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	460b      	mov	r3, r1
 800bd02:	4640      	mov	r0, r8
 800bd04:	4649      	mov	r1, r9
 800bd06:	f7f4 fa29 	bl	800015c <__adddf3>
 800bd0a:	4632      	mov	r2, r6
 800bd0c:	463b      	mov	r3, r7
 800bd0e:	4680      	mov	r8, r0
 800bd10:	4689      	mov	r9, r1
 800bd12:	4650      	mov	r0, sl
 800bd14:	4659      	mov	r1, fp
 800bd16:	f7f4 fbd7 	bl	80004c8 <__aeabi_dmul>
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	460d      	mov	r5, r1
 800bd1e:	460b      	mov	r3, r1
 800bd20:	4602      	mov	r2, r0
 800bd22:	4649      	mov	r1, r9
 800bd24:	4640      	mov	r0, r8
 800bd26:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bd2a:	f7f4 fa17 	bl	800015c <__adddf3>
 800bd2e:	4b18      	ldr	r3, [pc, #96]	; (800bd90 <__ieee754_pow+0x3e0>)
 800bd30:	4682      	mov	sl, r0
 800bd32:	4299      	cmp	r1, r3
 800bd34:	460f      	mov	r7, r1
 800bd36:	460e      	mov	r6, r1
 800bd38:	f340 82e5 	ble.w	800c306 <__ieee754_pow+0x956>
 800bd3c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bd40:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bd44:	4303      	orrs	r3, r0
 800bd46:	f000 81df 	beq.w	800c108 <__ieee754_pow+0x758>
 800bd4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	2300      	movs	r3, #0
 800bd52:	f7f4 fe2b 	bl	80009ac <__aeabi_dcmplt>
 800bd56:	3800      	subs	r0, #0
 800bd58:	bf18      	it	ne
 800bd5a:	2001      	movne	r0, #1
 800bd5c:	e72e      	b.n	800bbbc <__ieee754_pow+0x20c>
 800bd5e:	bf00      	nop
 800bd60:	60000000 	.word	0x60000000
 800bd64:	3ff71547 	.word	0x3ff71547
 800bd68:	f85ddf44 	.word	0xf85ddf44
 800bd6c:	3e54ae0b 	.word	0x3e54ae0b
 800bd70:	55555555 	.word	0x55555555
 800bd74:	3fd55555 	.word	0x3fd55555
 800bd78:	652b82fe 	.word	0x652b82fe
 800bd7c:	3ff71547 	.word	0x3ff71547
 800bd80:	3ff00000 	.word	0x3ff00000
 800bd84:	3fd00000 	.word	0x3fd00000
 800bd88:	3fe00000 	.word	0x3fe00000
 800bd8c:	bff00000 	.word	0xbff00000
 800bd90:	408fffff 	.word	0x408fffff
 800bd94:	4bd2      	ldr	r3, [pc, #840]	; (800c0e0 <__ieee754_pow+0x730>)
 800bd96:	2200      	movs	r2, #0
 800bd98:	402b      	ands	r3, r5
 800bd9a:	b943      	cbnz	r3, 800bdae <__ieee754_pow+0x3fe>
 800bd9c:	4658      	mov	r0, fp
 800bd9e:	4661      	mov	r1, ip
 800bda0:	4bd0      	ldr	r3, [pc, #832]	; (800c0e4 <__ieee754_pow+0x734>)
 800bda2:	f7f4 fb91 	bl	80004c8 <__aeabi_dmul>
 800bda6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bdaa:	4683      	mov	fp, r0
 800bdac:	460c      	mov	r4, r1
 800bdae:	1523      	asrs	r3, r4, #20
 800bdb0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bdb4:	4413      	add	r3, r2
 800bdb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdb8:	4bcb      	ldr	r3, [pc, #812]	; (800c0e8 <__ieee754_pow+0x738>)
 800bdba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bdbe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bdc2:	429c      	cmp	r4, r3
 800bdc4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bdc8:	dd08      	ble.n	800bddc <__ieee754_pow+0x42c>
 800bdca:	4bc8      	ldr	r3, [pc, #800]	; (800c0ec <__ieee754_pow+0x73c>)
 800bdcc:	429c      	cmp	r4, r3
 800bdce:	f340 8199 	ble.w	800c104 <__ieee754_pow+0x754>
 800bdd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdd4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bdd8:	3301      	adds	r3, #1
 800bdda:	930b      	str	r3, [sp, #44]	; 0x2c
 800bddc:	2600      	movs	r6, #0
 800bdde:	00f3      	lsls	r3, r6, #3
 800bde0:	930d      	str	r3, [sp, #52]	; 0x34
 800bde2:	4bc3      	ldr	r3, [pc, #780]	; (800c0f0 <__ieee754_pow+0x740>)
 800bde4:	4658      	mov	r0, fp
 800bde6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bdea:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bdee:	4629      	mov	r1, r5
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800bdf6:	4623      	mov	r3, r4
 800bdf8:	f7f4 f9ae 	bl	8000158 <__aeabi_dsub>
 800bdfc:	46da      	mov	sl, fp
 800bdfe:	462b      	mov	r3, r5
 800be00:	4652      	mov	r2, sl
 800be02:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800be06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800be0a:	f7f4 f9a7 	bl	800015c <__adddf3>
 800be0e:	4602      	mov	r2, r0
 800be10:	460b      	mov	r3, r1
 800be12:	2000      	movs	r0, #0
 800be14:	49b7      	ldr	r1, [pc, #732]	; (800c0f4 <__ieee754_pow+0x744>)
 800be16:	f7f4 fc81 	bl	800071c <__aeabi_ddiv>
 800be1a:	4602      	mov	r2, r0
 800be1c:	460b      	mov	r3, r1
 800be1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800be22:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800be26:	f7f4 fb4f 	bl	80004c8 <__aeabi_dmul>
 800be2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be2e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800be32:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800be36:	2300      	movs	r3, #0
 800be38:	2200      	movs	r2, #0
 800be3a:	46ab      	mov	fp, r5
 800be3c:	106d      	asrs	r5, r5, #1
 800be3e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800be42:	9304      	str	r3, [sp, #16]
 800be44:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800be48:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800be4c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800be50:	4640      	mov	r0, r8
 800be52:	4649      	mov	r1, r9
 800be54:	4614      	mov	r4, r2
 800be56:	461d      	mov	r5, r3
 800be58:	f7f4 fb36 	bl	80004c8 <__aeabi_dmul>
 800be5c:	4602      	mov	r2, r0
 800be5e:	460b      	mov	r3, r1
 800be60:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800be64:	f7f4 f978 	bl	8000158 <__aeabi_dsub>
 800be68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800be6c:	4606      	mov	r6, r0
 800be6e:	460f      	mov	r7, r1
 800be70:	4620      	mov	r0, r4
 800be72:	4629      	mov	r1, r5
 800be74:	f7f4 f970 	bl	8000158 <__aeabi_dsub>
 800be78:	4602      	mov	r2, r0
 800be7a:	460b      	mov	r3, r1
 800be7c:	4650      	mov	r0, sl
 800be7e:	4659      	mov	r1, fp
 800be80:	f7f4 f96a 	bl	8000158 <__aeabi_dsub>
 800be84:	4642      	mov	r2, r8
 800be86:	464b      	mov	r3, r9
 800be88:	f7f4 fb1e 	bl	80004c8 <__aeabi_dmul>
 800be8c:	4602      	mov	r2, r0
 800be8e:	460b      	mov	r3, r1
 800be90:	4630      	mov	r0, r6
 800be92:	4639      	mov	r1, r7
 800be94:	f7f4 f960 	bl	8000158 <__aeabi_dsub>
 800be98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be9c:	f7f4 fb14 	bl	80004c8 <__aeabi_dmul>
 800bea0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bea4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bea8:	4610      	mov	r0, r2
 800beaa:	4619      	mov	r1, r3
 800beac:	f7f4 fb0c 	bl	80004c8 <__aeabi_dmul>
 800beb0:	a379      	add	r3, pc, #484	; (adr r3, 800c098 <__ieee754_pow+0x6e8>)
 800beb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb6:	4604      	mov	r4, r0
 800beb8:	460d      	mov	r5, r1
 800beba:	f7f4 fb05 	bl	80004c8 <__aeabi_dmul>
 800bebe:	a378      	add	r3, pc, #480	; (adr r3, 800c0a0 <__ieee754_pow+0x6f0>)
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	f7f4 f94a 	bl	800015c <__adddf3>
 800bec8:	4622      	mov	r2, r4
 800beca:	462b      	mov	r3, r5
 800becc:	f7f4 fafc 	bl	80004c8 <__aeabi_dmul>
 800bed0:	a375      	add	r3, pc, #468	; (adr r3, 800c0a8 <__ieee754_pow+0x6f8>)
 800bed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed6:	f7f4 f941 	bl	800015c <__adddf3>
 800beda:	4622      	mov	r2, r4
 800bedc:	462b      	mov	r3, r5
 800bede:	f7f4 faf3 	bl	80004c8 <__aeabi_dmul>
 800bee2:	a373      	add	r3, pc, #460	; (adr r3, 800c0b0 <__ieee754_pow+0x700>)
 800bee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee8:	f7f4 f938 	bl	800015c <__adddf3>
 800beec:	4622      	mov	r2, r4
 800beee:	462b      	mov	r3, r5
 800bef0:	f7f4 faea 	bl	80004c8 <__aeabi_dmul>
 800bef4:	a370      	add	r3, pc, #448	; (adr r3, 800c0b8 <__ieee754_pow+0x708>)
 800bef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befa:	f7f4 f92f 	bl	800015c <__adddf3>
 800befe:	4622      	mov	r2, r4
 800bf00:	462b      	mov	r3, r5
 800bf02:	f7f4 fae1 	bl	80004c8 <__aeabi_dmul>
 800bf06:	a36e      	add	r3, pc, #440	; (adr r3, 800c0c0 <__ieee754_pow+0x710>)
 800bf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0c:	f7f4 f926 	bl	800015c <__adddf3>
 800bf10:	4622      	mov	r2, r4
 800bf12:	4606      	mov	r6, r0
 800bf14:	460f      	mov	r7, r1
 800bf16:	462b      	mov	r3, r5
 800bf18:	4620      	mov	r0, r4
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	f7f4 fad4 	bl	80004c8 <__aeabi_dmul>
 800bf20:	4602      	mov	r2, r0
 800bf22:	460b      	mov	r3, r1
 800bf24:	4630      	mov	r0, r6
 800bf26:	4639      	mov	r1, r7
 800bf28:	f7f4 face 	bl	80004c8 <__aeabi_dmul>
 800bf2c:	4604      	mov	r4, r0
 800bf2e:	460d      	mov	r5, r1
 800bf30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf34:	4642      	mov	r2, r8
 800bf36:	464b      	mov	r3, r9
 800bf38:	f7f4 f910 	bl	800015c <__adddf3>
 800bf3c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bf40:	f7f4 fac2 	bl	80004c8 <__aeabi_dmul>
 800bf44:	4622      	mov	r2, r4
 800bf46:	462b      	mov	r3, r5
 800bf48:	f7f4 f908 	bl	800015c <__adddf3>
 800bf4c:	4642      	mov	r2, r8
 800bf4e:	4606      	mov	r6, r0
 800bf50:	460f      	mov	r7, r1
 800bf52:	464b      	mov	r3, r9
 800bf54:	4640      	mov	r0, r8
 800bf56:	4649      	mov	r1, r9
 800bf58:	f7f4 fab6 	bl	80004c8 <__aeabi_dmul>
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	4b66      	ldr	r3, [pc, #408]	; (800c0f8 <__ieee754_pow+0x748>)
 800bf60:	4682      	mov	sl, r0
 800bf62:	468b      	mov	fp, r1
 800bf64:	f7f4 f8fa 	bl	800015c <__adddf3>
 800bf68:	4632      	mov	r2, r6
 800bf6a:	463b      	mov	r3, r7
 800bf6c:	f7f4 f8f6 	bl	800015c <__adddf3>
 800bf70:	2400      	movs	r4, #0
 800bf72:	460d      	mov	r5, r1
 800bf74:	4622      	mov	r2, r4
 800bf76:	460b      	mov	r3, r1
 800bf78:	4640      	mov	r0, r8
 800bf7a:	4649      	mov	r1, r9
 800bf7c:	f7f4 faa4 	bl	80004c8 <__aeabi_dmul>
 800bf80:	2200      	movs	r2, #0
 800bf82:	4680      	mov	r8, r0
 800bf84:	4689      	mov	r9, r1
 800bf86:	4620      	mov	r0, r4
 800bf88:	4629      	mov	r1, r5
 800bf8a:	4b5b      	ldr	r3, [pc, #364]	; (800c0f8 <__ieee754_pow+0x748>)
 800bf8c:	f7f4 f8e4 	bl	8000158 <__aeabi_dsub>
 800bf90:	4652      	mov	r2, sl
 800bf92:	465b      	mov	r3, fp
 800bf94:	f7f4 f8e0 	bl	8000158 <__aeabi_dsub>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	4639      	mov	r1, r7
 800bfa0:	f7f4 f8da 	bl	8000158 <__aeabi_dsub>
 800bfa4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfa8:	f7f4 fa8e 	bl	80004c8 <__aeabi_dmul>
 800bfac:	4622      	mov	r2, r4
 800bfae:	4606      	mov	r6, r0
 800bfb0:	460f      	mov	r7, r1
 800bfb2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bfb6:	462b      	mov	r3, r5
 800bfb8:	f7f4 fa86 	bl	80004c8 <__aeabi_dmul>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	4639      	mov	r1, r7
 800bfc4:	f7f4 f8ca 	bl	800015c <__adddf3>
 800bfc8:	2400      	movs	r4, #0
 800bfca:	4606      	mov	r6, r0
 800bfcc:	460f      	mov	r7, r1
 800bfce:	4602      	mov	r2, r0
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	4640      	mov	r0, r8
 800bfd4:	4649      	mov	r1, r9
 800bfd6:	f7f4 f8c1 	bl	800015c <__adddf3>
 800bfda:	a33b      	add	r3, pc, #236	; (adr r3, 800c0c8 <__ieee754_pow+0x718>)
 800bfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	460d      	mov	r5, r1
 800bfe4:	f7f4 fa70 	bl	80004c8 <__aeabi_dmul>
 800bfe8:	4642      	mov	r2, r8
 800bfea:	464b      	mov	r3, r9
 800bfec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bff0:	4620      	mov	r0, r4
 800bff2:	4629      	mov	r1, r5
 800bff4:	f7f4 f8b0 	bl	8000158 <__aeabi_dsub>
 800bff8:	4602      	mov	r2, r0
 800bffa:	460b      	mov	r3, r1
 800bffc:	4630      	mov	r0, r6
 800bffe:	4639      	mov	r1, r7
 800c000:	f7f4 f8aa 	bl	8000158 <__aeabi_dsub>
 800c004:	a332      	add	r3, pc, #200	; (adr r3, 800c0d0 <__ieee754_pow+0x720>)
 800c006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00a:	f7f4 fa5d 	bl	80004c8 <__aeabi_dmul>
 800c00e:	a332      	add	r3, pc, #200	; (adr r3, 800c0d8 <__ieee754_pow+0x728>)
 800c010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c014:	4606      	mov	r6, r0
 800c016:	460f      	mov	r7, r1
 800c018:	4620      	mov	r0, r4
 800c01a:	4629      	mov	r1, r5
 800c01c:	f7f4 fa54 	bl	80004c8 <__aeabi_dmul>
 800c020:	4602      	mov	r2, r0
 800c022:	460b      	mov	r3, r1
 800c024:	4630      	mov	r0, r6
 800c026:	4639      	mov	r1, r7
 800c028:	f7f4 f898 	bl	800015c <__adddf3>
 800c02c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c02e:	4b33      	ldr	r3, [pc, #204]	; (800c0fc <__ieee754_pow+0x74c>)
 800c030:	f04f 0a00 	mov.w	sl, #0
 800c034:	4413      	add	r3, r2
 800c036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03a:	f7f4 f88f 	bl	800015c <__adddf3>
 800c03e:	4680      	mov	r8, r0
 800c040:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c042:	4689      	mov	r9, r1
 800c044:	f7f4 f9d6 	bl	80003f4 <__aeabi_i2d>
 800c048:	4604      	mov	r4, r0
 800c04a:	460d      	mov	r5, r1
 800c04c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c04e:	4b2c      	ldr	r3, [pc, #176]	; (800c100 <__ieee754_pow+0x750>)
 800c050:	4413      	add	r3, r2
 800c052:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c056:	4642      	mov	r2, r8
 800c058:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c05c:	464b      	mov	r3, r9
 800c05e:	f7f4 f87d 	bl	800015c <__adddf3>
 800c062:	4632      	mov	r2, r6
 800c064:	463b      	mov	r3, r7
 800c066:	f7f4 f879 	bl	800015c <__adddf3>
 800c06a:	4622      	mov	r2, r4
 800c06c:	462b      	mov	r3, r5
 800c06e:	f7f4 f875 	bl	800015c <__adddf3>
 800c072:	4622      	mov	r2, r4
 800c074:	462b      	mov	r3, r5
 800c076:	4650      	mov	r0, sl
 800c078:	468b      	mov	fp, r1
 800c07a:	f7f4 f86d 	bl	8000158 <__aeabi_dsub>
 800c07e:	4632      	mov	r2, r6
 800c080:	463b      	mov	r3, r7
 800c082:	f7f4 f869 	bl	8000158 <__aeabi_dsub>
 800c086:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c08a:	f7f4 f865 	bl	8000158 <__aeabi_dsub>
 800c08e:	4602      	mov	r2, r0
 800c090:	460b      	mov	r3, r1
 800c092:	4640      	mov	r0, r8
 800c094:	4649      	mov	r1, r9
 800c096:	e60d      	b.n	800bcb4 <__ieee754_pow+0x304>
 800c098:	4a454eef 	.word	0x4a454eef
 800c09c:	3fca7e28 	.word	0x3fca7e28
 800c0a0:	93c9db65 	.word	0x93c9db65
 800c0a4:	3fcd864a 	.word	0x3fcd864a
 800c0a8:	a91d4101 	.word	0xa91d4101
 800c0ac:	3fd17460 	.word	0x3fd17460
 800c0b0:	518f264d 	.word	0x518f264d
 800c0b4:	3fd55555 	.word	0x3fd55555
 800c0b8:	db6fabff 	.word	0xdb6fabff
 800c0bc:	3fdb6db6 	.word	0x3fdb6db6
 800c0c0:	33333303 	.word	0x33333303
 800c0c4:	3fe33333 	.word	0x3fe33333
 800c0c8:	e0000000 	.word	0xe0000000
 800c0cc:	3feec709 	.word	0x3feec709
 800c0d0:	dc3a03fd 	.word	0xdc3a03fd
 800c0d4:	3feec709 	.word	0x3feec709
 800c0d8:	145b01f5 	.word	0x145b01f5
 800c0dc:	be3e2fe0 	.word	0xbe3e2fe0
 800c0e0:	7ff00000 	.word	0x7ff00000
 800c0e4:	43400000 	.word	0x43400000
 800c0e8:	0003988e 	.word	0x0003988e
 800c0ec:	000bb679 	.word	0x000bb679
 800c0f0:	0800d5e0 	.word	0x0800d5e0
 800c0f4:	3ff00000 	.word	0x3ff00000
 800c0f8:	40080000 	.word	0x40080000
 800c0fc:	0800d600 	.word	0x0800d600
 800c100:	0800d5f0 	.word	0x0800d5f0
 800c104:	2601      	movs	r6, #1
 800c106:	e66a      	b.n	800bdde <__ieee754_pow+0x42e>
 800c108:	a39d      	add	r3, pc, #628	; (adr r3, 800c380 <__ieee754_pow+0x9d0>)
 800c10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10e:	4640      	mov	r0, r8
 800c110:	4649      	mov	r1, r9
 800c112:	f7f4 f823 	bl	800015c <__adddf3>
 800c116:	4622      	mov	r2, r4
 800c118:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c11c:	462b      	mov	r3, r5
 800c11e:	4650      	mov	r0, sl
 800c120:	4639      	mov	r1, r7
 800c122:	f7f4 f819 	bl	8000158 <__aeabi_dsub>
 800c126:	4602      	mov	r2, r0
 800c128:	460b      	mov	r3, r1
 800c12a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c12e:	f7f4 fc5b 	bl	80009e8 <__aeabi_dcmpgt>
 800c132:	2800      	cmp	r0, #0
 800c134:	f47f ae09 	bne.w	800bd4a <__ieee754_pow+0x39a>
 800c138:	4aa3      	ldr	r2, [pc, #652]	; (800c3c8 <__ieee754_pow+0xa18>)
 800c13a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800c13e:	4293      	cmp	r3, r2
 800c140:	f340 8101 	ble.w	800c346 <__ieee754_pow+0x996>
 800c144:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c148:	2000      	movs	r0, #0
 800c14a:	151b      	asrs	r3, r3, #20
 800c14c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c150:	fa4a f303 	asr.w	r3, sl, r3
 800c154:	4433      	add	r3, r6
 800c156:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c15a:	4f9c      	ldr	r7, [pc, #624]	; (800c3cc <__ieee754_pow+0xa1c>)
 800c15c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c160:	4117      	asrs	r7, r2
 800c162:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c166:	ea23 0107 	bic.w	r1, r3, r7
 800c16a:	f1c2 0214 	rsb	r2, r2, #20
 800c16e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c172:	460b      	mov	r3, r1
 800c174:	fa4a fa02 	asr.w	sl, sl, r2
 800c178:	2e00      	cmp	r6, #0
 800c17a:	4602      	mov	r2, r0
 800c17c:	4629      	mov	r1, r5
 800c17e:	4620      	mov	r0, r4
 800c180:	bfb8      	it	lt
 800c182:	f1ca 0a00 	rsblt	sl, sl, #0
 800c186:	f7f3 ffe7 	bl	8000158 <__aeabi_dsub>
 800c18a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c18e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c192:	2400      	movs	r4, #0
 800c194:	4642      	mov	r2, r8
 800c196:	464b      	mov	r3, r9
 800c198:	f7f3 ffe0 	bl	800015c <__adddf3>
 800c19c:	a37a      	add	r3, pc, #488	; (adr r3, 800c388 <__ieee754_pow+0x9d8>)
 800c19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	460d      	mov	r5, r1
 800c1a6:	f7f4 f98f 	bl	80004c8 <__aeabi_dmul>
 800c1aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1ae:	4606      	mov	r6, r0
 800c1b0:	460f      	mov	r7, r1
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	4629      	mov	r1, r5
 800c1b6:	f7f3 ffcf 	bl	8000158 <__aeabi_dsub>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	460b      	mov	r3, r1
 800c1be:	4640      	mov	r0, r8
 800c1c0:	4649      	mov	r1, r9
 800c1c2:	f7f3 ffc9 	bl	8000158 <__aeabi_dsub>
 800c1c6:	a372      	add	r3, pc, #456	; (adr r3, 800c390 <__ieee754_pow+0x9e0>)
 800c1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1cc:	f7f4 f97c 	bl	80004c8 <__aeabi_dmul>
 800c1d0:	a371      	add	r3, pc, #452	; (adr r3, 800c398 <__ieee754_pow+0x9e8>)
 800c1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d6:	4680      	mov	r8, r0
 800c1d8:	4689      	mov	r9, r1
 800c1da:	4620      	mov	r0, r4
 800c1dc:	4629      	mov	r1, r5
 800c1de:	f7f4 f973 	bl	80004c8 <__aeabi_dmul>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	4640      	mov	r0, r8
 800c1e8:	4649      	mov	r1, r9
 800c1ea:	f7f3 ffb7 	bl	800015c <__adddf3>
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	460d      	mov	r5, r1
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	4639      	mov	r1, r7
 800c1fa:	f7f3 ffaf 	bl	800015c <__adddf3>
 800c1fe:	4632      	mov	r2, r6
 800c200:	463b      	mov	r3, r7
 800c202:	4680      	mov	r8, r0
 800c204:	4689      	mov	r9, r1
 800c206:	f7f3 ffa7 	bl	8000158 <__aeabi_dsub>
 800c20a:	4602      	mov	r2, r0
 800c20c:	460b      	mov	r3, r1
 800c20e:	4620      	mov	r0, r4
 800c210:	4629      	mov	r1, r5
 800c212:	f7f3 ffa1 	bl	8000158 <__aeabi_dsub>
 800c216:	4642      	mov	r2, r8
 800c218:	4606      	mov	r6, r0
 800c21a:	460f      	mov	r7, r1
 800c21c:	464b      	mov	r3, r9
 800c21e:	4640      	mov	r0, r8
 800c220:	4649      	mov	r1, r9
 800c222:	f7f4 f951 	bl	80004c8 <__aeabi_dmul>
 800c226:	a35e      	add	r3, pc, #376	; (adr r3, 800c3a0 <__ieee754_pow+0x9f0>)
 800c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22c:	4604      	mov	r4, r0
 800c22e:	460d      	mov	r5, r1
 800c230:	f7f4 f94a 	bl	80004c8 <__aeabi_dmul>
 800c234:	a35c      	add	r3, pc, #368	; (adr r3, 800c3a8 <__ieee754_pow+0x9f8>)
 800c236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23a:	f7f3 ff8d 	bl	8000158 <__aeabi_dsub>
 800c23e:	4622      	mov	r2, r4
 800c240:	462b      	mov	r3, r5
 800c242:	f7f4 f941 	bl	80004c8 <__aeabi_dmul>
 800c246:	a35a      	add	r3, pc, #360	; (adr r3, 800c3b0 <__ieee754_pow+0xa00>)
 800c248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24c:	f7f3 ff86 	bl	800015c <__adddf3>
 800c250:	4622      	mov	r2, r4
 800c252:	462b      	mov	r3, r5
 800c254:	f7f4 f938 	bl	80004c8 <__aeabi_dmul>
 800c258:	a357      	add	r3, pc, #348	; (adr r3, 800c3b8 <__ieee754_pow+0xa08>)
 800c25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25e:	f7f3 ff7b 	bl	8000158 <__aeabi_dsub>
 800c262:	4622      	mov	r2, r4
 800c264:	462b      	mov	r3, r5
 800c266:	f7f4 f92f 	bl	80004c8 <__aeabi_dmul>
 800c26a:	a355      	add	r3, pc, #340	; (adr r3, 800c3c0 <__ieee754_pow+0xa10>)
 800c26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c270:	f7f3 ff74 	bl	800015c <__adddf3>
 800c274:	4622      	mov	r2, r4
 800c276:	462b      	mov	r3, r5
 800c278:	f7f4 f926 	bl	80004c8 <__aeabi_dmul>
 800c27c:	4602      	mov	r2, r0
 800c27e:	460b      	mov	r3, r1
 800c280:	4640      	mov	r0, r8
 800c282:	4649      	mov	r1, r9
 800c284:	f7f3 ff68 	bl	8000158 <__aeabi_dsub>
 800c288:	4604      	mov	r4, r0
 800c28a:	460d      	mov	r5, r1
 800c28c:	4602      	mov	r2, r0
 800c28e:	460b      	mov	r3, r1
 800c290:	4640      	mov	r0, r8
 800c292:	4649      	mov	r1, r9
 800c294:	f7f4 f918 	bl	80004c8 <__aeabi_dmul>
 800c298:	2200      	movs	r2, #0
 800c29a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c29e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	f7f3 ff57 	bl	8000158 <__aeabi_dsub>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2b2:	f7f4 fa33 	bl	800071c <__aeabi_ddiv>
 800c2b6:	4632      	mov	r2, r6
 800c2b8:	4604      	mov	r4, r0
 800c2ba:	460d      	mov	r5, r1
 800c2bc:	463b      	mov	r3, r7
 800c2be:	4640      	mov	r0, r8
 800c2c0:	4649      	mov	r1, r9
 800c2c2:	f7f4 f901 	bl	80004c8 <__aeabi_dmul>
 800c2c6:	4632      	mov	r2, r6
 800c2c8:	463b      	mov	r3, r7
 800c2ca:	f7f3 ff47 	bl	800015c <__adddf3>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	4629      	mov	r1, r5
 800c2d6:	f7f3 ff3f 	bl	8000158 <__aeabi_dsub>
 800c2da:	4642      	mov	r2, r8
 800c2dc:	464b      	mov	r3, r9
 800c2de:	f7f3 ff3b 	bl	8000158 <__aeabi_dsub>
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	4939      	ldr	r1, [pc, #228]	; (800c3d0 <__ieee754_pow+0xa20>)
 800c2ea:	f7f3 ff35 	bl	8000158 <__aeabi_dsub>
 800c2ee:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c2f2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c2f6:	da29      	bge.n	800c34c <__ieee754_pow+0x99c>
 800c2f8:	4652      	mov	r2, sl
 800c2fa:	f001 f889 	bl	800d410 <scalbn>
 800c2fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c302:	f7ff bbfe 	b.w	800bb02 <__ieee754_pow+0x152>
 800c306:	4b33      	ldr	r3, [pc, #204]	; (800c3d4 <__ieee754_pow+0xa24>)
 800c308:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800c30c:	429f      	cmp	r7, r3
 800c30e:	f77f af13 	ble.w	800c138 <__ieee754_pow+0x788>
 800c312:	4b31      	ldr	r3, [pc, #196]	; (800c3d8 <__ieee754_pow+0xa28>)
 800c314:	440b      	add	r3, r1
 800c316:	4303      	orrs	r3, r0
 800c318:	d009      	beq.n	800c32e <__ieee754_pow+0x97e>
 800c31a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c31e:	2200      	movs	r2, #0
 800c320:	2300      	movs	r3, #0
 800c322:	f7f4 fb43 	bl	80009ac <__aeabi_dcmplt>
 800c326:	3800      	subs	r0, #0
 800c328:	bf18      	it	ne
 800c32a:	2001      	movne	r0, #1
 800c32c:	e453      	b.n	800bbd6 <__ieee754_pow+0x226>
 800c32e:	4622      	mov	r2, r4
 800c330:	462b      	mov	r3, r5
 800c332:	f7f3 ff11 	bl	8000158 <__aeabi_dsub>
 800c336:	4642      	mov	r2, r8
 800c338:	464b      	mov	r3, r9
 800c33a:	f7f4 fb4b 	bl	80009d4 <__aeabi_dcmpge>
 800c33e:	2800      	cmp	r0, #0
 800c340:	f43f aefa 	beq.w	800c138 <__ieee754_pow+0x788>
 800c344:	e7e9      	b.n	800c31a <__ieee754_pow+0x96a>
 800c346:	f04f 0a00 	mov.w	sl, #0
 800c34a:	e720      	b.n	800c18e <__ieee754_pow+0x7de>
 800c34c:	4621      	mov	r1, r4
 800c34e:	e7d6      	b.n	800c2fe <__ieee754_pow+0x94e>
 800c350:	f04f 0b00 	mov.w	fp, #0
 800c354:	f8df c078 	ldr.w	ip, [pc, #120]	; 800c3d0 <__ieee754_pow+0xa20>
 800c358:	f7ff bbba 	b.w	800bad0 <__ieee754_pow+0x120>
 800c35c:	f04f 0b00 	mov.w	fp, #0
 800c360:	f04f 0c00 	mov.w	ip, #0
 800c364:	f7ff bbb4 	b.w	800bad0 <__ieee754_pow+0x120>
 800c368:	4640      	mov	r0, r8
 800c36a:	4649      	mov	r1, r9
 800c36c:	f7ff bb3d 	b.w	800b9ea <__ieee754_pow+0x3a>
 800c370:	9200      	str	r2, [sp, #0]
 800c372:	f7ff bb89 	b.w	800ba88 <__ieee754_pow+0xd8>
 800c376:	2300      	movs	r3, #0
 800c378:	f7ff bb73 	b.w	800ba62 <__ieee754_pow+0xb2>
 800c37c:	f3af 8000 	nop.w
 800c380:	652b82fe 	.word	0x652b82fe
 800c384:	3c971547 	.word	0x3c971547
 800c388:	00000000 	.word	0x00000000
 800c38c:	3fe62e43 	.word	0x3fe62e43
 800c390:	fefa39ef 	.word	0xfefa39ef
 800c394:	3fe62e42 	.word	0x3fe62e42
 800c398:	0ca86c39 	.word	0x0ca86c39
 800c39c:	be205c61 	.word	0xbe205c61
 800c3a0:	72bea4d0 	.word	0x72bea4d0
 800c3a4:	3e663769 	.word	0x3e663769
 800c3a8:	c5d26bf1 	.word	0xc5d26bf1
 800c3ac:	3ebbbd41 	.word	0x3ebbbd41
 800c3b0:	af25de2c 	.word	0xaf25de2c
 800c3b4:	3f11566a 	.word	0x3f11566a
 800c3b8:	16bebd93 	.word	0x16bebd93
 800c3bc:	3f66c16c 	.word	0x3f66c16c
 800c3c0:	5555553e 	.word	0x5555553e
 800c3c4:	3fc55555 	.word	0x3fc55555
 800c3c8:	3fe00000 	.word	0x3fe00000
 800c3cc:	000fffff 	.word	0x000fffff
 800c3d0:	3ff00000 	.word	0x3ff00000
 800c3d4:	4090cbff 	.word	0x4090cbff
 800c3d8:	3f6f3400 	.word	0x3f6f3400
 800c3dc:	00000000 	.word	0x00000000

0800c3e0 <__ieee754_rem_pio2>:
 800c3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e4:	4614      	mov	r4, r2
 800c3e6:	4ac4      	ldr	r2, [pc, #784]	; (800c6f8 <__ieee754_rem_pio2+0x318>)
 800c3e8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800c3ec:	b08d      	sub	sp, #52	; 0x34
 800c3ee:	4592      	cmp	sl, r2
 800c3f0:	9104      	str	r1, [sp, #16]
 800c3f2:	dc07      	bgt.n	800c404 <__ieee754_rem_pio2+0x24>
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	e9c4 0100 	strd	r0, r1, [r4]
 800c3fc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c400:	2500      	movs	r5, #0
 800c402:	e024      	b.n	800c44e <__ieee754_rem_pio2+0x6e>
 800c404:	4abd      	ldr	r2, [pc, #756]	; (800c6fc <__ieee754_rem_pio2+0x31c>)
 800c406:	4592      	cmp	sl, r2
 800c408:	dc72      	bgt.n	800c4f0 <__ieee754_rem_pio2+0x110>
 800c40a:	9b04      	ldr	r3, [sp, #16]
 800c40c:	4dbc      	ldr	r5, [pc, #752]	; (800c700 <__ieee754_rem_pio2+0x320>)
 800c40e:	2b00      	cmp	r3, #0
 800c410:	a3ab      	add	r3, pc, #684	; (adr r3, 800c6c0 <__ieee754_rem_pio2+0x2e0>)
 800c412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c416:	dd36      	ble.n	800c486 <__ieee754_rem_pio2+0xa6>
 800c418:	f7f3 fe9e 	bl	8000158 <__aeabi_dsub>
 800c41c:	45aa      	cmp	sl, r5
 800c41e:	4606      	mov	r6, r0
 800c420:	460f      	mov	r7, r1
 800c422:	d018      	beq.n	800c456 <__ieee754_rem_pio2+0x76>
 800c424:	a3a8      	add	r3, pc, #672	; (adr r3, 800c6c8 <__ieee754_rem_pio2+0x2e8>)
 800c426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42a:	f7f3 fe95 	bl	8000158 <__aeabi_dsub>
 800c42e:	4602      	mov	r2, r0
 800c430:	460b      	mov	r3, r1
 800c432:	4630      	mov	r0, r6
 800c434:	e9c4 2300 	strd	r2, r3, [r4]
 800c438:	4639      	mov	r1, r7
 800c43a:	f7f3 fe8d 	bl	8000158 <__aeabi_dsub>
 800c43e:	a3a2      	add	r3, pc, #648	; (adr r3, 800c6c8 <__ieee754_rem_pio2+0x2e8>)
 800c440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c444:	f7f3 fe88 	bl	8000158 <__aeabi_dsub>
 800c448:	2501      	movs	r5, #1
 800c44a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c44e:	4628      	mov	r0, r5
 800c450:	b00d      	add	sp, #52	; 0x34
 800c452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c456:	a39e      	add	r3, pc, #632	; (adr r3, 800c6d0 <__ieee754_rem_pio2+0x2f0>)
 800c458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45c:	f7f3 fe7c 	bl	8000158 <__aeabi_dsub>
 800c460:	a39d      	add	r3, pc, #628	; (adr r3, 800c6d8 <__ieee754_rem_pio2+0x2f8>)
 800c462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c466:	4606      	mov	r6, r0
 800c468:	460f      	mov	r7, r1
 800c46a:	f7f3 fe75 	bl	8000158 <__aeabi_dsub>
 800c46e:	4602      	mov	r2, r0
 800c470:	460b      	mov	r3, r1
 800c472:	4630      	mov	r0, r6
 800c474:	e9c4 2300 	strd	r2, r3, [r4]
 800c478:	4639      	mov	r1, r7
 800c47a:	f7f3 fe6d 	bl	8000158 <__aeabi_dsub>
 800c47e:	a396      	add	r3, pc, #600	; (adr r3, 800c6d8 <__ieee754_rem_pio2+0x2f8>)
 800c480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c484:	e7de      	b.n	800c444 <__ieee754_rem_pio2+0x64>
 800c486:	f7f3 fe69 	bl	800015c <__adddf3>
 800c48a:	45aa      	cmp	sl, r5
 800c48c:	4606      	mov	r6, r0
 800c48e:	460f      	mov	r7, r1
 800c490:	d016      	beq.n	800c4c0 <__ieee754_rem_pio2+0xe0>
 800c492:	a38d      	add	r3, pc, #564	; (adr r3, 800c6c8 <__ieee754_rem_pio2+0x2e8>)
 800c494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c498:	f7f3 fe60 	bl	800015c <__adddf3>
 800c49c:	4602      	mov	r2, r0
 800c49e:	460b      	mov	r3, r1
 800c4a0:	4630      	mov	r0, r6
 800c4a2:	e9c4 2300 	strd	r2, r3, [r4]
 800c4a6:	4639      	mov	r1, r7
 800c4a8:	f7f3 fe56 	bl	8000158 <__aeabi_dsub>
 800c4ac:	a386      	add	r3, pc, #536	; (adr r3, 800c6c8 <__ieee754_rem_pio2+0x2e8>)
 800c4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b2:	f7f3 fe53 	bl	800015c <__adddf3>
 800c4b6:	f04f 35ff 	mov.w	r5, #4294967295
 800c4ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c4be:	e7c6      	b.n	800c44e <__ieee754_rem_pio2+0x6e>
 800c4c0:	a383      	add	r3, pc, #524	; (adr r3, 800c6d0 <__ieee754_rem_pio2+0x2f0>)
 800c4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c6:	f7f3 fe49 	bl	800015c <__adddf3>
 800c4ca:	a383      	add	r3, pc, #524	; (adr r3, 800c6d8 <__ieee754_rem_pio2+0x2f8>)
 800c4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d0:	4606      	mov	r6, r0
 800c4d2:	460f      	mov	r7, r1
 800c4d4:	f7f3 fe42 	bl	800015c <__adddf3>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	460b      	mov	r3, r1
 800c4dc:	4630      	mov	r0, r6
 800c4de:	e9c4 2300 	strd	r2, r3, [r4]
 800c4e2:	4639      	mov	r1, r7
 800c4e4:	f7f3 fe38 	bl	8000158 <__aeabi_dsub>
 800c4e8:	a37b      	add	r3, pc, #492	; (adr r3, 800c6d8 <__ieee754_rem_pio2+0x2f8>)
 800c4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ee:	e7e0      	b.n	800c4b2 <__ieee754_rem_pio2+0xd2>
 800c4f0:	4a84      	ldr	r2, [pc, #528]	; (800c704 <__ieee754_rem_pio2+0x324>)
 800c4f2:	4592      	cmp	sl, r2
 800c4f4:	f300 80d5 	bgt.w	800c6a2 <__ieee754_rem_pio2+0x2c2>
 800c4f8:	f7fe ff0e 	bl	800b318 <fabs>
 800c4fc:	a378      	add	r3, pc, #480	; (adr r3, 800c6e0 <__ieee754_rem_pio2+0x300>)
 800c4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c502:	4606      	mov	r6, r0
 800c504:	460f      	mov	r7, r1
 800c506:	f7f3 ffdf 	bl	80004c8 <__aeabi_dmul>
 800c50a:	2200      	movs	r2, #0
 800c50c:	4b7e      	ldr	r3, [pc, #504]	; (800c708 <__ieee754_rem_pio2+0x328>)
 800c50e:	f7f3 fe25 	bl	800015c <__adddf3>
 800c512:	f7f4 fa89 	bl	8000a28 <__aeabi_d2iz>
 800c516:	4605      	mov	r5, r0
 800c518:	f7f3 ff6c 	bl	80003f4 <__aeabi_i2d>
 800c51c:	4602      	mov	r2, r0
 800c51e:	460b      	mov	r3, r1
 800c520:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c524:	a366      	add	r3, pc, #408	; (adr r3, 800c6c0 <__ieee754_rem_pio2+0x2e0>)
 800c526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52a:	f7f3 ffcd 	bl	80004c8 <__aeabi_dmul>
 800c52e:	4602      	mov	r2, r0
 800c530:	460b      	mov	r3, r1
 800c532:	4630      	mov	r0, r6
 800c534:	4639      	mov	r1, r7
 800c536:	f7f3 fe0f 	bl	8000158 <__aeabi_dsub>
 800c53a:	a363      	add	r3, pc, #396	; (adr r3, 800c6c8 <__ieee754_rem_pio2+0x2e8>)
 800c53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c540:	4680      	mov	r8, r0
 800c542:	4689      	mov	r9, r1
 800c544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c548:	f7f3 ffbe 	bl	80004c8 <__aeabi_dmul>
 800c54c:	2d1f      	cmp	r5, #31
 800c54e:	4606      	mov	r6, r0
 800c550:	460f      	mov	r7, r1
 800c552:	dc0e      	bgt.n	800c572 <__ieee754_rem_pio2+0x192>
 800c554:	4b6d      	ldr	r3, [pc, #436]	; (800c70c <__ieee754_rem_pio2+0x32c>)
 800c556:	1e6a      	subs	r2, r5, #1
 800c558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c55c:	4553      	cmp	r3, sl
 800c55e:	d008      	beq.n	800c572 <__ieee754_rem_pio2+0x192>
 800c560:	4632      	mov	r2, r6
 800c562:	463b      	mov	r3, r7
 800c564:	4640      	mov	r0, r8
 800c566:	4649      	mov	r1, r9
 800c568:	f7f3 fdf6 	bl	8000158 <__aeabi_dsub>
 800c56c:	e9c4 0100 	strd	r0, r1, [r4]
 800c570:	e013      	b.n	800c59a <__ieee754_rem_pio2+0x1ba>
 800c572:	463b      	mov	r3, r7
 800c574:	4632      	mov	r2, r6
 800c576:	4640      	mov	r0, r8
 800c578:	4649      	mov	r1, r9
 800c57a:	f7f3 fded 	bl	8000158 <__aeabi_dsub>
 800c57e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800c582:	9305      	str	r3, [sp, #20]
 800c584:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c588:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800c58c:	f1ba 0f10 	cmp.w	sl, #16
 800c590:	dc1f      	bgt.n	800c5d2 <__ieee754_rem_pio2+0x1f2>
 800c592:	4602      	mov	r2, r0
 800c594:	460b      	mov	r3, r1
 800c596:	e9c4 2300 	strd	r2, r3, [r4]
 800c59a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800c59e:	4640      	mov	r0, r8
 800c5a0:	4653      	mov	r3, sl
 800c5a2:	4649      	mov	r1, r9
 800c5a4:	f7f3 fdd8 	bl	8000158 <__aeabi_dsub>
 800c5a8:	4632      	mov	r2, r6
 800c5aa:	463b      	mov	r3, r7
 800c5ac:	f7f3 fdd4 	bl	8000158 <__aeabi_dsub>
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c5b6:	9904      	ldr	r1, [sp, #16]
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	2900      	cmp	r1, #0
 800c5bc:	f6bf af47 	bge.w	800c44e <__ieee754_rem_pio2+0x6e>
 800c5c0:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800c5c4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c5c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c5cc:	60e3      	str	r3, [r4, #12]
 800c5ce:	426d      	negs	r5, r5
 800c5d0:	e73d      	b.n	800c44e <__ieee754_rem_pio2+0x6e>
 800c5d2:	a33f      	add	r3, pc, #252	; (adr r3, 800c6d0 <__ieee754_rem_pio2+0x2f0>)
 800c5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5dc:	f7f3 ff74 	bl	80004c8 <__aeabi_dmul>
 800c5e0:	4606      	mov	r6, r0
 800c5e2:	460f      	mov	r7, r1
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	4640      	mov	r0, r8
 800c5ea:	4649      	mov	r1, r9
 800c5ec:	f7f3 fdb4 	bl	8000158 <__aeabi_dsub>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	4682      	mov	sl, r0
 800c5f6:	468b      	mov	fp, r1
 800c5f8:	4640      	mov	r0, r8
 800c5fa:	4649      	mov	r1, r9
 800c5fc:	f7f3 fdac 	bl	8000158 <__aeabi_dsub>
 800c600:	4632      	mov	r2, r6
 800c602:	463b      	mov	r3, r7
 800c604:	f7f3 fda8 	bl	8000158 <__aeabi_dsub>
 800c608:	a333      	add	r3, pc, #204	; (adr r3, 800c6d8 <__ieee754_rem_pio2+0x2f8>)
 800c60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60e:	4606      	mov	r6, r0
 800c610:	460f      	mov	r7, r1
 800c612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c616:	f7f3 ff57 	bl	80004c8 <__aeabi_dmul>
 800c61a:	4632      	mov	r2, r6
 800c61c:	463b      	mov	r3, r7
 800c61e:	f7f3 fd9b 	bl	8000158 <__aeabi_dsub>
 800c622:	4602      	mov	r2, r0
 800c624:	460b      	mov	r3, r1
 800c626:	4606      	mov	r6, r0
 800c628:	460f      	mov	r7, r1
 800c62a:	4650      	mov	r0, sl
 800c62c:	4659      	mov	r1, fp
 800c62e:	f7f3 fd93 	bl	8000158 <__aeabi_dsub>
 800c632:	9a05      	ldr	r2, [sp, #20]
 800c634:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c638:	1ad3      	subs	r3, r2, r3
 800c63a:	2b31      	cmp	r3, #49	; 0x31
 800c63c:	dc06      	bgt.n	800c64c <__ieee754_rem_pio2+0x26c>
 800c63e:	4602      	mov	r2, r0
 800c640:	460b      	mov	r3, r1
 800c642:	46d0      	mov	r8, sl
 800c644:	46d9      	mov	r9, fp
 800c646:	e9c4 2300 	strd	r2, r3, [r4]
 800c64a:	e7a6      	b.n	800c59a <__ieee754_rem_pio2+0x1ba>
 800c64c:	a326      	add	r3, pc, #152	; (adr r3, 800c6e8 <__ieee754_rem_pio2+0x308>)
 800c64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c656:	f7f3 ff37 	bl	80004c8 <__aeabi_dmul>
 800c65a:	4606      	mov	r6, r0
 800c65c:	460f      	mov	r7, r1
 800c65e:	4602      	mov	r2, r0
 800c660:	460b      	mov	r3, r1
 800c662:	4650      	mov	r0, sl
 800c664:	4659      	mov	r1, fp
 800c666:	f7f3 fd77 	bl	8000158 <__aeabi_dsub>
 800c66a:	4602      	mov	r2, r0
 800c66c:	460b      	mov	r3, r1
 800c66e:	4680      	mov	r8, r0
 800c670:	4689      	mov	r9, r1
 800c672:	4650      	mov	r0, sl
 800c674:	4659      	mov	r1, fp
 800c676:	f7f3 fd6f 	bl	8000158 <__aeabi_dsub>
 800c67a:	4632      	mov	r2, r6
 800c67c:	463b      	mov	r3, r7
 800c67e:	f7f3 fd6b 	bl	8000158 <__aeabi_dsub>
 800c682:	a31b      	add	r3, pc, #108	; (adr r3, 800c6f0 <__ieee754_rem_pio2+0x310>)
 800c684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c688:	4606      	mov	r6, r0
 800c68a:	460f      	mov	r7, r1
 800c68c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c690:	f7f3 ff1a 	bl	80004c8 <__aeabi_dmul>
 800c694:	4632      	mov	r2, r6
 800c696:	463b      	mov	r3, r7
 800c698:	f7f3 fd5e 	bl	8000158 <__aeabi_dsub>
 800c69c:	4606      	mov	r6, r0
 800c69e:	460f      	mov	r7, r1
 800c6a0:	e75e      	b.n	800c560 <__ieee754_rem_pio2+0x180>
 800c6a2:	4a1b      	ldr	r2, [pc, #108]	; (800c710 <__ieee754_rem_pio2+0x330>)
 800c6a4:	4592      	cmp	sl, r2
 800c6a6:	dd35      	ble.n	800c714 <__ieee754_rem_pio2+0x334>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	460b      	mov	r3, r1
 800c6ac:	f7f3 fd54 	bl	8000158 <__aeabi_dsub>
 800c6b0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c6b4:	e9c4 0100 	strd	r0, r1, [r4]
 800c6b8:	e6a2      	b.n	800c400 <__ieee754_rem_pio2+0x20>
 800c6ba:	bf00      	nop
 800c6bc:	f3af 8000 	nop.w
 800c6c0:	54400000 	.word	0x54400000
 800c6c4:	3ff921fb 	.word	0x3ff921fb
 800c6c8:	1a626331 	.word	0x1a626331
 800c6cc:	3dd0b461 	.word	0x3dd0b461
 800c6d0:	1a600000 	.word	0x1a600000
 800c6d4:	3dd0b461 	.word	0x3dd0b461
 800c6d8:	2e037073 	.word	0x2e037073
 800c6dc:	3ba3198a 	.word	0x3ba3198a
 800c6e0:	6dc9c883 	.word	0x6dc9c883
 800c6e4:	3fe45f30 	.word	0x3fe45f30
 800c6e8:	2e000000 	.word	0x2e000000
 800c6ec:	3ba3198a 	.word	0x3ba3198a
 800c6f0:	252049c1 	.word	0x252049c1
 800c6f4:	397b839a 	.word	0x397b839a
 800c6f8:	3fe921fb 	.word	0x3fe921fb
 800c6fc:	4002d97b 	.word	0x4002d97b
 800c700:	3ff921fb 	.word	0x3ff921fb
 800c704:	413921fb 	.word	0x413921fb
 800c708:	3fe00000 	.word	0x3fe00000
 800c70c:	0800d610 	.word	0x0800d610
 800c710:	7fefffff 	.word	0x7fefffff
 800c714:	ea4f 552a 	mov.w	r5, sl, asr #20
 800c718:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c71c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800c720:	460f      	mov	r7, r1
 800c722:	4606      	mov	r6, r0
 800c724:	f7f4 f980 	bl	8000a28 <__aeabi_d2iz>
 800c728:	f7f3 fe64 	bl	80003f4 <__aeabi_i2d>
 800c72c:	4602      	mov	r2, r0
 800c72e:	460b      	mov	r3, r1
 800c730:	4630      	mov	r0, r6
 800c732:	4639      	mov	r1, r7
 800c734:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c738:	f7f3 fd0e 	bl	8000158 <__aeabi_dsub>
 800c73c:	2200      	movs	r2, #0
 800c73e:	4b22      	ldr	r3, [pc, #136]	; (800c7c8 <__ieee754_rem_pio2+0x3e8>)
 800c740:	f7f3 fec2 	bl	80004c8 <__aeabi_dmul>
 800c744:	460f      	mov	r7, r1
 800c746:	4606      	mov	r6, r0
 800c748:	f7f4 f96e 	bl	8000a28 <__aeabi_d2iz>
 800c74c:	f7f3 fe52 	bl	80003f4 <__aeabi_i2d>
 800c750:	4602      	mov	r2, r0
 800c752:	460b      	mov	r3, r1
 800c754:	4630      	mov	r0, r6
 800c756:	4639      	mov	r1, r7
 800c758:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c75c:	f7f3 fcfc 	bl	8000158 <__aeabi_dsub>
 800c760:	2200      	movs	r2, #0
 800c762:	4b19      	ldr	r3, [pc, #100]	; (800c7c8 <__ieee754_rem_pio2+0x3e8>)
 800c764:	f7f3 feb0 	bl	80004c8 <__aeabi_dmul>
 800c768:	f04f 0803 	mov.w	r8, #3
 800c76c:	2600      	movs	r6, #0
 800c76e:	2700      	movs	r7, #0
 800c770:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c774:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800c778:	4632      	mov	r2, r6
 800c77a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800c77e:	463b      	mov	r3, r7
 800c780:	46c2      	mov	sl, r8
 800c782:	f108 38ff 	add.w	r8, r8, #4294967295
 800c786:	f7f4 f907 	bl	8000998 <__aeabi_dcmpeq>
 800c78a:	2800      	cmp	r0, #0
 800c78c:	d1f4      	bne.n	800c778 <__ieee754_rem_pio2+0x398>
 800c78e:	4b0f      	ldr	r3, [pc, #60]	; (800c7cc <__ieee754_rem_pio2+0x3ec>)
 800c790:	462a      	mov	r2, r5
 800c792:	9301      	str	r3, [sp, #4]
 800c794:	2302      	movs	r3, #2
 800c796:	4621      	mov	r1, r4
 800c798:	9300      	str	r3, [sp, #0]
 800c79a:	a806      	add	r0, sp, #24
 800c79c:	4653      	mov	r3, sl
 800c79e:	f000 f985 	bl	800caac <__kernel_rem_pio2>
 800c7a2:	9b04      	ldr	r3, [sp, #16]
 800c7a4:	4605      	mov	r5, r0
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	f6bf ae51 	bge.w	800c44e <__ieee754_rem_pio2+0x6e>
 800c7ac:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c7b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7b4:	e9c4 2300 	strd	r2, r3, [r4]
 800c7b8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c7bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7c0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c7c4:	e703      	b.n	800c5ce <__ieee754_rem_pio2+0x1ee>
 800c7c6:	bf00      	nop
 800c7c8:	41700000 	.word	0x41700000
 800c7cc:	0800d690 	.word	0x0800d690

0800c7d0 <__ieee754_sqrt>:
 800c7d0:	f8df c158 	ldr.w	ip, [pc, #344]	; 800c92c <__ieee754_sqrt+0x15c>
 800c7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d8:	ea3c 0c01 	bics.w	ip, ip, r1
 800c7dc:	4606      	mov	r6, r0
 800c7de:	460d      	mov	r5, r1
 800c7e0:	460c      	mov	r4, r1
 800c7e2:	460a      	mov	r2, r1
 800c7e4:	4607      	mov	r7, r0
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	d10f      	bne.n	800c80a <__ieee754_sqrt+0x3a>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	f7f3 fe6b 	bl	80004c8 <__aeabi_dmul>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	f7f3 fcaf 	bl	800015c <__adddf3>
 800c7fe:	4606      	mov	r6, r0
 800c800:	460d      	mov	r5, r1
 800c802:	4630      	mov	r0, r6
 800c804:	4629      	mov	r1, r5
 800c806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c80a:	2900      	cmp	r1, #0
 800c80c:	dc0e      	bgt.n	800c82c <__ieee754_sqrt+0x5c>
 800c80e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800c812:	ea5c 0707 	orrs.w	r7, ip, r7
 800c816:	d0f4      	beq.n	800c802 <__ieee754_sqrt+0x32>
 800c818:	b141      	cbz	r1, 800c82c <__ieee754_sqrt+0x5c>
 800c81a:	4602      	mov	r2, r0
 800c81c:	460b      	mov	r3, r1
 800c81e:	f7f3 fc9b 	bl	8000158 <__aeabi_dsub>
 800c822:	4602      	mov	r2, r0
 800c824:	460b      	mov	r3, r1
 800c826:	f7f3 ff79 	bl	800071c <__aeabi_ddiv>
 800c82a:	e7e8      	b.n	800c7fe <__ieee754_sqrt+0x2e>
 800c82c:	1521      	asrs	r1, r4, #20
 800c82e:	d075      	beq.n	800c91c <__ieee754_sqrt+0x14c>
 800c830:	07cc      	lsls	r4, r1, #31
 800c832:	f04f 0400 	mov.w	r4, #0
 800c836:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c83a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800c83e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c842:	bf5e      	ittt	pl
 800c844:	0fd9      	lsrpl	r1, r3, #31
 800c846:	005b      	lslpl	r3, r3, #1
 800c848:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800c84c:	0fd9      	lsrs	r1, r3, #31
 800c84e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c852:	2516      	movs	r5, #22
 800c854:	4620      	mov	r0, r4
 800c856:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c85a:	107f      	asrs	r7, r7, #1
 800c85c:	005b      	lsls	r3, r3, #1
 800c85e:	1846      	adds	r6, r0, r1
 800c860:	4296      	cmp	r6, r2
 800c862:	bfde      	ittt	le
 800c864:	1b92      	suble	r2, r2, r6
 800c866:	1870      	addle	r0, r6, r1
 800c868:	1864      	addle	r4, r4, r1
 800c86a:	0052      	lsls	r2, r2, #1
 800c86c:	3d01      	subs	r5, #1
 800c86e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c872:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c876:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c87a:	d1f0      	bne.n	800c85e <__ieee754_sqrt+0x8e>
 800c87c:	4629      	mov	r1, r5
 800c87e:	f04f 0e20 	mov.w	lr, #32
 800c882:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c886:	4282      	cmp	r2, r0
 800c888:	eb06 0c05 	add.w	ip, r6, r5
 800c88c:	dc02      	bgt.n	800c894 <__ieee754_sqrt+0xc4>
 800c88e:	d113      	bne.n	800c8b8 <__ieee754_sqrt+0xe8>
 800c890:	459c      	cmp	ip, r3
 800c892:	d811      	bhi.n	800c8b8 <__ieee754_sqrt+0xe8>
 800c894:	f1bc 0f00 	cmp.w	ip, #0
 800c898:	eb0c 0506 	add.w	r5, ip, r6
 800c89c:	da43      	bge.n	800c926 <__ieee754_sqrt+0x156>
 800c89e:	2d00      	cmp	r5, #0
 800c8a0:	db41      	blt.n	800c926 <__ieee754_sqrt+0x156>
 800c8a2:	f100 0801 	add.w	r8, r0, #1
 800c8a6:	1a12      	subs	r2, r2, r0
 800c8a8:	4640      	mov	r0, r8
 800c8aa:	459c      	cmp	ip, r3
 800c8ac:	bf88      	it	hi
 800c8ae:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c8b2:	eba3 030c 	sub.w	r3, r3, ip
 800c8b6:	4431      	add	r1, r6
 800c8b8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c8bc:	f1be 0e01 	subs.w	lr, lr, #1
 800c8c0:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800c8c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c8c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c8cc:	d1db      	bne.n	800c886 <__ieee754_sqrt+0xb6>
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	d006      	beq.n	800c8e0 <__ieee754_sqrt+0x110>
 800c8d2:	1c48      	adds	r0, r1, #1
 800c8d4:	bf0b      	itete	eq
 800c8d6:	4671      	moveq	r1, lr
 800c8d8:	3101      	addne	r1, #1
 800c8da:	3401      	addeq	r4, #1
 800c8dc:	f021 0101 	bicne.w	r1, r1, #1
 800c8e0:	1063      	asrs	r3, r4, #1
 800c8e2:	0849      	lsrs	r1, r1, #1
 800c8e4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c8e8:	07e2      	lsls	r2, r4, #31
 800c8ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c8ee:	bf48      	it	mi
 800c8f0:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c8f4:	460e      	mov	r6, r1
 800c8f6:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c8fa:	e782      	b.n	800c802 <__ieee754_sqrt+0x32>
 800c8fc:	0ada      	lsrs	r2, r3, #11
 800c8fe:	3815      	subs	r0, #21
 800c900:	055b      	lsls	r3, r3, #21
 800c902:	2a00      	cmp	r2, #0
 800c904:	d0fa      	beq.n	800c8fc <__ieee754_sqrt+0x12c>
 800c906:	02d5      	lsls	r5, r2, #11
 800c908:	d50a      	bpl.n	800c920 <__ieee754_sqrt+0x150>
 800c90a:	f1c1 0420 	rsb	r4, r1, #32
 800c90e:	fa23 f404 	lsr.w	r4, r3, r4
 800c912:	1e4d      	subs	r5, r1, #1
 800c914:	408b      	lsls	r3, r1
 800c916:	4322      	orrs	r2, r4
 800c918:	1b41      	subs	r1, r0, r5
 800c91a:	e789      	b.n	800c830 <__ieee754_sqrt+0x60>
 800c91c:	4608      	mov	r0, r1
 800c91e:	e7f0      	b.n	800c902 <__ieee754_sqrt+0x132>
 800c920:	0052      	lsls	r2, r2, #1
 800c922:	3101      	adds	r1, #1
 800c924:	e7ef      	b.n	800c906 <__ieee754_sqrt+0x136>
 800c926:	4680      	mov	r8, r0
 800c928:	e7bd      	b.n	800c8a6 <__ieee754_sqrt+0xd6>
 800c92a:	bf00      	nop
 800c92c:	7ff00000 	.word	0x7ff00000

0800c930 <__kernel_cos>:
 800c930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c934:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c938:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c93c:	4680      	mov	r8, r0
 800c93e:	460f      	mov	r7, r1
 800c940:	e9cd 2300 	strd	r2, r3, [sp]
 800c944:	da04      	bge.n	800c950 <__kernel_cos+0x20>
 800c946:	f7f4 f86f 	bl	8000a28 <__aeabi_d2iz>
 800c94a:	2800      	cmp	r0, #0
 800c94c:	f000 8086 	beq.w	800ca5c <__kernel_cos+0x12c>
 800c950:	4642      	mov	r2, r8
 800c952:	463b      	mov	r3, r7
 800c954:	4640      	mov	r0, r8
 800c956:	4639      	mov	r1, r7
 800c958:	f7f3 fdb6 	bl	80004c8 <__aeabi_dmul>
 800c95c:	2200      	movs	r2, #0
 800c95e:	4b4e      	ldr	r3, [pc, #312]	; (800ca98 <__kernel_cos+0x168>)
 800c960:	4604      	mov	r4, r0
 800c962:	460d      	mov	r5, r1
 800c964:	f7f3 fdb0 	bl	80004c8 <__aeabi_dmul>
 800c968:	a33f      	add	r3, pc, #252	; (adr r3, 800ca68 <__kernel_cos+0x138>)
 800c96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96e:	4682      	mov	sl, r0
 800c970:	468b      	mov	fp, r1
 800c972:	4620      	mov	r0, r4
 800c974:	4629      	mov	r1, r5
 800c976:	f7f3 fda7 	bl	80004c8 <__aeabi_dmul>
 800c97a:	a33d      	add	r3, pc, #244	; (adr r3, 800ca70 <__kernel_cos+0x140>)
 800c97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c980:	f7f3 fbec 	bl	800015c <__adddf3>
 800c984:	4622      	mov	r2, r4
 800c986:	462b      	mov	r3, r5
 800c988:	f7f3 fd9e 	bl	80004c8 <__aeabi_dmul>
 800c98c:	a33a      	add	r3, pc, #232	; (adr r3, 800ca78 <__kernel_cos+0x148>)
 800c98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c992:	f7f3 fbe1 	bl	8000158 <__aeabi_dsub>
 800c996:	4622      	mov	r2, r4
 800c998:	462b      	mov	r3, r5
 800c99a:	f7f3 fd95 	bl	80004c8 <__aeabi_dmul>
 800c99e:	a338      	add	r3, pc, #224	; (adr r3, 800ca80 <__kernel_cos+0x150>)
 800c9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a4:	f7f3 fbda 	bl	800015c <__adddf3>
 800c9a8:	4622      	mov	r2, r4
 800c9aa:	462b      	mov	r3, r5
 800c9ac:	f7f3 fd8c 	bl	80004c8 <__aeabi_dmul>
 800c9b0:	a335      	add	r3, pc, #212	; (adr r3, 800ca88 <__kernel_cos+0x158>)
 800c9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b6:	f7f3 fbcf 	bl	8000158 <__aeabi_dsub>
 800c9ba:	4622      	mov	r2, r4
 800c9bc:	462b      	mov	r3, r5
 800c9be:	f7f3 fd83 	bl	80004c8 <__aeabi_dmul>
 800c9c2:	a333      	add	r3, pc, #204	; (adr r3, 800ca90 <__kernel_cos+0x160>)
 800c9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c8:	f7f3 fbc8 	bl	800015c <__adddf3>
 800c9cc:	4622      	mov	r2, r4
 800c9ce:	462b      	mov	r3, r5
 800c9d0:	f7f3 fd7a 	bl	80004c8 <__aeabi_dmul>
 800c9d4:	4622      	mov	r2, r4
 800c9d6:	462b      	mov	r3, r5
 800c9d8:	f7f3 fd76 	bl	80004c8 <__aeabi_dmul>
 800c9dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9e0:	4604      	mov	r4, r0
 800c9e2:	460d      	mov	r5, r1
 800c9e4:	4640      	mov	r0, r8
 800c9e6:	4639      	mov	r1, r7
 800c9e8:	f7f3 fd6e 	bl	80004c8 <__aeabi_dmul>
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	4629      	mov	r1, r5
 800c9f2:	4620      	mov	r0, r4
 800c9f4:	f7f3 fbb0 	bl	8000158 <__aeabi_dsub>
 800c9f8:	4b28      	ldr	r3, [pc, #160]	; (800ca9c <__kernel_cos+0x16c>)
 800c9fa:	4680      	mov	r8, r0
 800c9fc:	429e      	cmp	r6, r3
 800c9fe:	4689      	mov	r9, r1
 800ca00:	dc0e      	bgt.n	800ca20 <__kernel_cos+0xf0>
 800ca02:	4602      	mov	r2, r0
 800ca04:	460b      	mov	r3, r1
 800ca06:	4650      	mov	r0, sl
 800ca08:	4659      	mov	r1, fp
 800ca0a:	f7f3 fba5 	bl	8000158 <__aeabi_dsub>
 800ca0e:	4602      	mov	r2, r0
 800ca10:	2000      	movs	r0, #0
 800ca12:	460b      	mov	r3, r1
 800ca14:	4922      	ldr	r1, [pc, #136]	; (800caa0 <__kernel_cos+0x170>)
 800ca16:	f7f3 fb9f 	bl	8000158 <__aeabi_dsub>
 800ca1a:	b003      	add	sp, #12
 800ca1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca20:	2400      	movs	r4, #0
 800ca22:	4b20      	ldr	r3, [pc, #128]	; (800caa4 <__kernel_cos+0x174>)
 800ca24:	4622      	mov	r2, r4
 800ca26:	429e      	cmp	r6, r3
 800ca28:	bfcc      	ite	gt
 800ca2a:	4d1f      	ldrgt	r5, [pc, #124]	; (800caa8 <__kernel_cos+0x178>)
 800ca2c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800ca30:	462b      	mov	r3, r5
 800ca32:	2000      	movs	r0, #0
 800ca34:	491a      	ldr	r1, [pc, #104]	; (800caa0 <__kernel_cos+0x170>)
 800ca36:	f7f3 fb8f 	bl	8000158 <__aeabi_dsub>
 800ca3a:	4622      	mov	r2, r4
 800ca3c:	4606      	mov	r6, r0
 800ca3e:	460f      	mov	r7, r1
 800ca40:	462b      	mov	r3, r5
 800ca42:	4650      	mov	r0, sl
 800ca44:	4659      	mov	r1, fp
 800ca46:	f7f3 fb87 	bl	8000158 <__aeabi_dsub>
 800ca4a:	4642      	mov	r2, r8
 800ca4c:	464b      	mov	r3, r9
 800ca4e:	f7f3 fb83 	bl	8000158 <__aeabi_dsub>
 800ca52:	4602      	mov	r2, r0
 800ca54:	460b      	mov	r3, r1
 800ca56:	4630      	mov	r0, r6
 800ca58:	4639      	mov	r1, r7
 800ca5a:	e7dc      	b.n	800ca16 <__kernel_cos+0xe6>
 800ca5c:	2000      	movs	r0, #0
 800ca5e:	4910      	ldr	r1, [pc, #64]	; (800caa0 <__kernel_cos+0x170>)
 800ca60:	e7db      	b.n	800ca1a <__kernel_cos+0xea>
 800ca62:	bf00      	nop
 800ca64:	f3af 8000 	nop.w
 800ca68:	be8838d4 	.word	0xbe8838d4
 800ca6c:	bda8fae9 	.word	0xbda8fae9
 800ca70:	bdb4b1c4 	.word	0xbdb4b1c4
 800ca74:	3e21ee9e 	.word	0x3e21ee9e
 800ca78:	809c52ad 	.word	0x809c52ad
 800ca7c:	3e927e4f 	.word	0x3e927e4f
 800ca80:	19cb1590 	.word	0x19cb1590
 800ca84:	3efa01a0 	.word	0x3efa01a0
 800ca88:	16c15177 	.word	0x16c15177
 800ca8c:	3f56c16c 	.word	0x3f56c16c
 800ca90:	5555554c 	.word	0x5555554c
 800ca94:	3fa55555 	.word	0x3fa55555
 800ca98:	3fe00000 	.word	0x3fe00000
 800ca9c:	3fd33332 	.word	0x3fd33332
 800caa0:	3ff00000 	.word	0x3ff00000
 800caa4:	3fe90000 	.word	0x3fe90000
 800caa8:	3fd20000 	.word	0x3fd20000

0800caac <__kernel_rem_pio2>:
 800caac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800cab4:	9308      	str	r3, [sp, #32]
 800cab6:	9106      	str	r1, [sp, #24]
 800cab8:	4bb6      	ldr	r3, [pc, #728]	; (800cd94 <__kernel_rem_pio2+0x2e8>)
 800caba:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800cabc:	f112 0f14 	cmn.w	r2, #20
 800cac0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cac4:	bfa8      	it	ge
 800cac6:	1ed4      	subge	r4, r2, #3
 800cac8:	9302      	str	r3, [sp, #8]
 800caca:	9b08      	ldr	r3, [sp, #32]
 800cacc:	bfb8      	it	lt
 800cace:	2400      	movlt	r4, #0
 800cad0:	f103 33ff 	add.w	r3, r3, #4294967295
 800cad4:	9307      	str	r3, [sp, #28]
 800cad6:	bfa4      	itt	ge
 800cad8:	2318      	movge	r3, #24
 800cada:	fb94 f4f3 	sdivge	r4, r4, r3
 800cade:	f06f 0317 	mvn.w	r3, #23
 800cae2:	fb04 3303 	mla	r3, r4, r3, r3
 800cae6:	eb03 0b02 	add.w	fp, r3, r2
 800caea:	9a07      	ldr	r2, [sp, #28]
 800caec:	9b02      	ldr	r3, [sp, #8]
 800caee:	1aa7      	subs	r7, r4, r2
 800caf0:	eb03 0802 	add.w	r8, r3, r2
 800caf4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800caf6:	2500      	movs	r5, #0
 800caf8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cafc:	2200      	movs	r2, #0
 800cafe:	2300      	movs	r3, #0
 800cb00:	9009      	str	r0, [sp, #36]	; 0x24
 800cb02:	ae20      	add	r6, sp, #128	; 0x80
 800cb04:	4545      	cmp	r5, r8
 800cb06:	dd14      	ble.n	800cb32 <__kernel_rem_pio2+0x86>
 800cb08:	f04f 0800 	mov.w	r8, #0
 800cb0c:	9a08      	ldr	r2, [sp, #32]
 800cb0e:	ab20      	add	r3, sp, #128	; 0x80
 800cb10:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800cb14:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800cb18:	9b02      	ldr	r3, [sp, #8]
 800cb1a:	4598      	cmp	r8, r3
 800cb1c:	dc35      	bgt.n	800cb8a <__kernel_rem_pio2+0xde>
 800cb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb20:	2200      	movs	r2, #0
 800cb22:	f1a3 0908 	sub.w	r9, r3, #8
 800cb26:	2300      	movs	r3, #0
 800cb28:	462f      	mov	r7, r5
 800cb2a:	2600      	movs	r6, #0
 800cb2c:	e9cd 2300 	strd	r2, r3, [sp]
 800cb30:	e01f      	b.n	800cb72 <__kernel_rem_pio2+0xc6>
 800cb32:	42ef      	cmn	r7, r5
 800cb34:	d40b      	bmi.n	800cb4e <__kernel_rem_pio2+0xa2>
 800cb36:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cb3a:	e9cd 2300 	strd	r2, r3, [sp]
 800cb3e:	f7f3 fc59 	bl	80003f4 <__aeabi_i2d>
 800cb42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb46:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cb4a:	3501      	adds	r5, #1
 800cb4c:	e7da      	b.n	800cb04 <__kernel_rem_pio2+0x58>
 800cb4e:	4610      	mov	r0, r2
 800cb50:	4619      	mov	r1, r3
 800cb52:	e7f8      	b.n	800cb46 <__kernel_rem_pio2+0x9a>
 800cb54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb58:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800cb5c:	f7f3 fcb4 	bl	80004c8 <__aeabi_dmul>
 800cb60:	4602      	mov	r2, r0
 800cb62:	460b      	mov	r3, r1
 800cb64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb68:	f7f3 faf8 	bl	800015c <__adddf3>
 800cb6c:	e9cd 0100 	strd	r0, r1, [sp]
 800cb70:	3601      	adds	r6, #1
 800cb72:	9b07      	ldr	r3, [sp, #28]
 800cb74:	3f08      	subs	r7, #8
 800cb76:	429e      	cmp	r6, r3
 800cb78:	ddec      	ble.n	800cb54 <__kernel_rem_pio2+0xa8>
 800cb7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb7e:	f108 0801 	add.w	r8, r8, #1
 800cb82:	e8ea 2302 	strd	r2, r3, [sl], #8
 800cb86:	3508      	adds	r5, #8
 800cb88:	e7c6      	b.n	800cb18 <__kernel_rem_pio2+0x6c>
 800cb8a:	9b02      	ldr	r3, [sp, #8]
 800cb8c:	aa0c      	add	r2, sp, #48	; 0x30
 800cb8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb92:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb94:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800cb96:	9e02      	ldr	r6, [sp, #8]
 800cb98:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cb9c:	930a      	str	r3, [sp, #40]	; 0x28
 800cb9e:	ab98      	add	r3, sp, #608	; 0x260
 800cba0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cba4:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800cba8:	ab70      	add	r3, sp, #448	; 0x1c0
 800cbaa:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800cbae:	46d0      	mov	r8, sl
 800cbb0:	46b1      	mov	r9, r6
 800cbb2:	af0c      	add	r7, sp, #48	; 0x30
 800cbb4:	9700      	str	r7, [sp, #0]
 800cbb6:	f1b9 0f00 	cmp.w	r9, #0
 800cbba:	f1a8 0808 	sub.w	r8, r8, #8
 800cbbe:	dc71      	bgt.n	800cca4 <__kernel_rem_pio2+0x1f8>
 800cbc0:	465a      	mov	r2, fp
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	4629      	mov	r1, r5
 800cbc6:	f000 fc23 	bl	800d410 <scalbn>
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cbd0:	4604      	mov	r4, r0
 800cbd2:	460d      	mov	r5, r1
 800cbd4:	f7f3 fc78 	bl	80004c8 <__aeabi_dmul>
 800cbd8:	f000 fb92 	bl	800d300 <floor>
 800cbdc:	2200      	movs	r2, #0
 800cbde:	4b6e      	ldr	r3, [pc, #440]	; (800cd98 <__kernel_rem_pio2+0x2ec>)
 800cbe0:	f7f3 fc72 	bl	80004c8 <__aeabi_dmul>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	4620      	mov	r0, r4
 800cbea:	4629      	mov	r1, r5
 800cbec:	f7f3 fab4 	bl	8000158 <__aeabi_dsub>
 800cbf0:	460d      	mov	r5, r1
 800cbf2:	4604      	mov	r4, r0
 800cbf4:	f7f3 ff18 	bl	8000a28 <__aeabi_d2iz>
 800cbf8:	9004      	str	r0, [sp, #16]
 800cbfa:	f7f3 fbfb 	bl	80003f4 <__aeabi_i2d>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	460b      	mov	r3, r1
 800cc02:	4620      	mov	r0, r4
 800cc04:	4629      	mov	r1, r5
 800cc06:	f7f3 faa7 	bl	8000158 <__aeabi_dsub>
 800cc0a:	f1bb 0f00 	cmp.w	fp, #0
 800cc0e:	4680      	mov	r8, r0
 800cc10:	4689      	mov	r9, r1
 800cc12:	dd70      	ble.n	800ccf6 <__kernel_rem_pio2+0x24a>
 800cc14:	1e72      	subs	r2, r6, #1
 800cc16:	ab0c      	add	r3, sp, #48	; 0x30
 800cc18:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cc1c:	9c04      	ldr	r4, [sp, #16]
 800cc1e:	f1cb 0118 	rsb	r1, fp, #24
 800cc22:	fa40 f301 	asr.w	r3, r0, r1
 800cc26:	441c      	add	r4, r3
 800cc28:	408b      	lsls	r3, r1
 800cc2a:	1ac0      	subs	r0, r0, r3
 800cc2c:	ab0c      	add	r3, sp, #48	; 0x30
 800cc2e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800cc32:	f1cb 0317 	rsb	r3, fp, #23
 800cc36:	9404      	str	r4, [sp, #16]
 800cc38:	fa40 f303 	asr.w	r3, r0, r3
 800cc3c:	9300      	str	r3, [sp, #0]
 800cc3e:	9b00      	ldr	r3, [sp, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	dd66      	ble.n	800cd12 <__kernel_rem_pio2+0x266>
 800cc44:	2200      	movs	r2, #0
 800cc46:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cc4a:	4614      	mov	r4, r2
 800cc4c:	9b04      	ldr	r3, [sp, #16]
 800cc4e:	3301      	adds	r3, #1
 800cc50:	9304      	str	r3, [sp, #16]
 800cc52:	4296      	cmp	r6, r2
 800cc54:	f300 80ac 	bgt.w	800cdb0 <__kernel_rem_pio2+0x304>
 800cc58:	f1bb 0f00 	cmp.w	fp, #0
 800cc5c:	dd07      	ble.n	800cc6e <__kernel_rem_pio2+0x1c2>
 800cc5e:	f1bb 0f01 	cmp.w	fp, #1
 800cc62:	f000 80b4 	beq.w	800cdce <__kernel_rem_pio2+0x322>
 800cc66:	f1bb 0f02 	cmp.w	fp, #2
 800cc6a:	f000 80ba 	beq.w	800cde2 <__kernel_rem_pio2+0x336>
 800cc6e:	9b00      	ldr	r3, [sp, #0]
 800cc70:	2b02      	cmp	r3, #2
 800cc72:	d14e      	bne.n	800cd12 <__kernel_rem_pio2+0x266>
 800cc74:	4642      	mov	r2, r8
 800cc76:	464b      	mov	r3, r9
 800cc78:	2000      	movs	r0, #0
 800cc7a:	4948      	ldr	r1, [pc, #288]	; (800cd9c <__kernel_rem_pio2+0x2f0>)
 800cc7c:	f7f3 fa6c 	bl	8000158 <__aeabi_dsub>
 800cc80:	4680      	mov	r8, r0
 800cc82:	4689      	mov	r9, r1
 800cc84:	2c00      	cmp	r4, #0
 800cc86:	d044      	beq.n	800cd12 <__kernel_rem_pio2+0x266>
 800cc88:	465a      	mov	r2, fp
 800cc8a:	2000      	movs	r0, #0
 800cc8c:	4943      	ldr	r1, [pc, #268]	; (800cd9c <__kernel_rem_pio2+0x2f0>)
 800cc8e:	f000 fbbf 	bl	800d410 <scalbn>
 800cc92:	4602      	mov	r2, r0
 800cc94:	460b      	mov	r3, r1
 800cc96:	4640      	mov	r0, r8
 800cc98:	4649      	mov	r1, r9
 800cc9a:	f7f3 fa5d 	bl	8000158 <__aeabi_dsub>
 800cc9e:	4680      	mov	r8, r0
 800cca0:	4689      	mov	r9, r1
 800cca2:	e036      	b.n	800cd12 <__kernel_rem_pio2+0x266>
 800cca4:	2200      	movs	r2, #0
 800cca6:	4b3e      	ldr	r3, [pc, #248]	; (800cda0 <__kernel_rem_pio2+0x2f4>)
 800cca8:	4620      	mov	r0, r4
 800ccaa:	4629      	mov	r1, r5
 800ccac:	f7f3 fc0c 	bl	80004c8 <__aeabi_dmul>
 800ccb0:	f7f3 feba 	bl	8000a28 <__aeabi_d2iz>
 800ccb4:	f7f3 fb9e 	bl	80003f4 <__aeabi_i2d>
 800ccb8:	4602      	mov	r2, r0
 800ccba:	460b      	mov	r3, r1
 800ccbc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	4b38      	ldr	r3, [pc, #224]	; (800cda4 <__kernel_rem_pio2+0x2f8>)
 800ccc4:	f7f3 fc00 	bl	80004c8 <__aeabi_dmul>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	460b      	mov	r3, r1
 800cccc:	4620      	mov	r0, r4
 800ccce:	4629      	mov	r1, r5
 800ccd0:	f7f3 fa42 	bl	8000158 <__aeabi_dsub>
 800ccd4:	f7f3 fea8 	bl	8000a28 <__aeabi_d2iz>
 800ccd8:	9b00      	ldr	r3, [sp, #0]
 800ccda:	f109 39ff 	add.w	r9, r9, #4294967295
 800ccde:	f843 0b04 	str.w	r0, [r3], #4
 800cce2:	9300      	str	r3, [sp, #0]
 800cce4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cce8:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ccec:	f7f3 fa36 	bl	800015c <__adddf3>
 800ccf0:	4604      	mov	r4, r0
 800ccf2:	460d      	mov	r5, r1
 800ccf4:	e75f      	b.n	800cbb6 <__kernel_rem_pio2+0x10a>
 800ccf6:	d105      	bne.n	800cd04 <__kernel_rem_pio2+0x258>
 800ccf8:	1e73      	subs	r3, r6, #1
 800ccfa:	aa0c      	add	r2, sp, #48	; 0x30
 800ccfc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cd00:	15c3      	asrs	r3, r0, #23
 800cd02:	e79b      	b.n	800cc3c <__kernel_rem_pio2+0x190>
 800cd04:	2200      	movs	r2, #0
 800cd06:	4b28      	ldr	r3, [pc, #160]	; (800cda8 <__kernel_rem_pio2+0x2fc>)
 800cd08:	f7f3 fe64 	bl	80009d4 <__aeabi_dcmpge>
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	d13e      	bne.n	800cd8e <__kernel_rem_pio2+0x2e2>
 800cd10:	9000      	str	r0, [sp, #0]
 800cd12:	2200      	movs	r2, #0
 800cd14:	2300      	movs	r3, #0
 800cd16:	4640      	mov	r0, r8
 800cd18:	4649      	mov	r1, r9
 800cd1a:	f7f3 fe3d 	bl	8000998 <__aeabi_dcmpeq>
 800cd1e:	2800      	cmp	r0, #0
 800cd20:	f000 80b1 	beq.w	800ce86 <__kernel_rem_pio2+0x3da>
 800cd24:	1e74      	subs	r4, r6, #1
 800cd26:	4623      	mov	r3, r4
 800cd28:	2200      	movs	r2, #0
 800cd2a:	9902      	ldr	r1, [sp, #8]
 800cd2c:	428b      	cmp	r3, r1
 800cd2e:	da5f      	bge.n	800cdf0 <__kernel_rem_pio2+0x344>
 800cd30:	2a00      	cmp	r2, #0
 800cd32:	d074      	beq.n	800ce1e <__kernel_rem_pio2+0x372>
 800cd34:	ab0c      	add	r3, sp, #48	; 0x30
 800cd36:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cd3a:	f1ab 0b18 	sub.w	fp, fp, #24
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	f000 809f 	beq.w	800ce82 <__kernel_rem_pio2+0x3d6>
 800cd44:	465a      	mov	r2, fp
 800cd46:	2000      	movs	r0, #0
 800cd48:	4914      	ldr	r1, [pc, #80]	; (800cd9c <__kernel_rem_pio2+0x2f0>)
 800cd4a:	f000 fb61 	bl	800d410 <scalbn>
 800cd4e:	46a2      	mov	sl, r4
 800cd50:	4606      	mov	r6, r0
 800cd52:	460f      	mov	r7, r1
 800cd54:	f04f 0800 	mov.w	r8, #0
 800cd58:	ab70      	add	r3, sp, #448	; 0x1c0
 800cd5a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800cda0 <__kernel_rem_pio2+0x2f4>
 800cd5e:	00e5      	lsls	r5, r4, #3
 800cd60:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800cd64:	f1ba 0f00 	cmp.w	sl, #0
 800cd68:	f280 80c3 	bge.w	800cef2 <__kernel_rem_pio2+0x446>
 800cd6c:	4626      	mov	r6, r4
 800cd6e:	2e00      	cmp	r6, #0
 800cd70:	f2c0 80f5 	blt.w	800cf5e <__kernel_rem_pio2+0x4b2>
 800cd74:	4b0d      	ldr	r3, [pc, #52]	; (800cdac <__kernel_rem_pio2+0x300>)
 800cd76:	f04f 0a00 	mov.w	sl, #0
 800cd7a:	9307      	str	r3, [sp, #28]
 800cd7c:	ab70      	add	r3, sp, #448	; 0x1c0
 800cd7e:	f04f 0b00 	mov.w	fp, #0
 800cd82:	f04f 0800 	mov.w	r8, #0
 800cd86:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800cd8a:	1ba7      	subs	r7, r4, r6
 800cd8c:	e0db      	b.n	800cf46 <__kernel_rem_pio2+0x49a>
 800cd8e:	2302      	movs	r3, #2
 800cd90:	9300      	str	r3, [sp, #0]
 800cd92:	e757      	b.n	800cc44 <__kernel_rem_pio2+0x198>
 800cd94:	0800d7d8 	.word	0x0800d7d8
 800cd98:	40200000 	.word	0x40200000
 800cd9c:	3ff00000 	.word	0x3ff00000
 800cda0:	3e700000 	.word	0x3e700000
 800cda4:	41700000 	.word	0x41700000
 800cda8:	3fe00000 	.word	0x3fe00000
 800cdac:	0800d798 	.word	0x0800d798
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	b944      	cbnz	r4, 800cdc6 <__kernel_rem_pio2+0x31a>
 800cdb4:	b11b      	cbz	r3, 800cdbe <__kernel_rem_pio2+0x312>
 800cdb6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800cdba:	603b      	str	r3, [r7, #0]
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	461c      	mov	r4, r3
 800cdc0:	3201      	adds	r2, #1
 800cdc2:	3704      	adds	r7, #4
 800cdc4:	e745      	b.n	800cc52 <__kernel_rem_pio2+0x1a6>
 800cdc6:	1acb      	subs	r3, r1, r3
 800cdc8:	603b      	str	r3, [r7, #0]
 800cdca:	4623      	mov	r3, r4
 800cdcc:	e7f7      	b.n	800cdbe <__kernel_rem_pio2+0x312>
 800cdce:	1e72      	subs	r2, r6, #1
 800cdd0:	ab0c      	add	r3, sp, #48	; 0x30
 800cdd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdd6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cdda:	a90c      	add	r1, sp, #48	; 0x30
 800cddc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cde0:	e745      	b.n	800cc6e <__kernel_rem_pio2+0x1c2>
 800cde2:	1e72      	subs	r2, r6, #1
 800cde4:	ab0c      	add	r3, sp, #48	; 0x30
 800cde6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cdee:	e7f4      	b.n	800cdda <__kernel_rem_pio2+0x32e>
 800cdf0:	a90c      	add	r1, sp, #48	; 0x30
 800cdf2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cdf6:	3b01      	subs	r3, #1
 800cdf8:	430a      	orrs	r2, r1
 800cdfa:	e796      	b.n	800cd2a <__kernel_rem_pio2+0x27e>
 800cdfc:	3401      	adds	r4, #1
 800cdfe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ce02:	2a00      	cmp	r2, #0
 800ce04:	d0fa      	beq.n	800cdfc <__kernel_rem_pio2+0x350>
 800ce06:	9b08      	ldr	r3, [sp, #32]
 800ce08:	f106 0801 	add.w	r8, r6, #1
 800ce0c:	18f5      	adds	r5, r6, r3
 800ce0e:	ab20      	add	r3, sp, #128	; 0x80
 800ce10:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ce14:	4434      	add	r4, r6
 800ce16:	4544      	cmp	r4, r8
 800ce18:	da04      	bge.n	800ce24 <__kernel_rem_pio2+0x378>
 800ce1a:	4626      	mov	r6, r4
 800ce1c:	e6bf      	b.n	800cb9e <__kernel_rem_pio2+0xf2>
 800ce1e:	2401      	movs	r4, #1
 800ce20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce22:	e7ec      	b.n	800cdfe <__kernel_rem_pio2+0x352>
 800ce24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce26:	f04f 0900 	mov.w	r9, #0
 800ce2a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ce2e:	f7f3 fae1 	bl	80003f4 <__aeabi_i2d>
 800ce32:	2600      	movs	r6, #0
 800ce34:	2700      	movs	r7, #0
 800ce36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce38:	e9c5 0100 	strd	r0, r1, [r5]
 800ce3c:	3b08      	subs	r3, #8
 800ce3e:	9300      	str	r3, [sp, #0]
 800ce40:	9504      	str	r5, [sp, #16]
 800ce42:	9b07      	ldr	r3, [sp, #28]
 800ce44:	4599      	cmp	r9, r3
 800ce46:	dd05      	ble.n	800ce54 <__kernel_rem_pio2+0x3a8>
 800ce48:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800ce4c:	f108 0801 	add.w	r8, r8, #1
 800ce50:	3508      	adds	r5, #8
 800ce52:	e7e0      	b.n	800ce16 <__kernel_rem_pio2+0x36a>
 800ce54:	f8dd c010 	ldr.w	ip, [sp, #16]
 800ce58:	9900      	ldr	r1, [sp, #0]
 800ce5a:	f109 0901 	add.w	r9, r9, #1
 800ce5e:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800ce62:	9100      	str	r1, [sp, #0]
 800ce64:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800ce68:	f8cd c010 	str.w	ip, [sp, #16]
 800ce6c:	f7f3 fb2c 	bl	80004c8 <__aeabi_dmul>
 800ce70:	4602      	mov	r2, r0
 800ce72:	460b      	mov	r3, r1
 800ce74:	4630      	mov	r0, r6
 800ce76:	4639      	mov	r1, r7
 800ce78:	f7f3 f970 	bl	800015c <__adddf3>
 800ce7c:	4606      	mov	r6, r0
 800ce7e:	460f      	mov	r7, r1
 800ce80:	e7df      	b.n	800ce42 <__kernel_rem_pio2+0x396>
 800ce82:	3c01      	subs	r4, #1
 800ce84:	e756      	b.n	800cd34 <__kernel_rem_pio2+0x288>
 800ce86:	f1cb 0200 	rsb	r2, fp, #0
 800ce8a:	4640      	mov	r0, r8
 800ce8c:	4649      	mov	r1, r9
 800ce8e:	f000 fabf 	bl	800d410 <scalbn>
 800ce92:	2200      	movs	r2, #0
 800ce94:	4ba4      	ldr	r3, [pc, #656]	; (800d128 <__kernel_rem_pio2+0x67c>)
 800ce96:	4604      	mov	r4, r0
 800ce98:	460d      	mov	r5, r1
 800ce9a:	f7f3 fd9b 	bl	80009d4 <__aeabi_dcmpge>
 800ce9e:	b1f8      	cbz	r0, 800cee0 <__kernel_rem_pio2+0x434>
 800cea0:	2200      	movs	r2, #0
 800cea2:	4ba2      	ldr	r3, [pc, #648]	; (800d12c <__kernel_rem_pio2+0x680>)
 800cea4:	4620      	mov	r0, r4
 800cea6:	4629      	mov	r1, r5
 800cea8:	f7f3 fb0e 	bl	80004c8 <__aeabi_dmul>
 800ceac:	f7f3 fdbc 	bl	8000a28 <__aeabi_d2iz>
 800ceb0:	4607      	mov	r7, r0
 800ceb2:	f7f3 fa9f 	bl	80003f4 <__aeabi_i2d>
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	4b9b      	ldr	r3, [pc, #620]	; (800d128 <__kernel_rem_pio2+0x67c>)
 800ceba:	f7f3 fb05 	bl	80004c8 <__aeabi_dmul>
 800cebe:	460b      	mov	r3, r1
 800cec0:	4602      	mov	r2, r0
 800cec2:	4629      	mov	r1, r5
 800cec4:	4620      	mov	r0, r4
 800cec6:	f7f3 f947 	bl	8000158 <__aeabi_dsub>
 800ceca:	f7f3 fdad 	bl	8000a28 <__aeabi_d2iz>
 800cece:	1c74      	adds	r4, r6, #1
 800ced0:	ab0c      	add	r3, sp, #48	; 0x30
 800ced2:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800ced6:	f10b 0b18 	add.w	fp, fp, #24
 800ceda:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800cede:	e731      	b.n	800cd44 <__kernel_rem_pio2+0x298>
 800cee0:	4620      	mov	r0, r4
 800cee2:	4629      	mov	r1, r5
 800cee4:	f7f3 fda0 	bl	8000a28 <__aeabi_d2iz>
 800cee8:	ab0c      	add	r3, sp, #48	; 0x30
 800ceea:	4634      	mov	r4, r6
 800ceec:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800cef0:	e728      	b.n	800cd44 <__kernel_rem_pio2+0x298>
 800cef2:	ab0c      	add	r3, sp, #48	; 0x30
 800cef4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800cef8:	f7f3 fa7c 	bl	80003f4 <__aeabi_i2d>
 800cefc:	4632      	mov	r2, r6
 800cefe:	463b      	mov	r3, r7
 800cf00:	f7f3 fae2 	bl	80004c8 <__aeabi_dmul>
 800cf04:	4642      	mov	r2, r8
 800cf06:	e86b 0102 	strd	r0, r1, [fp], #-8
 800cf0a:	464b      	mov	r3, r9
 800cf0c:	4630      	mov	r0, r6
 800cf0e:	4639      	mov	r1, r7
 800cf10:	f7f3 fada 	bl	80004c8 <__aeabi_dmul>
 800cf14:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf18:	4606      	mov	r6, r0
 800cf1a:	460f      	mov	r7, r1
 800cf1c:	e722      	b.n	800cd64 <__kernel_rem_pio2+0x2b8>
 800cf1e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800cf22:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800cf26:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800cf2a:	f8cd c01c 	str.w	ip, [sp, #28]
 800cf2e:	f7f3 facb 	bl	80004c8 <__aeabi_dmul>
 800cf32:	4602      	mov	r2, r0
 800cf34:	460b      	mov	r3, r1
 800cf36:	4650      	mov	r0, sl
 800cf38:	4659      	mov	r1, fp
 800cf3a:	f7f3 f90f 	bl	800015c <__adddf3>
 800cf3e:	4682      	mov	sl, r0
 800cf40:	468b      	mov	fp, r1
 800cf42:	f108 0801 	add.w	r8, r8, #1
 800cf46:	9b02      	ldr	r3, [sp, #8]
 800cf48:	4598      	cmp	r8, r3
 800cf4a:	dc01      	bgt.n	800cf50 <__kernel_rem_pio2+0x4a4>
 800cf4c:	45b8      	cmp	r8, r7
 800cf4e:	dde6      	ble.n	800cf1e <__kernel_rem_pio2+0x472>
 800cf50:	ab48      	add	r3, sp, #288	; 0x120
 800cf52:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800cf56:	e9c7 ab00 	strd	sl, fp, [r7]
 800cf5a:	3e01      	subs	r6, #1
 800cf5c:	e707      	b.n	800cd6e <__kernel_rem_pio2+0x2c2>
 800cf5e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800cf60:	2b02      	cmp	r3, #2
 800cf62:	dc09      	bgt.n	800cf78 <__kernel_rem_pio2+0x4cc>
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	dc32      	bgt.n	800cfce <__kernel_rem_pio2+0x522>
 800cf68:	d05a      	beq.n	800d020 <__kernel_rem_pio2+0x574>
 800cf6a:	9b04      	ldr	r3, [sp, #16]
 800cf6c:	f003 0007 	and.w	r0, r3, #7
 800cf70:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800cf74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf78:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800cf7a:	2b03      	cmp	r3, #3
 800cf7c:	d1f5      	bne.n	800cf6a <__kernel_rem_pio2+0x4be>
 800cf7e:	ab48      	add	r3, sp, #288	; 0x120
 800cf80:	441d      	add	r5, r3
 800cf82:	46aa      	mov	sl, r5
 800cf84:	46a3      	mov	fp, r4
 800cf86:	f1bb 0f00 	cmp.w	fp, #0
 800cf8a:	dc76      	bgt.n	800d07a <__kernel_rem_pio2+0x5ce>
 800cf8c:	46aa      	mov	sl, r5
 800cf8e:	46a3      	mov	fp, r4
 800cf90:	f1bb 0f01 	cmp.w	fp, #1
 800cf94:	f300 8090 	bgt.w	800d0b8 <__kernel_rem_pio2+0x60c>
 800cf98:	2700      	movs	r7, #0
 800cf9a:	463e      	mov	r6, r7
 800cf9c:	2c01      	cmp	r4, #1
 800cf9e:	f300 80aa 	bgt.w	800d0f6 <__kernel_rem_pio2+0x64a>
 800cfa2:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800cfa6:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800cfaa:	9b00      	ldr	r3, [sp, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f040 80ac 	bne.w	800d10a <__kernel_rem_pio2+0x65e>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	462a      	mov	r2, r5
 800cfb6:	9806      	ldr	r0, [sp, #24]
 800cfb8:	e9c0 2300 	strd	r2, r3, [r0]
 800cfbc:	4622      	mov	r2, r4
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cfc4:	463a      	mov	r2, r7
 800cfc6:	4633      	mov	r3, r6
 800cfc8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800cfcc:	e7cd      	b.n	800cf6a <__kernel_rem_pio2+0x4be>
 800cfce:	2000      	movs	r0, #0
 800cfd0:	46a0      	mov	r8, r4
 800cfd2:	4601      	mov	r1, r0
 800cfd4:	ab48      	add	r3, sp, #288	; 0x120
 800cfd6:	441d      	add	r5, r3
 800cfd8:	f1b8 0f00 	cmp.w	r8, #0
 800cfdc:	da3a      	bge.n	800d054 <__kernel_rem_pio2+0x5a8>
 800cfde:	9b00      	ldr	r3, [sp, #0]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d03e      	beq.n	800d062 <__kernel_rem_pio2+0x5b6>
 800cfe4:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800cfe8:	4602      	mov	r2, r0
 800cfea:	462b      	mov	r3, r5
 800cfec:	9d06      	ldr	r5, [sp, #24]
 800cfee:	2601      	movs	r6, #1
 800cff0:	e9c5 2300 	strd	r2, r3, [r5]
 800cff4:	460b      	mov	r3, r1
 800cff6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800cffa:	f7f3 f8ad 	bl	8000158 <__aeabi_dsub>
 800cffe:	4684      	mov	ip, r0
 800d000:	460f      	mov	r7, r1
 800d002:	ad48      	add	r5, sp, #288	; 0x120
 800d004:	42b4      	cmp	r4, r6
 800d006:	f105 0508 	add.w	r5, r5, #8
 800d00a:	da2c      	bge.n	800d066 <__kernel_rem_pio2+0x5ba>
 800d00c:	9b00      	ldr	r3, [sp, #0]
 800d00e:	b10b      	cbz	r3, 800d014 <__kernel_rem_pio2+0x568>
 800d010:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800d014:	4662      	mov	r2, ip
 800d016:	463b      	mov	r3, r7
 800d018:	9906      	ldr	r1, [sp, #24]
 800d01a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800d01e:	e7a4      	b.n	800cf6a <__kernel_rem_pio2+0x4be>
 800d020:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800d022:	ab48      	add	r3, sp, #288	; 0x120
 800d024:	4637      	mov	r7, r6
 800d026:	441d      	add	r5, r3
 800d028:	2c00      	cmp	r4, #0
 800d02a:	da09      	bge.n	800d040 <__kernel_rem_pio2+0x594>
 800d02c:	9b00      	ldr	r3, [sp, #0]
 800d02e:	b10b      	cbz	r3, 800d034 <__kernel_rem_pio2+0x588>
 800d030:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800d034:	4632      	mov	r2, r6
 800d036:	463b      	mov	r3, r7
 800d038:	9906      	ldr	r1, [sp, #24]
 800d03a:	e9c1 2300 	strd	r2, r3, [r1]
 800d03e:	e794      	b.n	800cf6a <__kernel_rem_pio2+0x4be>
 800d040:	4630      	mov	r0, r6
 800d042:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800d046:	4639      	mov	r1, r7
 800d048:	f7f3 f888 	bl	800015c <__adddf3>
 800d04c:	3c01      	subs	r4, #1
 800d04e:	4606      	mov	r6, r0
 800d050:	460f      	mov	r7, r1
 800d052:	e7e9      	b.n	800d028 <__kernel_rem_pio2+0x57c>
 800d054:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800d058:	f7f3 f880 	bl	800015c <__adddf3>
 800d05c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d060:	e7ba      	b.n	800cfd8 <__kernel_rem_pio2+0x52c>
 800d062:	460d      	mov	r5, r1
 800d064:	e7c0      	b.n	800cfe8 <__kernel_rem_pio2+0x53c>
 800d066:	4660      	mov	r0, ip
 800d068:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d06c:	4639      	mov	r1, r7
 800d06e:	f7f3 f875 	bl	800015c <__adddf3>
 800d072:	3601      	adds	r6, #1
 800d074:	4684      	mov	ip, r0
 800d076:	460f      	mov	r7, r1
 800d078:	e7c4      	b.n	800d004 <__kernel_rem_pio2+0x558>
 800d07a:	e9da 6700 	ldrd	r6, r7, [sl]
 800d07e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800d082:	4632      	mov	r2, r6
 800d084:	463b      	mov	r3, r7
 800d086:	4640      	mov	r0, r8
 800d088:	4649      	mov	r1, r9
 800d08a:	f7f3 f867 	bl	800015c <__adddf3>
 800d08e:	4602      	mov	r2, r0
 800d090:	460b      	mov	r3, r1
 800d092:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d096:	4640      	mov	r0, r8
 800d098:	4649      	mov	r1, r9
 800d09a:	f7f3 f85d 	bl	8000158 <__aeabi_dsub>
 800d09e:	4632      	mov	r2, r6
 800d0a0:	463b      	mov	r3, r7
 800d0a2:	f7f3 f85b 	bl	800015c <__adddf3>
 800d0a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0aa:	e86a 0102 	strd	r0, r1, [sl], #-8
 800d0ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d0b2:	e9ca 2300 	strd	r2, r3, [sl]
 800d0b6:	e766      	b.n	800cf86 <__kernel_rem_pio2+0x4da>
 800d0b8:	e9da 8900 	ldrd	r8, r9, [sl]
 800d0bc:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800d0c0:	4642      	mov	r2, r8
 800d0c2:	464b      	mov	r3, r9
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	4639      	mov	r1, r7
 800d0c8:	f7f3 f848 	bl	800015c <__adddf3>
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0d4:	4630      	mov	r0, r6
 800d0d6:	4639      	mov	r1, r7
 800d0d8:	f7f3 f83e 	bl	8000158 <__aeabi_dsub>
 800d0dc:	4642      	mov	r2, r8
 800d0de:	464b      	mov	r3, r9
 800d0e0:	f7f3 f83c 	bl	800015c <__adddf3>
 800d0e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0e8:	e86a 0102 	strd	r0, r1, [sl], #-8
 800d0ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d0f0:	e9ca 2300 	strd	r2, r3, [sl]
 800d0f4:	e74c      	b.n	800cf90 <__kernel_rem_pio2+0x4e4>
 800d0f6:	4638      	mov	r0, r7
 800d0f8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800d0fc:	4631      	mov	r1, r6
 800d0fe:	f7f3 f82d 	bl	800015c <__adddf3>
 800d102:	3c01      	subs	r4, #1
 800d104:	4607      	mov	r7, r0
 800d106:	460e      	mov	r6, r1
 800d108:	e748      	b.n	800cf9c <__kernel_rem_pio2+0x4f0>
 800d10a:	9b06      	ldr	r3, [sp, #24]
 800d10c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d110:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d114:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800d118:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800d11c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800d120:	601d      	str	r5, [r3, #0]
 800d122:	615e      	str	r6, [r3, #20]
 800d124:	e721      	b.n	800cf6a <__kernel_rem_pio2+0x4be>
 800d126:	bf00      	nop
 800d128:	41700000 	.word	0x41700000
 800d12c:	3e700000 	.word	0x3e700000

0800d130 <__kernel_sin>:
 800d130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d134:	b086      	sub	sp, #24
 800d136:	e9cd 2300 	strd	r2, r3, [sp]
 800d13a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d13e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d142:	4682      	mov	sl, r0
 800d144:	460c      	mov	r4, r1
 800d146:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800d148:	da03      	bge.n	800d152 <__kernel_sin+0x22>
 800d14a:	f7f3 fc6d 	bl	8000a28 <__aeabi_d2iz>
 800d14e:	2800      	cmp	r0, #0
 800d150:	d050      	beq.n	800d1f4 <__kernel_sin+0xc4>
 800d152:	4652      	mov	r2, sl
 800d154:	4623      	mov	r3, r4
 800d156:	4650      	mov	r0, sl
 800d158:	4621      	mov	r1, r4
 800d15a:	f7f3 f9b5 	bl	80004c8 <__aeabi_dmul>
 800d15e:	4606      	mov	r6, r0
 800d160:	460f      	mov	r7, r1
 800d162:	4602      	mov	r2, r0
 800d164:	460b      	mov	r3, r1
 800d166:	4650      	mov	r0, sl
 800d168:	4621      	mov	r1, r4
 800d16a:	f7f3 f9ad 	bl	80004c8 <__aeabi_dmul>
 800d16e:	a33e      	add	r3, pc, #248	; (adr r3, 800d268 <__kernel_sin+0x138>)
 800d170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d174:	4680      	mov	r8, r0
 800d176:	4689      	mov	r9, r1
 800d178:	4630      	mov	r0, r6
 800d17a:	4639      	mov	r1, r7
 800d17c:	f7f3 f9a4 	bl	80004c8 <__aeabi_dmul>
 800d180:	a33b      	add	r3, pc, #236	; (adr r3, 800d270 <__kernel_sin+0x140>)
 800d182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d186:	f7f2 ffe7 	bl	8000158 <__aeabi_dsub>
 800d18a:	4632      	mov	r2, r6
 800d18c:	463b      	mov	r3, r7
 800d18e:	f7f3 f99b 	bl	80004c8 <__aeabi_dmul>
 800d192:	a339      	add	r3, pc, #228	; (adr r3, 800d278 <__kernel_sin+0x148>)
 800d194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d198:	f7f2 ffe0 	bl	800015c <__adddf3>
 800d19c:	4632      	mov	r2, r6
 800d19e:	463b      	mov	r3, r7
 800d1a0:	f7f3 f992 	bl	80004c8 <__aeabi_dmul>
 800d1a4:	a336      	add	r3, pc, #216	; (adr r3, 800d280 <__kernel_sin+0x150>)
 800d1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1aa:	f7f2 ffd5 	bl	8000158 <__aeabi_dsub>
 800d1ae:	4632      	mov	r2, r6
 800d1b0:	463b      	mov	r3, r7
 800d1b2:	f7f3 f989 	bl	80004c8 <__aeabi_dmul>
 800d1b6:	a334      	add	r3, pc, #208	; (adr r3, 800d288 <__kernel_sin+0x158>)
 800d1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1bc:	f7f2 ffce 	bl	800015c <__adddf3>
 800d1c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1c4:	b9dd      	cbnz	r5, 800d1fe <__kernel_sin+0xce>
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	4630      	mov	r0, r6
 800d1cc:	4639      	mov	r1, r7
 800d1ce:	f7f3 f97b 	bl	80004c8 <__aeabi_dmul>
 800d1d2:	a32f      	add	r3, pc, #188	; (adr r3, 800d290 <__kernel_sin+0x160>)
 800d1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d8:	f7f2 ffbe 	bl	8000158 <__aeabi_dsub>
 800d1dc:	4642      	mov	r2, r8
 800d1de:	464b      	mov	r3, r9
 800d1e0:	f7f3 f972 	bl	80004c8 <__aeabi_dmul>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	4650      	mov	r0, sl
 800d1ea:	4621      	mov	r1, r4
 800d1ec:	f7f2 ffb6 	bl	800015c <__adddf3>
 800d1f0:	4682      	mov	sl, r0
 800d1f2:	460c      	mov	r4, r1
 800d1f4:	4650      	mov	r0, sl
 800d1f6:	4621      	mov	r1, r4
 800d1f8:	b006      	add	sp, #24
 800d1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1fe:	2200      	movs	r2, #0
 800d200:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d204:	4b24      	ldr	r3, [pc, #144]	; (800d298 <__kernel_sin+0x168>)
 800d206:	f7f3 f95f 	bl	80004c8 <__aeabi_dmul>
 800d20a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d20e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d212:	4640      	mov	r0, r8
 800d214:	4649      	mov	r1, r9
 800d216:	f7f3 f957 	bl	80004c8 <__aeabi_dmul>
 800d21a:	4602      	mov	r2, r0
 800d21c:	460b      	mov	r3, r1
 800d21e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d222:	f7f2 ff99 	bl	8000158 <__aeabi_dsub>
 800d226:	4632      	mov	r2, r6
 800d228:	463b      	mov	r3, r7
 800d22a:	f7f3 f94d 	bl	80004c8 <__aeabi_dmul>
 800d22e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d232:	f7f2 ff91 	bl	8000158 <__aeabi_dsub>
 800d236:	a316      	add	r3, pc, #88	; (adr r3, 800d290 <__kernel_sin+0x160>)
 800d238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23c:	4606      	mov	r6, r0
 800d23e:	460f      	mov	r7, r1
 800d240:	4640      	mov	r0, r8
 800d242:	4649      	mov	r1, r9
 800d244:	f7f3 f940 	bl	80004c8 <__aeabi_dmul>
 800d248:	4602      	mov	r2, r0
 800d24a:	460b      	mov	r3, r1
 800d24c:	4630      	mov	r0, r6
 800d24e:	4639      	mov	r1, r7
 800d250:	f7f2 ff84 	bl	800015c <__adddf3>
 800d254:	4602      	mov	r2, r0
 800d256:	460b      	mov	r3, r1
 800d258:	4650      	mov	r0, sl
 800d25a:	4621      	mov	r1, r4
 800d25c:	f7f2 ff7c 	bl	8000158 <__aeabi_dsub>
 800d260:	e7c6      	b.n	800d1f0 <__kernel_sin+0xc0>
 800d262:	bf00      	nop
 800d264:	f3af 8000 	nop.w
 800d268:	5acfd57c 	.word	0x5acfd57c
 800d26c:	3de5d93a 	.word	0x3de5d93a
 800d270:	8a2b9ceb 	.word	0x8a2b9ceb
 800d274:	3e5ae5e6 	.word	0x3e5ae5e6
 800d278:	57b1fe7d 	.word	0x57b1fe7d
 800d27c:	3ec71de3 	.word	0x3ec71de3
 800d280:	19c161d5 	.word	0x19c161d5
 800d284:	3f2a01a0 	.word	0x3f2a01a0
 800d288:	1110f8a6 	.word	0x1110f8a6
 800d28c:	3f811111 	.word	0x3f811111
 800d290:	55555549 	.word	0x55555549
 800d294:	3fc55555 	.word	0x3fc55555
 800d298:	3fe00000 	.word	0x3fe00000

0800d29c <with_errno>:
 800d29c:	b570      	push	{r4, r5, r6, lr}
 800d29e:	4604      	mov	r4, r0
 800d2a0:	460d      	mov	r5, r1
 800d2a2:	4616      	mov	r6, r2
 800d2a4:	f7fd fe36 	bl	800af14 <__errno>
 800d2a8:	4629      	mov	r1, r5
 800d2aa:	6006      	str	r6, [r0, #0]
 800d2ac:	4620      	mov	r0, r4
 800d2ae:	bd70      	pop	{r4, r5, r6, pc}

0800d2b0 <xflow>:
 800d2b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2b2:	4615      	mov	r5, r2
 800d2b4:	461c      	mov	r4, r3
 800d2b6:	b180      	cbz	r0, 800d2da <xflow+0x2a>
 800d2b8:	4610      	mov	r0, r2
 800d2ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d2be:	e9cd 0100 	strd	r0, r1, [sp]
 800d2c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2c6:	4628      	mov	r0, r5
 800d2c8:	4621      	mov	r1, r4
 800d2ca:	f7f3 f8fd 	bl	80004c8 <__aeabi_dmul>
 800d2ce:	2222      	movs	r2, #34	; 0x22
 800d2d0:	b003      	add	sp, #12
 800d2d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2d6:	f7ff bfe1 	b.w	800d29c <with_errno>
 800d2da:	4610      	mov	r0, r2
 800d2dc:	4619      	mov	r1, r3
 800d2de:	e7ee      	b.n	800d2be <xflow+0xe>

0800d2e0 <__math_uflow>:
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d2e6:	f7ff bfe3 	b.w	800d2b0 <xflow>

0800d2ea <__math_oflow>:
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d2f0:	f7ff bfde 	b.w	800d2b0 <xflow>

0800d2f4 <finite>:
 800d2f4:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800d2f8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d2fc:	0fc0      	lsrs	r0, r0, #31
 800d2fe:	4770      	bx	lr

0800d300 <floor>:
 800d300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d304:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800d308:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800d30c:	2e13      	cmp	r6, #19
 800d30e:	4602      	mov	r2, r0
 800d310:	460b      	mov	r3, r1
 800d312:	4607      	mov	r7, r0
 800d314:	460c      	mov	r4, r1
 800d316:	4605      	mov	r5, r0
 800d318:	dc33      	bgt.n	800d382 <floor+0x82>
 800d31a:	2e00      	cmp	r6, #0
 800d31c:	da14      	bge.n	800d348 <floor+0x48>
 800d31e:	a334      	add	r3, pc, #208	; (adr r3, 800d3f0 <floor+0xf0>)
 800d320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d324:	f7f2 ff1a 	bl	800015c <__adddf3>
 800d328:	2200      	movs	r2, #0
 800d32a:	2300      	movs	r3, #0
 800d32c:	f7f3 fb5c 	bl	80009e8 <__aeabi_dcmpgt>
 800d330:	b138      	cbz	r0, 800d342 <floor+0x42>
 800d332:	2c00      	cmp	r4, #0
 800d334:	da58      	bge.n	800d3e8 <floor+0xe8>
 800d336:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d33a:	431d      	orrs	r5, r3
 800d33c:	d001      	beq.n	800d342 <floor+0x42>
 800d33e:	2500      	movs	r5, #0
 800d340:	4c2d      	ldr	r4, [pc, #180]	; (800d3f8 <floor+0xf8>)
 800d342:	4623      	mov	r3, r4
 800d344:	462f      	mov	r7, r5
 800d346:	e025      	b.n	800d394 <floor+0x94>
 800d348:	4a2c      	ldr	r2, [pc, #176]	; (800d3fc <floor+0xfc>)
 800d34a:	fa42 f806 	asr.w	r8, r2, r6
 800d34e:	ea01 0208 	and.w	r2, r1, r8
 800d352:	4302      	orrs	r2, r0
 800d354:	d01e      	beq.n	800d394 <floor+0x94>
 800d356:	a326      	add	r3, pc, #152	; (adr r3, 800d3f0 <floor+0xf0>)
 800d358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35c:	f7f2 fefe 	bl	800015c <__adddf3>
 800d360:	2200      	movs	r2, #0
 800d362:	2300      	movs	r3, #0
 800d364:	f7f3 fb40 	bl	80009e8 <__aeabi_dcmpgt>
 800d368:	2800      	cmp	r0, #0
 800d36a:	d0ea      	beq.n	800d342 <floor+0x42>
 800d36c:	2c00      	cmp	r4, #0
 800d36e:	bfbe      	ittt	lt
 800d370:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d374:	fa43 f606 	asrlt.w	r6, r3, r6
 800d378:	19a4      	addlt	r4, r4, r6
 800d37a:	2500      	movs	r5, #0
 800d37c:	ea24 0408 	bic.w	r4, r4, r8
 800d380:	e7df      	b.n	800d342 <floor+0x42>
 800d382:	2e33      	cmp	r6, #51	; 0x33
 800d384:	dd0a      	ble.n	800d39c <floor+0x9c>
 800d386:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d38a:	d103      	bne.n	800d394 <floor+0x94>
 800d38c:	f7f2 fee6 	bl	800015c <__adddf3>
 800d390:	4607      	mov	r7, r0
 800d392:	460b      	mov	r3, r1
 800d394:	4638      	mov	r0, r7
 800d396:	4619      	mov	r1, r3
 800d398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d39c:	f04f 32ff 	mov.w	r2, #4294967295
 800d3a0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800d3a4:	fa22 f808 	lsr.w	r8, r2, r8
 800d3a8:	ea18 0f00 	tst.w	r8, r0
 800d3ac:	d0f2      	beq.n	800d394 <floor+0x94>
 800d3ae:	a310      	add	r3, pc, #64	; (adr r3, 800d3f0 <floor+0xf0>)
 800d3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b4:	f7f2 fed2 	bl	800015c <__adddf3>
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	f7f3 fb14 	bl	80009e8 <__aeabi_dcmpgt>
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	d0be      	beq.n	800d342 <floor+0x42>
 800d3c4:	2c00      	cmp	r4, #0
 800d3c6:	da02      	bge.n	800d3ce <floor+0xce>
 800d3c8:	2e14      	cmp	r6, #20
 800d3ca:	d103      	bne.n	800d3d4 <floor+0xd4>
 800d3cc:	3401      	adds	r4, #1
 800d3ce:	ea25 0508 	bic.w	r5, r5, r8
 800d3d2:	e7b6      	b.n	800d342 <floor+0x42>
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d3da:	fa03 f606 	lsl.w	r6, r3, r6
 800d3de:	4435      	add	r5, r6
 800d3e0:	42bd      	cmp	r5, r7
 800d3e2:	bf38      	it	cc
 800d3e4:	18e4      	addcc	r4, r4, r3
 800d3e6:	e7f2      	b.n	800d3ce <floor+0xce>
 800d3e8:	2500      	movs	r5, #0
 800d3ea:	462c      	mov	r4, r5
 800d3ec:	e7a9      	b.n	800d342 <floor+0x42>
 800d3ee:	bf00      	nop
 800d3f0:	8800759c 	.word	0x8800759c
 800d3f4:	7e37e43c 	.word	0x7e37e43c
 800d3f8:	bff00000 	.word	0xbff00000
 800d3fc:	000fffff 	.word	0x000fffff

0800d400 <nan>:
 800d400:	2000      	movs	r0, #0
 800d402:	4901      	ldr	r1, [pc, #4]	; (800d408 <nan+0x8>)
 800d404:	4770      	bx	lr
 800d406:	bf00      	nop
 800d408:	7ff80000 	.word	0x7ff80000
 800d40c:	00000000 	.word	0x00000000

0800d410 <scalbn>:
 800d410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d412:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800d416:	4604      	mov	r4, r0
 800d418:	460d      	mov	r5, r1
 800d41a:	4617      	mov	r7, r2
 800d41c:	460b      	mov	r3, r1
 800d41e:	b996      	cbnz	r6, 800d446 <scalbn+0x36>
 800d420:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d424:	4303      	orrs	r3, r0
 800d426:	d039      	beq.n	800d49c <scalbn+0x8c>
 800d428:	4b33      	ldr	r3, [pc, #204]	; (800d4f8 <scalbn+0xe8>)
 800d42a:	2200      	movs	r2, #0
 800d42c:	f7f3 f84c 	bl	80004c8 <__aeabi_dmul>
 800d430:	4b32      	ldr	r3, [pc, #200]	; (800d4fc <scalbn+0xec>)
 800d432:	4604      	mov	r4, r0
 800d434:	429f      	cmp	r7, r3
 800d436:	460d      	mov	r5, r1
 800d438:	da0f      	bge.n	800d45a <scalbn+0x4a>
 800d43a:	a32b      	add	r3, pc, #172	; (adr r3, 800d4e8 <scalbn+0xd8>)
 800d43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d440:	f7f3 f842 	bl	80004c8 <__aeabi_dmul>
 800d444:	e006      	b.n	800d454 <scalbn+0x44>
 800d446:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d44a:	4296      	cmp	r6, r2
 800d44c:	d10a      	bne.n	800d464 <scalbn+0x54>
 800d44e:	4602      	mov	r2, r0
 800d450:	f7f2 fe84 	bl	800015c <__adddf3>
 800d454:	4604      	mov	r4, r0
 800d456:	460d      	mov	r5, r1
 800d458:	e020      	b.n	800d49c <scalbn+0x8c>
 800d45a:	460b      	mov	r3, r1
 800d45c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d460:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800d464:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800d468:	19b9      	adds	r1, r7, r6
 800d46a:	4291      	cmp	r1, r2
 800d46c:	dd0e      	ble.n	800d48c <scalbn+0x7c>
 800d46e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800d472:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800d476:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800d47a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800d47e:	4820      	ldr	r0, [pc, #128]	; (800d500 <scalbn+0xf0>)
 800d480:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800d484:	a31a      	add	r3, pc, #104	; (adr r3, 800d4f0 <scalbn+0xe0>)
 800d486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48a:	e7d9      	b.n	800d440 <scalbn+0x30>
 800d48c:	2900      	cmp	r1, #0
 800d48e:	dd08      	ble.n	800d4a2 <scalbn+0x92>
 800d490:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d494:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d498:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d49c:	4620      	mov	r0, r4
 800d49e:	4629      	mov	r1, r5
 800d4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4a2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800d4a6:	da12      	bge.n	800d4ce <scalbn+0xbe>
 800d4a8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d4ac:	429f      	cmp	r7, r3
 800d4ae:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800d4b2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800d4b6:	dcdc      	bgt.n	800d472 <scalbn+0x62>
 800d4b8:	a30b      	add	r3, pc, #44	; (adr r3, 800d4e8 <scalbn+0xd8>)
 800d4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4be:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800d4c2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800d4c6:	480f      	ldr	r0, [pc, #60]	; (800d504 <scalbn+0xf4>)
 800d4c8:	f041 011f 	orr.w	r1, r1, #31
 800d4cc:	e7b8      	b.n	800d440 <scalbn+0x30>
 800d4ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d4d2:	3136      	adds	r1, #54	; 0x36
 800d4d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d4d8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d4dc:	4620      	mov	r0, r4
 800d4de:	4629      	mov	r1, r5
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	4b09      	ldr	r3, [pc, #36]	; (800d508 <scalbn+0xf8>)
 800d4e4:	e7ac      	b.n	800d440 <scalbn+0x30>
 800d4e6:	bf00      	nop
 800d4e8:	c2f8f359 	.word	0xc2f8f359
 800d4ec:	01a56e1f 	.word	0x01a56e1f
 800d4f0:	8800759c 	.word	0x8800759c
 800d4f4:	7e37e43c 	.word	0x7e37e43c
 800d4f8:	43500000 	.word	0x43500000
 800d4fc:	ffff3cb0 	.word	0xffff3cb0
 800d500:	8800759c 	.word	0x8800759c
 800d504:	c2f8f359 	.word	0xc2f8f359
 800d508:	3c900000 	.word	0x3c900000

0800d50c <_init>:
 800d50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d50e:	bf00      	nop
 800d510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d512:	bc08      	pop	{r3}
 800d514:	469e      	mov	lr, r3
 800d516:	4770      	bx	lr

0800d518 <_fini>:
 800d518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d51a:	bf00      	nop
 800d51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d51e:	bc08      	pop	{r3}
 800d520:	469e      	mov	lr, r3
 800d522:	4770      	bx	lr
